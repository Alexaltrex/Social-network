{"version":3,"sources":["Components/common/FormsControls/FormControls.module.css","Components/Main/Dialogs/Dialog/Dialog.tsx","Components/Main/Dialogs/Message/Message.tsx","Components/common/FormsControls/FormControls.tsx","Components/Main/Dialogs/Dialogs.tsx","Components/Main/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialog","props","id","name","path","to","Message","text","FormControl","meta","touched","error","children","hasError","className","style","Textarea","input","restProps","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","placeholder","validators","component","Field","validate","createField","required","maxLength100","Dialogs","dialogs","messages","addMessage","dialogsElements","map","dialog","key","messagesElements","message","formData","newMessageText","dialogsAC","DialogsContainer","compose","connect","state","isAuth","auth","withAuthRedirect"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,UAAY,gCAAgC,aAAe,qC,oECiBlGC,EAVoB,SAACC,GAAW,IACpCC,EAAYD,EAAZC,GAAIC,EAAQF,EAARE,KACPC,EAAO,YAAcF,EACzB,OACI,6BACI,kBAAC,IAAD,CAASG,GAAID,GAAOD,KCAjBG,EAPqB,SAACL,GAAW,IACrCM,EAAQN,EAARM,KACP,OACI,6BAAMA,I,4CCCRC,EAA8C,SAACP,GAAW,IAAD,EAChBA,EAApCQ,KAAOC,EAD6C,EAC7CA,QAASC,EADoC,EACpCA,MAAQC,EAAYX,EAAZW,SACzBC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWD,EAAWE,IAAMJ,MAAQ,IACrC,6BACKC,KAQJI,EAAwC,SAACf,GAAW,IACtDgB,EAA6BhB,EAA7BgB,MAAgBC,GAAajB,EAAtBQ,KAD8C,YACxBR,EADwB,mBAE5D,OAAO,kBAAC,EAAgBA,EACpB,8CAAcgB,EAAWC,M,YCmC3BC,EAAsBC,YAAoD,CAC5EC,KAAM,UADkBD,EAbuF,SAACnB,GAChH,OACI,0BAAMqB,SAAUrB,EAAMsB,cAClB,6BDdL,SAAkDC,EAC7BrB,EACAsB,EACAC,GAEY,IADZzB,EACW,uDADH,GACRM,EAAW,uDAAJ,GAC/B,OAAO,6BACH,kBAACoB,EAAA,EAAD,eACIH,YAAaA,EACbrB,KAAMA,EACNyB,SAAUH,EACVC,UAAWA,GACPzB,IACLM,GCEMsB,CAAgC,qBAAsB,iBAAkB,CAACC,IAAUC,KAAef,IAEvG,6BACI,iDAUDgB,EAnDsB,SAAC/B,GAAW,IACtCgC,EAAiChC,EAAjCgC,QAASC,EAAwBjC,EAAxBiC,SAAUC,EAAclC,EAAdkC,WACtBC,EAAkBH,EAAQI,KAAI,SAAAC,GAAM,OACpC,kBAAC,EAAD,CAAQnC,KAAMmC,EAAOnC,KAAMD,GAAIoC,EAAOpC,GAAIqC,IAAKD,EAAOpC,QAEtDsC,EAAmBN,EAASG,KAAI,SAAAI,GAAO,OACvC,kBAAC,EAAD,CAASlC,KAAMkC,EAAQlC,KAAMgC,IAAKE,EAAQvC,QAO9C,OACI,6BACI,6BACI,6BACKkC,GAEL,6BACKI,IAGT,kBAACrB,EAAD,CAAqBG,SAdV,SAACoB,GAChBP,EAAWO,EAASC,qB,iCCItBR,EAAaS,IAAUT,WAEvBU,EAAmBC,kBAA6BC,aAVhC,SAACC,GACnB,MAAO,CACHf,QAASe,EAAMf,QAAQA,QACvBC,SAAUc,EAAMf,QAAQC,SACxBe,OAAQD,EAAME,KAAKD,UASa,CAACd,eACrCgB,IAJqBL,CAIHd,GAEPa","file":"static/js/4.1ee88b4e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormControls_error__3QR09\",\"errorText\":\"FormControls_errorText__3x3ek\",\"summaryError\":\"FormControls_summaryError__3nXLr\"};","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst Dialog:React.FC<PropsType> = (props) => {\r\n    const {id, name} = props;\r\n    let path = \"/dialogs/\" + id;\r\n    return (\r\n        <div>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\n\r\ntype PropsType = {\r\n    text: string\r\n}\r\n\r\nconst Message:React.FC<PropsType> = (props) => {\r\n    const {text} = props;\r\n    return (\r\n        <div>{text}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport style from './FormControls.module.css';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utilities/validators/validators\";\r\nimport {LoginFormValuesType} from \"../../Login/Login\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = (props) => {\r\n    const {meta: {touched, error}, children} = props;\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={hasError ? style.error : ''}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n//export type\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = '') {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n};\r\n\r\nexport type GetStringKeysType<T> = Extract<keyof T, string>;","import React from 'react';\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport Message from \"./Message/Message\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {DialogType, MessageType} from \"../../../types/types\";\r\nimport { createField, Textarea } from '../../common/FormsControls/FormControls';\r\nimport {maxLength100, required} from \"../../../utilities/validators/validators\";\r\n\r\n\r\ntype PropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    const {dialogs, messages, addMessage} = props\r\n    let dialogsElements = dialogs.map(dialog =>\r\n        <Dialog name={dialog.name} id={dialog.id} key={dialog.id}/>);\r\n\r\n    let messagesElements = messages.map(message =>\r\n        <Message text={message.text} key={message.id}/>\r\n    );\r\n\r\n    let onAddMessage = (formData: { newMessageText: string }) => {\r\n        addMessage(formData.newMessageText);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={onAddMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport type DialogFormValuesType = {\r\n    newMessageText: string\r\n}\r\ntype DialogFormKeysType = Extract<keyof DialogFormValuesType, string>;\r\ntype DialogFormOwnProps = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<DialogFormValuesType, DialogFormOwnProps> & DialogFormOwnProps> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<DialogFormKeysType>('enter your message', \"newMessageText\", [required, maxLength100], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Add Talk</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm<DialogFormValuesType, DialogFormOwnProps>({\r\n    form: 'dialog'\r\n})(AddMessageForm);\r\n\r\nexport default Dialogs;","import Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {DialogType, MessageType} from \"../../../types/types\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\nimport {dialogsAC} from \"../../../redux/dialogs-reducer\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogs: state.dialogs.dialogs,\r\n        messages: state.dialogs.messages,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nconst addMessage = dialogsAC.addMessage;\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n            MapDispatchPropsType,\r\n            OwnPropsType,\r\n            StateType>(mapStateToProps, {addMessage}),\r\n    withAuthRedirect)(Dialogs);\r\n\r\nexport default DialogsContainer;"],"sourceRoot":""}