{"version":3,"sources":["../node_modules/@material-ui/icons/DeleteForever.js","../node_modules/@material-ui/icons/Close.js","../node_modules/@material-ui/icons/RestoreFromTrash.js","../node_modules/@material-ui/icons/ArrowForward.js","../node_modules/@material-ui/icons/ArrowBack.js","../node_modules/@material-ui/icons/CheckCircle.js","Components/Main/Dialogs/DialogsListItem.tsx","Components/Main/Dialogs/DialogsList.tsx","../node_modules/@material-ui/core/esm/ListSubheader/ListSubheader.js","../node_modules/@material-ui/core/esm/Zoom/Zoom.js","Components/Main/Dialogs/CurrentDialogHeader.tsx","../node_modules/@material-ui/core/esm/Icon/Icon.js","Components/Main/Dialogs/CurrentDialogMessageItem.tsx","Components/Main/Dialogs/CurrentDialogMessages.tsx","Components/Main/Dialogs/CurrentDialogForm.tsx","Components/Main/Dialogs/CurrentDialog.tsx","Components/Main/Dialogs/DialogsSidebar.tsx","Components/Main/Dialogs/Dialogs.tsx"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","ListItemLink","primary","secondary","to","src","dialog","classes","useStyles","lang","useSelector","getLang","userId","useParams","selected","undefined","id","renderLink","React","useMemo","forwardRef","itemProps","ref","secondaryTransformed","DATE","dateTranslateFromAPI","className","item","ListItem","button","listItem","component","ListItemAvatar","Avatar","avatar","Typography","color","variant","ListItemText","DialogsListItem","userName","lastDialogActivityDate","photos","small","makeStyles","borderTop","borderBottom","width","height","marginRight","padding","fontSize","fontStyle","SkeletonListItem","skeletonWrapper","Skeleton","DialogsList","dialogs","dialogsIsLoading","getDialogsIsLoading","currentDialogsSidebarItem","getCurrentDialogsSidebarItem","deletedMessages","getDeletedMessages","spamMessages","getSpamMessages","dialogsElements","map","key","dialogsDeletedElements","dialogsSpamElements","skeletonElements","i","push","Card","card","elevation","DialogsSidebarItemEnum","all","List","disablePadding","deleted","length","emptyDialogs","translate","spam","btnWrapper","marginBottom","display","alignItems","ListSubheader","props","_props$color","_props$component","Component","_props$disableGutters","disableGutters","_props$disableSticky","disableSticky","_props$inset","inset","other","_objectWithoutProperties","_extends","clsx","root","concat","capitalize","sticky","gutters","withStyles","theme","boxSizing","lineHeight","listStyle","palette","text","fontFamily","typography","fontWeight","fontWeightMedium","pxToRem","colorPrimary","main","colorInherit","paddingLeft","paddingRight","position","top","zIndex","backgroundColor","name","styles","entering","transform","entered","defaultTimeout","enter","duration","enteringScreen","exit","leavingScreen","Zoom","children","_props$disableStrictM","disableStrictModeCompat","inProp","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","_props$timeout","timeout","_props$TransitionComp","TransitionComponent","Transition","useTheme","enableStrictModeCompat","unstable_strictMode","nodeRef","foreignRef","useForkRef","handleRef","normalizedTransitionCallback","callback","nodeOrAppearing","maybeAppearing","_ref","current","_ref2","_slicedToArray","node","isAppearing","handleEntering","handleEnter","reflow","transitionProps","getTransitionProps","mode","webkitTransition","transitions","create","transition","handleEntered","handleExiting","handleExit","handleExited","appear","state","childProps","visibility","CurrentDialogHeader","currentDialog","selectedMessages","getSelectedMessages","selectedDeletedMessages","getSelectedDeletedMessages","loading","getLoading","deletedMessagesItem","find","el","currentDeletedDialog","dispatch","useDispatch","onCleanArrayHandler","dialogsAC","cleanSelectedMessages","cleanSelectedDeletedMessages","headerWrapper","header","Link","RouterLink","link","messagesCount","IconButton","onClick","iconClean","disabled","iconButtonWrapper","Tooltip","title","arrow","deleteMessages","restoreMessages","Icon","_props$fontSize","muiName","userSelect","overflow","flexShrink","colorSecondary","colorAction","action","active","colorError","error","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeLarge","CurrentDialogMessageItem","message","useState","hover","setHover","myId","getId","profile","getProfileSelector","messagesIsDeleting","getMessagesIsDeleting","srcFinally","senderId","icon","listItemWrapper","removeFromSelectedMessages","addToSelectedMessages","removeFromSelectedDeletedMessages","addToSelectedDeletedMessages","onMouseEnter","onMouseLeave","checkedIcon","messageBlock","senderName","addedAt","body","CircularPreloader","size","styleType","margin","left","flexGrow","CurrentDialogMessages","messages","messagesIsLoading","getMessagesIsLoading","messageIsSending","getMessageIsSending","useEffect","elements","elementsDeleted","circularPreloaderWrapper","emptyMessages","ReduxForm","reduxForm","form","onSubmitSuccess","result","reset","handleSubmit","submitting","pristine","classesField","useStylesField","label","onSubmit","fieldWrapper","Field","RenderTextAreaField","validate","shouldNotBeEmpty","autoFocus","rows","textArea","placeholder","type","CurrentDialogForm","formWrapper","formValue","sendMessage","grey","CurrentDialog","getMessagesSelector","subheader","skeleton","borderRadius","DialogsSidebar","Tabs","indicator","orientation","onChange","event","newValue","setCurrentDialogsSidebarItem","tabs","Tab","wrapper","tabRoot","labelIcon","borderLeft","right","flexDirection","justifyContent","textTransform","indigo","minWidth","minHeight","withAuthRedirect","isLoading","getIsLoading","getDialogsSelector","userIdNumber","getDialogs","getMessages","setMessages","firstColumn","secondColumn","lastColumn","flexBasis"],"mappings":"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","file":"static/js/4.ea8e1f20.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'DeleteForever');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 4h-3.5l-1-1h-5l-1 1H5v2h14zM6 7v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zm8 7v4h-4v-4H8l4-4 4 4h-2z\"\n}), 'RestoreFromTrash');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z\"\n}), 'ArrowForward');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckCircle');\n\nexports.default = _default;","import React from \"react\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps, useParams} from 'react-router-dom';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {DATE} from \"../../../utilities/date\";\r\nimport {UseParamsType} from \"../../../types/types\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst ListItemLink: React.FC<ListItemLinkPropsType> = ({primary, secondary, to, src, dialog}) => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    let {userId} = useParams<UseParamsType>();\r\n    const userIdNumber: number | undefined = userId ? +userId : undefined;\r\n    const selected = userIdNumber === dialog.id;\r\n\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n\r\n    const secondaryTransformed = DATE.dateTranslateFromAPI(secondary, lang);\r\n\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem button\r\n                      className={classes.listItem}\r\n                      component={renderLink}\r\n                      selected={selected}\r\n            >\r\n                <ListItemAvatar>\r\n                    <Avatar src={src} className={classes.avatar}/>\r\n                </ListItemAvatar>\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}\r\n                                  secondary={secondaryTransformed}\r\n                                  classes={{\r\n                                      primary: classes.primary,\r\n                                      secondary: classes.secondary\r\n                                  }}\r\n                    />\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n};\r\n\r\nconst DialogsListItem: React.FC<PropsType> = ({dialog}) => {\r\n\r\n    return (\r\n        <ListItemLink\r\n            to={`/dialogs/${dialog.id}`}\r\n            primary={dialog.userName}\r\n            secondary={dialog.lastDialogActivityDate}\r\n            src={dialog.photos.small ? dialog.photos.small : undefined}\r\n            dialog={dialog}\r\n        >\r\n        </ListItemLink>\r\n    )\r\n};\r\nexport default DialogsListItem;\r\n\r\n//===================== TYPE =======================\r\ntype ListItemLinkPropsType = {\r\n    primary: string\r\n    secondary: string\r\n    to: string\r\n    src: string | undefined\r\n    dialog: DialogType\r\n}\r\n\r\ntype PropsType = {\r\n    dialog: DialogType\r\n}\r\n\r\n//===================== STYLE ======================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        borderTop: '1px solid #ccc',\r\n        '&:last-child': {\r\n            borderBottom: '1px solid #ccc'\r\n        },\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50,\r\n        marginRight: 10\r\n    },\r\n    listItem: {\r\n        padding: '5px 10px'\r\n    },\r\n    secondary: {\r\n        fontSize: '0.75rem',\r\n        fontStyle: 'italic'\r\n    },\r\n    primary: {\r\n        fontSize: '0.9rem',\r\n    }\r\n});","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport List from \"@material-ui/core/List\";\r\nimport DialogsListItem from \"./DialogsListItem\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentDialogsSidebarItem,\r\n    getDeletedMessages,\r\n    getDialogsIsLoading,\r\n    getSpamMessages\r\n} from \"../../../redux/dialogs-selectors\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {DialogsSidebarItemEnum} from \"../../../types/types\";\r\nimport {translate} from \"../../../const/lang\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\n\r\nconst SkeletonListItem = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.skeletonWrapper}>\r\n            <Skeleton variant=\"circle\" width={40} height={40} className={classes.avatar}/>\r\n            <Skeleton variant=\"rect\" width={200} height={45}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst DialogsList: React.FC<PropsType> = ({dialogs}) => {\r\n    const classes = useStyles();\r\n    const dialogsIsLoading = useSelector(getDialogsIsLoading);\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n    const deletedMessages = useSelector(getDeletedMessages);\r\n    const spamMessages = useSelector(getSpamMessages);\r\n    const lang = useSelector(getLang);\r\n\r\n    const dialogsElements = dialogs && dialogs\r\n        .map(item => <DialogsListItem key={item.id}\r\n                                           dialog={item}/>);\r\n\r\n    const dialogsDeletedElements = deletedMessages\r\n        .map(item => <DialogsListItem key={item.dialog.id}\r\n                                           dialog={item.dialog}/>);\r\n\r\n    const dialogsSpamElements = spamMessages\r\n        .map(item => <DialogsListItem key={item.dialog.id}\r\n                                      dialog={item.dialog}/>);\r\n\r\n    const skeletonElements = [] as Array<React.ReactElement>;\r\n    for (let i = 0; i < 9; i++) {\r\n        skeletonElements.push(<SkeletonListItem key={i}/>)\r\n    }\r\n\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.all &&\r\n                <>\r\n                    {dialogsIsLoading\r\n                        ? <div>\r\n                            {skeletonElements}\r\n                        </div>\r\n                        : <List disablePadding>\r\n                            {dialogsElements}\r\n                        </List>\r\n                    }\r\n                </>\r\n            }\r\n\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted &&\r\n                <>\r\n                    {deletedMessages.length === 0\r\n                        ? <div className={classes.emptyDialogs}>\r\n                            <Typography variant='subtitle1' color='primary'>\r\n                                {translate(lang, 'There are no deleted dialogs')}\r\n                            </Typography>\r\n\r\n                        </div>\r\n                        : <List disablePadding>\r\n                            {dialogsDeletedElements}\r\n                        </List>\r\n                    }\r\n                </>\r\n            }\r\n\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.spam &&\r\n                <>\r\n                    {spamMessages.length === 0\r\n                        ? <div className={classes.emptyDialogs}>\r\n                            <Typography variant='subtitle1' color='primary'>\r\n                                There are no spam dialogs\r\n                            </Typography>\r\n\r\n                        </div>\r\n                        : <List disablePadding>\r\n                            {dialogsSpamElements}\r\n                        </List>\r\n                    }\r\n                </>\r\n            }\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default DialogsList;\r\n\r\n//============================ TYPE ================================================\r\ntype PropsType = {\r\n    dialogs: null | Array<DialogType>\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {},\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    btnWrapper: {\r\n        marginBottom: 10\r\n    },\r\n    skeletonWrapper: {\r\n        padding: '0 16px',\r\n        height: 72,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    emptyDialogs: {\r\n        padding: '8px 16px'\r\n    }\r\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      boxSizing: 'border-box',\n      lineHeight: '48px',\n      listStyle: 'none',\n      color: theme.palette.text.secondary,\n      fontFamily: theme.typography.fontFamily,\n      fontWeight: theme.typography.fontWeightMedium,\n      fontSize: theme.typography.pxToRem(14)\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the root element if `inset={true}`. */\n    inset: {\n      paddingLeft: 72\n    },\n\n    /* Styles applied to the root element if `disableSticky={false}`. */\n    sticky: {\n      position: 'sticky',\n      top: 0,\n      zIndex: 1,\n      backgroundColor: 'inherit'\n    }\n  };\n};\nvar ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'li' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$disableSticky = props.disableSticky,\n      disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"disableGutters\", \"disableSticky\", \"inset\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, color !== 'default' && classes[\"color\".concat(capitalize(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListSubheader.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'inherit']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the List Subheader will not have gutters.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * If `true`, the List Subheader will not stick to the top during scroll.\n   */\n  disableSticky: PropTypes.bool,\n\n  /**\n   * If `true`, the List Subheader will be indented.\n   */\n  inset: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListSubheader'\n})(ListSubheader);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport { duration } from '../styles/transitions';\nimport useTheme from '../styles/useTheme';\nimport { reflow, getTransitionProps } from '../transitions/utils';\nimport useForkRef from '../utils/useForkRef';\nvar styles = {\n  entering: {\n    transform: 'none'\n  },\n  entered: {\n    transform: 'none'\n  }\n};\nvar defaultTimeout = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\n/**\n * The Zoom transition can be used for the floating variant of the\n * [Button](/components/buttons/#floating-action-buttons) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nvar Zoom = /*#__PURE__*/React.forwardRef(function Zoom(props, ref) {\n  var children = props.children,\n      _props$disableStrictM = props.disableStrictModeCompat,\n      disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,\n      inProp = props.in,\n      onEnter = props.onEnter,\n      onEntered = props.onEntered,\n      onEntering = props.onEntering,\n      onExit = props.onExit,\n      onExited = props.onExited,\n      onExiting = props.onExiting,\n      style = props.style,\n      _props$timeout = props.timeout,\n      timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout,\n      _props$TransitionComp = props.TransitionComponent,\n      TransitionComponent = _props$TransitionComp === void 0 ? Transition : _props$TransitionComp,\n      other = _objectWithoutProperties(props, [\"children\", \"disableStrictModeCompat\", \"in\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"style\", \"timeout\", \"TransitionComponent\"]);\n\n  var theme = useTheme();\n  var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;\n  var nodeRef = React.useRef(null);\n  var foreignRef = useForkRef(children.ref, ref);\n  var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : undefined, foreignRef);\n\n  var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {\n    return function (nodeOrAppearing, maybeAppearing) {\n      if (callback) {\n        var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],\n            _ref2 = _slicedToArray(_ref, 2),\n            node = _ref2[0],\n            isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.\n\n\n        if (isAppearing === undefined) {\n          callback(node);\n        } else {\n          callback(node, isAppearing);\n        }\n      }\n    };\n  };\n\n  var handleEntering = normalizedTransitionCallback(onEntering);\n  var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {\n    reflow(node); // So the animation always start from the start.\n\n    var transitionProps = getTransitionProps({\n      style: style,\n      timeout: timeout\n    }, {\n      mode: 'enter'\n    });\n    node.style.webkitTransition = theme.transitions.create('transform', transitionProps);\n    node.style.transition = theme.transitions.create('transform', transitionProps);\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  });\n  var handleEntered = normalizedTransitionCallback(onEntered);\n  var handleExiting = normalizedTransitionCallback(onExiting);\n  var handleExit = normalizedTransitionCallback(function (node) {\n    var transitionProps = getTransitionProps({\n      style: style,\n      timeout: timeout\n    }, {\n      mode: 'exit'\n    });\n    node.style.webkitTransition = theme.transitions.create('transform', transitionProps);\n    node.style.transition = theme.transitions.create('transform', transitionProps);\n\n    if (onExit) {\n      onExit(node);\n    }\n  });\n  var handleExited = normalizedTransitionCallback(onExited);\n  return /*#__PURE__*/React.createElement(TransitionComponent, _extends({\n    appear: true,\n    in: inProp,\n    nodeRef: enableStrictModeCompat ? nodeRef : undefined,\n    onEnter: handleEnter,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExited: handleExited,\n    onExiting: handleExiting,\n    timeout: timeout\n  }, other), function (state, childProps) {\n    return /*#__PURE__*/React.cloneElement(children, _extends({\n      style: _extends({\n        transform: 'scale(0)',\n        visibility: state === 'exited' && !inProp ? 'hidden' : undefined\n      }, styles[state], style, children.props.style),\n      ref: handleRef\n    }, childProps));\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Zoom.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.element,\n\n  /**\n   * Enable this prop if you encounter 'Function components cannot be given refs',\n   * use `unstable_createStrictModeTheme`,\n   * and can't forward the ref in the child component.\n   */\n  disableStrictModeCompat: PropTypes.bool,\n\n  /**\n   * If `true`, the component will transition in.\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })])\n} : void 0;\nexport default Zoom;","import React from \"react\";\r\nimport {ListSubheader} from \"@material-ui/core\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentDialogsSidebarItem,\r\n    getDeletedMessages,\r\n    getDialogsIsLoading, getLoading, getSelectedDeletedMessages, getSelectedMessages,\r\n} from \"../../../redux/dialogs-selectors\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {deleteMessages, dialogsAC, restoreMessages, signMessageAsSpam} from \"../../../redux/dialogs-reducer\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport RestoreFromTrashIcon from '@material-ui/icons/RestoreFromTrash';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\n//import WarningIcon from '@material-ui/icons/Warning';\r\nimport {DialogsSidebarItemEnum} from \"../../../types/types\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\nconst CurrentDialogHeader: React.FC<PropsType> = ({currentDialog, userId}) => {\r\n    const classes = useStyles();\r\n    const selectedMessages = useSelector(getSelectedMessages);\r\n    const selectedDeletedMessages = useSelector(getSelectedDeletedMessages);\r\n    const dialogsIsLoading = useSelector(getDialogsIsLoading);\r\n    const loading = useSelector(getLoading);\r\n    const deletedMessages = useSelector(getDeletedMessages);\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n    const lang = useSelector(getLang);\r\n\r\n    const to = !loading && currentDialog ? `/users/${currentDialog.id}` : '#';\r\n    const deletedMessagesItem = userId && deletedMessages\r\n        .find(el => +el.dialog.id === +userId);\r\n    const currentDeletedDialog = deletedMessagesItem && deletedMessagesItem.dialog;\r\n\r\n    let src;\r\n    if (currentDialogsSidebarItem === DialogsSidebarItemEnum.all) {\r\n        src = currentDialog && currentDialog.photos.small ? currentDialog.photos.small : undefined\r\n    } else if (currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted) {\r\n        src = currentDeletedDialog && currentDeletedDialog.photos.small ? currentDeletedDialog.photos.small : undefined\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onCleanArrayHandler = () => {\r\n        if (currentDialogsSidebarItem === DialogsSidebarItemEnum.all) {\r\n            dispatch(dialogsAC.cleanSelectedMessages())\r\n        } else if (currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted) {\r\n            dispatch(dialogsAC.cleanSelectedDeletedMessages())\r\n        }\r\n    };\r\n\r\n    const onDeleteHandler = () => {\r\n        if (userId && currentDialog) {\r\n            dispatch(deleteMessages(selectedMessages, currentDialog));\r\n        }\r\n    };\r\n\r\n    const onSpamHandler = () => {\r\n        if (userId && currentDialog) {\r\n            dispatch(signMessageAsSpam(selectedMessages, currentDialog));\r\n        }\r\n    };\r\n\r\n    const onRestoreHandler = () => {\r\n        if (userId && currentDialog) {\r\n            dispatch(restoreMessages(selectedDeletedMessages));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.headerWrapper}>\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.all &&\r\n                <>\r\n                    {dialogsIsLoading\r\n                        ? <ListSubheader component=\"div\" className={classes.header}>\r\n                            <Skeleton variant=\"circle\" width={40} height={40} className={classes.avatar}/>\r\n                            <Skeleton variant=\"rect\" width={200} height={25}/>\r\n                        </ListSubheader>\r\n                        : <ListSubheader component=\"div\" className={classes.header}>\r\n                            {currentDialog\r\n                                ? <>\r\n                                    <Avatar src={src} className={classes.avatar}/>\r\n\r\n                                    <Link component={RouterLink}\r\n                                          className={classes.link}\r\n                                          to={to}\r\n                                          variant='subtitle2'>\r\n                                        {currentDialog.userName}\r\n                                    </Link>\r\n\r\n                                    {\r\n                                        selectedMessages.length !== 0 &&\r\n                                        <>\r\n                                            <div className={classes.messagesCount}>\r\n                                                <Typography variant='body2' color='textPrimary'>\r\n                                                    {selectedMessages.length} {translate(lang, 'messages')}\r\n                                                </Typography>\r\n                                                <IconButton onClick={onCleanArrayHandler}\r\n                                                            className={classes.iconClean}\r\n                                                            disabled={loading}\r\n                                                >\r\n                                                    <CloseIcon/>\r\n                                                </IconButton>\r\n                                            </div>\r\n\r\n                                            <div className={classes.iconButtonWrapper}>\r\n                                                <Tooltip title={translate(lang, \"Delete\")} TransitionComponent={Zoom} arrow={true}>\r\n                                                    <IconButton onClick={onDeleteHandler}\r\n                                                                className={classes.iconClean}\r\n                                                                disabled={loading}\r\n                                                    >\r\n                                                        <DeleteForeverIcon/>\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </div>\r\n\r\n                                            {/*<div>*/}\r\n                                            {/*    <Tooltip title=\"Spam\" TransitionComponent={Zoom} arrow={true}>*/}\r\n                                            {/*        <IconButton onClick={onSpamHandler}*/}\r\n                                            {/*                    className={classes.iconClean}*/}\r\n                                            {/*                    disabled={loading}*/}\r\n                                            {/*        >*/}\r\n                                            {/*            <WarningIcon/>*/}\r\n                                            {/*        </IconButton>*/}\r\n                                            {/*    </Tooltip>*/}\r\n                                            {/*</div>*/}\r\n\r\n                                        </>\r\n                                    }\r\n\r\n                                </>\r\n                                : <Typography variant='subtitle1' color='primary'>\r\n                                    {translate(lang, 'Select a dialog')}\r\n                                </Typography>\r\n                            }\r\n                        </ListSubheader>\r\n                    }\r\n                </>\r\n            }\r\n\r\n\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted &&\r\n                <ListSubheader component=\"div\" className={classes.header}>\r\n                    {\r\n                        userId && currentDeletedDialog\r\n                            ? <>\r\n                                <Avatar src={src} className={classes.avatar}/>\r\n\r\n                                <Link component={RouterLink}\r\n                                      className={classes.link}\r\n                                      to={to}\r\n                                      variant='subtitle2'>\r\n                                    {currentDeletedDialog.userName}\r\n                                </Link>\r\n\r\n                                {\r\n                                    selectedDeletedMessages.length !== 0 &&\r\n                                    <>\r\n                                        <div className={classes.messagesCount}>\r\n                                            <Typography variant='body2' color='textPrimary'>\r\n                                                {selectedDeletedMessages.length} {translate(lang, 'messages')}\r\n                                            </Typography>\r\n                                            <IconButton onClick={onCleanArrayHandler}\r\n                                                        className={classes.iconClean}\r\n                                                        disabled={loading}\r\n                                            >\r\n                                                <CloseIcon/>\r\n                                            </IconButton>\r\n                                        </div>\r\n\r\n                                        <div className={classes.iconButtonWrapper}>\r\n                                            <Tooltip title={translate(lang, \"Restore\")} TransitionComponent={Zoom} arrow={true}>\r\n                                                <IconButton onClick={onRestoreHandler}\r\n                                                            className={classes.iconClean}\r\n                                                            disabled={loading}\r\n                                                >\r\n                                                    <RestoreFromTrashIcon/>\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </div>\r\n\r\n                                    </>\r\n                                }\r\n\r\n                            </>\r\n                            : <Typography variant='subtitle1' color='primary'>\r\n                                {translate(lang, 'Select deleted dialog')}\r\n                            </Typography>\r\n                    }\r\n                </ListSubheader>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogHeader;\r\n\r\n//===================== TYPE =======================\r\ntype PropsType = {\r\n    currentDialog: DialogType | null\r\n    userId: number | undefined\r\n}\r\n\r\n//===================== STYLE ======================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n    },\r\n    headerWrapper: {\r\n        padding: 5,\r\n        borderBottom: '1px solid #ccc',\r\n        //backgroundColor: indigo[100]\r\n    },\r\n    link: {\r\n        marginRight: 15\r\n    },\r\n    messagesCount: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginRight: 30\r\n    },\r\n    iconClean: {\r\n        padding: 5\r\n    },\r\n    iconButtonWrapper: {\r\n        marginRight: 10\r\n    }\r\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      userSelect: 'none',\n      fontSize: theme.typography.pxToRem(24),\n      width: '1em',\n      height: '1em',\n      // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541\n      // To remove at some point.\n      overflow: 'hidden',\n      flexShrink: 0\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"action\"`. */\n    colorAction: {\n      color: theme.palette.action.active\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `color=\"disabled\"`. */\n    colorDisabled: {\n      color: theme.palette.action.disabled\n    },\n\n    /* Styles applied to the root element if `fontSize=\"inherit\"`. */\n    fontSizeInherit: {\n      fontSize: 'inherit'\n    },\n\n    /* Styles applied to the root element if `fontSize=\"small\"`. */\n    fontSizeSmall: {\n      fontSize: theme.typography.pxToRem(20)\n    },\n\n    /* Styles applied to the root element if `fontSize=\"large\"`. */\n    fontSizeLarge: {\n      fontSize: theme.typography.pxToRem(36)\n    }\n  };\n};\nvar Icon = /*#__PURE__*/React.forwardRef(function Icon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'inherit' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'span' : _props$component,\n      _props$fontSize = props.fontSize,\n      fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"fontSize\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx('material-icons', classes.root, className, color !== 'inherit' && classes[\"color\".concat(capitalize(color))], fontSize !== 'default' && classes[\"fontSize\".concat(capitalize(fontSize))]),\n    \"aria-hidden\": true,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Icon.propTypes = {\n  /**\n   * The name of the icon font ligature.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   */\n  fontSize: PropTypes.oneOf(['inherit', 'default', 'small', 'large'])\n} : void 0;\nIcon.muiName = 'Icon';\nexport default withStyles(styles, {\n  name: 'MuiIcon'\n})(Icon);","import {MessageType} from \"../../../DAL/dialogs-api\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getId} from \"../../../redux/auth-selectors\";\r\nimport {getProfileSelector} from \"../../../redux/profile-selectors\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {DATE} from \"../../../utilities/date\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport {dialogsAC} from \"../../../redux/dialogs-reducer\";\r\nimport {\r\n    getCurrentDialogsSidebarItem,\r\n    getMessagesIsDeleting, getSelectedDeletedMessages,\r\n    getSelectedMessages\r\n} from \"../../../redux/dialogs-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport {DialogsSidebarItemEnum} from \"../../../types/types\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\n\r\nconst CurrentDialogMessageItem: React.FC<PropsType> = ({message, src}) => {\r\n    const classes = useStyles();\r\n    const [hover, setHover] = useState(false);\r\n    const myId = useSelector(getId);\r\n    const profile = useSelector(getProfileSelector);\r\n    const selectedMessages = useSelector(getSelectedMessages);\r\n    const selectedDeletedMessages = useSelector(getSelectedDeletedMessages);\r\n    const messagesIsDeleting = useSelector(getMessagesIsDeleting);\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n    const lang = useSelector(getLang);\r\n\r\n    const dispatch = useDispatch();\r\n    let selected: boolean;\r\n    if (currentDialogsSidebarItem === DialogsSidebarItemEnum.all) {\r\n        selected = !!selectedMessages.find(el => el.id === message.id);\r\n    } else if (currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted) {\r\n        selected = !!selectedDeletedMessages.find(el => el.id === message.id);\r\n    } else {\r\n        selected = false\r\n    }\r\n\r\n    const onClickHandle = () => {\r\n        if (currentDialogsSidebarItem === DialogsSidebarItemEnum.all) {\r\n            if (!selected) {\r\n                dispatch(dialogsAC.addToSelectedMessages(message))\r\n            } else {\r\n                dispatch(dialogsAC.removeFromSelectedMessages(message))\r\n            }\r\n        } else if (currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted) {\r\n            if (!selected) {\r\n                dispatch(dialogsAC.addToSelectedDeletedMessages(message))\r\n            } else {\r\n                dispatch(dialogsAC.removeFromSelectedDeletedMessages(message))\r\n            }\r\n        }\r\n\r\n    };\r\n    const onMouseEnterHandler = () => {\r\n        setHover(true)\r\n    };\r\n    const onMouseLeaveHandler = () => {\r\n        setHover(false)\r\n    };\r\n\r\n    const srcFinally = (profile\r\n        ? (message.senderId === myId) ? profile.photos.small : src\r\n        : undefined) as string | undefined\r\n\r\n    const to = (message.senderId === myId) ? '/profile' : `/users/${message.senderId}`;\r\n\r\n    const icon = message.senderId === myId ? <ArrowForwardIcon/> : <ArrowBackIcon/>\r\n\r\n    return (\r\n        <div className={classes.listItemWrapper}>\r\n            <ListItem button\r\n                      onClick={onClickHandle}\r\n                      selected={selected}\r\n                      className={classes.listItem}\r\n                      classes={{\r\n                          selected: classes.selected\r\n                      }}\r\n                      onMouseEnter={onMouseEnterHandler}\r\n                      onMouseLeave={onMouseLeaveHandler}\r\n            >\r\n                {((hover && !selected) || selected) && <CheckCircleIcon className={classes.checkedIcon}\r\n                                                                        color={selected ? 'inherit' : 'disabled'}\r\n                                                                        fontSize='small'/>}\r\n                <Avatar src={srcFinally} className={classes.avatar}/>\r\n                <div className={classes.messageBlock}>\r\n                    <div className={classes.title}>\r\n                        <Link component={RouterLink}\r\n                              className={classes.link}\r\n                              to={to}\r\n                              variant='subtitle2'>\r\n                            {message.senderName}\r\n                        </Link>\r\n                        <Typography variant='subtitle2'\r\n                                    color='textSecondary'\r\n                        >\r\n                            {DATE.dateTranslateFromAPI(message.addedAt, lang)}\r\n                        </Typography>\r\n                    </div>\r\n                    <div>{message.body}</div>\r\n                </div>\r\n\r\n                <Icon className={classes.icon}>{icon}</Icon>\r\n\r\n            </ListItem>\r\n\r\n            {\r\n                messagesIsDeleting && selectedMessages.find(el => el.id === message.id) &&\r\n                <CircularPreloader size={50} styleType='absolute'/>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogMessageItem;\r\n\r\n//========================== TYPE ============================\r\ntype PropsType = {\r\n    message: MessageType\r\n    src: string | undefined\r\n}\r\n//========================= STYLES ===========================\r\nconst useStyles = makeStyles({\r\n    listItemWrapper: {\r\n        position: 'relative'\r\n    },\r\n    listItem: {\r\n        boxSizing: 'border-box',\r\n        margin: '2px 0px',\r\n        padding: 8,\r\n        paddingLeft: 40,\r\n        position: 'relative',\r\n        display: 'flex',\r\n        alignItems: 'flex-start'\r\n    },\r\n    checkedIcon: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: 5,\r\n        transform: 'translate(0, -50%)'\r\n    },\r\n    selected: {\r\n        backgroundColor: 'red'\r\n    },\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    title: {\r\n        display: 'flex'\r\n    },\r\n    link: {\r\n        marginRight: 10\r\n    },\r\n    messageBlock: {\r\n        flexGrow: 1\r\n    },\r\n    icon: {\r\n        marginRight: 10\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {MessageType} from \"../../../DAL/dialogs-api\";\r\nimport CurrentDialogMessageItem from \"./CurrentDialogMessageItem\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentDialogsSidebarItem, getDeletedMessages,\r\n    getMessageIsSending,\r\n    getMessagesIsDeleting,\r\n    getMessagesIsLoading\r\n} from \"../../../redux/dialogs-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport {dialogsAC} from \"../../../redux/dialogs-reducer\";\r\nimport {DialogsSidebarItemEnum} from \"../../../types/types\";\r\n\r\nconst CurrentDialogMessages: React.FC<PropsType> = ({messages, src, userId}) => {\r\n    const classes = useStyles();\r\n\r\n    const messagesIsLoading = useSelector(getMessagesIsLoading);\r\n    const messageIsSending = useSelector(getMessageIsSending);\r\n    const messagesIsDeleting = useSelector(getMessagesIsDeleting);\r\n    const deletedMessages = useSelector(getDeletedMessages);\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    // очистка массива выделенных сообщений при первой отрисове или при изменении диалога\r\n    useEffect(() => {\r\n        dispatch(dialogsAC.cleanSelectedMessages())\r\n    }, [userId]);\r\n\r\n    const elements = messages && messages\r\n        .map(el => <CurrentDialogMessageItem key={el.id} message={el} src={src}/>);\r\n\r\n    const deletedMessagesItem = !!userId && deletedMessages\r\n        .find(el => el.dialog.id === +userId)\r\n\r\n    const elementsDeleted = deletedMessagesItem && deletedMessagesItem\r\n        .messages\r\n        .map(el => <CurrentDialogMessageItem key={el.id} message={el} src={src}/>);\r\n\r\n    // 1\r\n    // сообщение удаляется - messagesIsDeleting\r\n    // показывать messages\r\n    // в удаляемых сообщениях поверх компонента показать CircularPreloader\r\n\r\n    // 2\r\n    // сообщение добавляется - messageIsSending\r\n    // messages есть или нет (если первое сообщение)\r\n    // messages есть - показывать messages, messages нет - ничего не показывать\r\n\r\n    // 3\r\n    // все сообщения загружаются или перегружаются (при переключении юзера) - messagesIsLoading\r\n    // загружаются - messages нет, перегружаются - messages есть\r\n    // вместо сообщений показывать CircularPreloader\r\n\r\n    // 4\r\n    // остальные случаи, когда ничего не загружается - !messagesIsLoading && !messageIsSending && !messagesIsDeleting\r\n    // messages есть (все загрузилось, удалилось, отправилось) или нет (диалог не выбран)\r\n    // messages есть - показывать messages, messages нет - ничего не показывать\r\n\r\n    // во время загрузки, отправки и удаления блокировать форму добавления сообщений и боковую панель\r\n\r\n    return (\r\n        <>\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.all &&\r\n                <>\r\n                    {\r\n                        messagesIsDeleting &&\r\n                        <>\r\n                            {elements}\r\n                        </>\r\n                    }\r\n\r\n                    {\r\n                        messageIsSending &&\r\n                        <>\r\n                            {\r\n                                messages\r\n                                    ? <>\r\n                                        {elements}\r\n                                    </>\r\n                                    : null\r\n                            }\r\n                        </>\r\n                    }\r\n\r\n                    {\r\n                        messagesIsLoading &&\r\n                        <div className={classes.circularPreloaderWrapper}>\r\n                            <CircularPreloader size={36}/>\r\n                        </div>\r\n                    }\r\n\r\n                    {\r\n                        !messagesIsLoading && !messageIsSending && !messagesIsDeleting &&\r\n                        <>\r\n                            {\r\n                                messages\r\n                                    ? <>\r\n                                        {elements}\r\n                                    </>\r\n                                    : null\r\n                            }\r\n                        </>\r\n                    }\r\n\r\n                </>\r\n            }\r\n\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted &&\r\n                deletedMessagesItem &&\r\n                <>\r\n                    {elementsDeleted}\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogMessages;\r\n\r\n//==================== TYPES ==================\r\ntype PropsType = {\r\n    messages: Array<MessageType> | null\r\n    src: string | undefined\r\n    userId: number | undefined\r\n}\r\n\r\n//========================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    circularPreloaderWrapper: {\r\n        margin: '10px 0'\r\n    },\r\n    emptyMessages: {\r\n        padding: '8px 16px'\r\n    }\r\n});","import SendIcon from '@material-ui/icons/Send';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextAreaField from \"../../common/RenderTextareaField\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {reduxForm, Field, InjectedFormProps, reset} from \"redux-form\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport {sendMessage} from \"../../../redux/dialogs-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getLoading,\r\n    getMessageIsSending,\r\n} from \"../../../redux/dialogs-selectors\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, loading, messageIsSending} = props;\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    const lang = useSelector(getLang);\r\n    const label = messageIsSending\r\n        ? translate(lang, 'Message is sent...')\r\n        : translate(lang, 'Enter your message')\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={classes.form}>\r\n            <div className={classes.fieldWrapper}>\r\n                <Field name='message'\r\n                       component={RenderTextAreaField}\r\n                       validate={[shouldNotBeEmpty]}\r\n                       autoFocus={true}\r\n                       rows={1}\r\n                       className={classes.textArea}\r\n                       classes={classesField}\r\n                       label={label}\r\n                       placeholder={translate(lang, 'Enter your message')}\r\n                       size='small'\r\n                />\r\n            </div>\r\n\r\n            <IconButton\r\n                type=\"submit\"\r\n                color='primary'\r\n                disabled={submitting || pristine || loading}\r\n            >\r\n                <SendIcon/>\r\n            </IconButton>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n    dispatch(reset('send-message-from-dialog'));\r\n}\r\n\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'send-message-from-dialog',\r\n    onSubmitSuccess: afterSubmit\r\n})(Form);\r\n\r\n//============================= COMPONENT =========================================\r\nconst CurrentDialogForm: React.FC<ComponentPropsType> = ({id}) => {\r\n    const classes = useStyles();\r\n    const messageIsSending = useSelector(getMessageIsSending);\r\n    const loading = useSelector(getLoading);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        if (id) {\r\n            dispatch(sendMessage(id, formValue.message))\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.formWrapper}>\r\n            <ReduxForm onSubmit={onSubmit}\r\n                       messageIsSending={messageIsSending}\r\n                       loading={loading}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogForm;\r\n\r\n//=============================== TYPES ================================================\r\ntype OwnPropsType = {\r\n    loading: boolean\r\n    messageIsSending: boolean\r\n}\r\nexport type FormValuesType = {\r\n    message: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {\r\n    id: number | undefined\r\n}\r\n\r\n//========================== STYLES ===================================================\r\nconst useStylesField = makeStyles({\r\n    root: {\r\n        backgroundColor: 'white',\r\n        width: '100%'\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n    formWrapper: {\r\n        backgroundColor: grey[100],\r\n        padding: 10,\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    fieldWrapper: {\r\n        flexGrow: 1,\r\n        marginRight: 5\r\n    },\r\n    textArea: {\r\n        width: '100%',\r\n\r\n    }\r\n})","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, Typography} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getCurrentDialogsSidebarItem, getDeletedMessages, getMessagesSelector} from \"../../../redux/dialogs-selectors\";\r\nimport List from \"@material-ui/core/List\";\r\nimport CurrentDialogHeader from \"./CurrentDialogHeader\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport CurrentDialogMessages from \"./CurrentDialogMessages\";\r\nimport CurrentDialogForm from \"./CurrentDialogForm\";\r\nimport {DialogsSidebarItemEnum} from \"../../../types/types\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\nconst CurrentDialog: React.FC<PropsType> = ({currentDialog, userId}) => {\r\n    const classes = useStyles();\r\n    const messages = useSelector(getMessagesSelector);\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n    const deletedMessages = useSelector(getDeletedMessages);\r\n    const lang = useSelector(getLang);\r\n\r\n    const src = (currentDialog !== null ? currentDialog.photos.small : undefined) as string | undefined;\r\n\r\n    return (\r\n        <Card elevation={6}>\r\n            { currentDialogsSidebarItem === DialogsSidebarItemEnum.all ||\r\n            currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted && deletedMessages.length\r\n                ? <List disablePadding\r\n                      subheader={\r\n                          <CurrentDialogHeader currentDialog={currentDialog}\r\n                                               userId={userId}\r\n                          />\r\n                      }\r\n                >\r\n                    <CurrentDialogMessages messages={messages} src={src} userId={userId}/>\r\n                </List>\r\n                : <div className={classes.emptyMessages}>\r\n                    <Typography variant='subtitle1' color='primary'>\r\n                        {translate(lang, 'There ara no deleted messages')}\r\n                    </Typography>\r\n\r\n                </div>\r\n            }\r\n\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.all && userId &&\r\n                <CurrentDialogForm id={userId}/>\r\n            }\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default CurrentDialog;\r\n\r\n//========================= TYPE =================\r\ntype PropsType = {\r\n    currentDialog: DialogType | null\r\n    userId: number | undefined\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    btnWrapper: {\r\n        marginBottom: 10\r\n    },\r\n    skeleton: {\r\n        borderRadius: 4\r\n    },\r\n    emptyMessages: {\r\n        padding: '8px 16px'\r\n    }\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentDialogsSidebarItem, getLoading} from \"../../../redux/dialogs-selectors\";\r\nimport {dialogsAC} from \"../../../redux/dialogs-reducer\";\r\n//import WarningIcon from '@material-ui/icons/Warning';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n\r\nconst DialogsSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n    const loading = useSelector(getLoading);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandle = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(dialogsAC.setCurrentDialogsSidebarItem(newValue));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Tabs\r\n                classes={{\r\n                    indicator: classes.indicator\r\n                }}\r\n                orientation=\"vertical\"\r\n                value={currentDialogsSidebarItem}\r\n                onChange={onChangeHandle}\r\n                className={classes.tabs}\r\n            >\r\n\r\n                <Tab label={translate(lang, \"All\")}\r\n                     component={RouterLink}\r\n                     to='/dialogs'\r\n                     disabled={loading}\r\n                     icon={<ChatIcon className={classes.icon}/>}\r\n                     classes={{\r\n                         wrapper: classes.wrapper,\r\n                         selected: classes.selected,\r\n                         root: classes.tabRoot,\r\n                         labelIcon: classes.labelIcon\r\n                     }}/>\r\n\r\n                <Tab label={translate(lang, \"Deleted\")}\r\n                     component={RouterLink}\r\n                     to='/dialogs'\r\n                     disabled={loading}\r\n                     icon={<DeleteForeverIcon className={classes.icon}/>}\r\n                     classes={{\r\n                         wrapper: classes.wrapper,\r\n                         selected: classes.selected,\r\n                         root: classes.tabRoot,\r\n                         labelIcon: classes.labelIcon\r\n                     }}/>\r\n\r\n                {/*<Tab label=\"Spam\"*/}\r\n                {/*     component={RouterLink}*/}\r\n                {/*     to='/dialogs'*/}\r\n                {/*     disabled={loading}*/}\r\n                {/*     icon={<WarningIcon className={classes.icon}/>}*/}\r\n                {/*     classes={{*/}\r\n                {/*         wrapper: classes.wrapper,*/}\r\n                {/*         selected: classes.selected,*/}\r\n                {/*         root: classes.tabRoot,*/}\r\n                {/*         labelIcon: classes.labelIcon*/}\r\n                {/*     }}/>*/}\r\n\r\n            </Tabs>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default DialogsSidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid #ccc`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none',\r\n        '& > *:first-child': {\r\n            marginBottom: '0!important'\r\n        }\r\n    },\r\n    icon: {\r\n        margin: '0 10px',\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0,\r\n        minWidth: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport DialogsList from \"./DialogsList\";\r\nimport CurrentDialog from \"./CurrentDialog\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsLoading} from \"../../../redux/app-selectors\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport {dialogsAC, getDialogs, getMessages} from \"../../../redux/dialogs-reducer\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport DialogsSidebar from \"./DialogsSidebar\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {UseParamsType} from \"../../../types/types\";\r\n\r\nconst Dialogs: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const isLoading = useSelector(getIsLoading);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n\r\n    // если userId === undefined, значит диалог не выбран\r\n    let {userId} = useParams<UseParamsType>();\r\n    const userIdNumber: number | undefined = userId ? +userId : undefined;\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs())\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (userIdNumber) {\r\n            dispatch(getMessages(userIdNumber));\r\n        }\r\n        return () => {\r\n            dispatch(dialogsAC.setMessages(null))\r\n        }\r\n    }, [userIdNumber]);\r\n\r\n    const currentDialog = (dialogs && userIdNumber) ? dialogs.find(el => el.id === userIdNumber) as DialogType : null;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (!isLoading || dialogs) &&\r\n                <div className={classes.root}>\r\n\r\n                    <div className={classes.firstColumn}>\r\n                        <DialogsList dialogs={dialogs}/>\r\n                    </div>\r\n\r\n                    <div className={classes.secondColumn}>\r\n                        <CurrentDialog currentDialog={currentDialog}\r\n                                       userId={userIdNumber}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={classes.lastColumn}>\r\n                        <DialogsSidebar/>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withAuthRedirect(Dialogs);\r\n\r\n//========================== STYLES =============================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\"\r\n    },\r\n    firstColumn: {\r\n        flexBasis: 230,\r\n        flexShrink: 0,\r\n        marginRight: 10,\r\n    },\r\n    secondColumn: {\r\n        flexGrow: 1,\r\n        marginRight: 10,\r\n    },\r\n    lastColumn: {\r\n        flexBasis: 140,\r\n        flexShrink: 0,\r\n    },\r\n});"],"sourceRoot":""}