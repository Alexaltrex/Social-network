{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialog","props","id","name","path","className","s","dialog","activeClassName","activeLink","to","Message","text","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","maxLength100","Textarea","Dialogs","dialogs","messages","addMessage","dialogsElements","map","dialogsItems","messagesElements","formData","newMessageText","dialogsAC","DialogsContainer","compose","connect","state","dialogsPage","isAuth","auth","withAuthRedirect"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,0BAA0B,QAAU,2B,sFCkB5MC,EAVoB,SAACC,GAAW,IACpCC,EAAYD,EAAZC,GAAIC,EAAQF,EAARE,KACPC,EAAO,YAAcF,EACzB,OACI,yBAAKG,UAAWC,IAAEC,QACd,kBAAC,IAAD,CAASC,gBAAiBF,IAAEG,WAAYC,GAAIN,GAAOD,KCAhDQ,EAPqB,SAACV,GAAW,IACrCW,EAAQX,EAARW,KACP,OACI,yBAAKP,UAAWC,IAAEC,QAASK,I,yBCsD7BC,EAAsBC,YAAoD,CAC5EC,KAAM,UADkBD,EAbuF,SAACb,GAChH,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACKC,YAAgC,qBAAsB,iBAAkB,CAACC,IAAUC,KAAeC,MAEvG,6BACI,iDAUDC,EAnDsB,SAACrB,GAAW,IACtCsB,EAAiCtB,EAAjCsB,QAASC,EAAwBvB,EAAxBuB,SAAUC,EAAcxB,EAAdwB,WACtBC,EAAkBH,EAAQI,KAAI,SAAAC,GAAY,OAC1C,kBAAC,EAAD,CAAQzB,KAAMyB,EAAazB,KAAMD,GAAI0B,EAAa1B,QAElD2B,EAAmBL,EAASG,KAAI,SAAAH,GAAQ,OACxC,kBAAC,EAAD,CAASZ,KAAMY,EAASZ,UAO5B,OACI,6BACI,yBAAKP,UAAWC,IAAEiB,SACd,yBAAKlB,UAAWC,IAAEsB,cACbF,GAEL,yBAAKrB,UAAWC,IAAEkB,UACbK,IAGT,kBAAChB,EAAD,CAAqBG,SAdV,SAACc,GAChBL,EAAWK,EAASC,qB,iCCCtBN,EAAaO,IAAUP,WAEvBQ,EAAmBC,kBAA6BC,aAVhC,SAACC,GACnB,MAAO,CACHb,QAASa,EAAMC,YAAYd,QAC3BC,SAAUY,EAAMC,YAAYb,SAC5Bc,OAAQF,EAAMG,KAAKD,UASa,CAACb,eACrCe,IAJqBN,CAIHZ,GAEPW","file":"static/js/4.f5a5b636.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2PQU-\",\"dialogsItems\":\"Dialogs_dialogsItems__2Wshj\",\"dialog\":\"Dialogs_dialog__2DzhY\",\"activeLink\":\"Dialogs_activeLink__2JjTQ\",\"messages\":\"Dialogs_messages__2YGDZ\",\"message\":\"Dialogs_message__O5iMZ\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst Dialog:React.FC<PropsType> = (props) => {\r\n    const {id, name} = props;\r\n    let path = \"/dialogs/\" + id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink activeClassName={s.activeLink} to={path}>{name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    text: string\r\n}\r\n\r\nconst Message:React.FC<PropsType> = (props) => {\r\n    const {text} = props;\r\n    return (\r\n        <div className={s.dialog}>{text}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, Textarea} from \"../common/FormsControls/FormControls\";\r\nimport {maxLength100, required} from \"../../utilities/validators/validators\";\r\nimport {DialogType, MessageType} from \"../../types/types\";\r\nimport {LoginFormValuesType} from \"../Login/Login\";\r\n\r\ntype PropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    const {dialogs, messages, addMessage} = props\r\n    let dialogsElements = dialogs.map(dialogsItems =>\r\n        <Dialog name={dialogsItems.name} id={dialogsItems.id}/>);\r\n\r\n    let messagesElements = messages.map(messages =>\r\n        <Message text={messages.text}/>\r\n    );\r\n\r\n    let onAddMessage = (formData: { newMessageText: string }) => {\r\n        addMessage(formData.newMessageText);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={onAddMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport type DialogFormValuesType = {\r\n    newMessageText: string\r\n}\r\ntype DialogFormKeysType = Extract<keyof DialogFormValuesType, string>;\r\ntype DialogFormOwnProps = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<DialogFormValuesType, DialogFormOwnProps> & DialogFormOwnProps> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<DialogFormKeysType>('enter your message', \"newMessageText\", [required, maxLength100], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Add Talk</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm<DialogFormValuesType, DialogFormOwnProps>({\r\n    form: 'dialog'\r\n})(AddMessageForm);\r\n\r\nexport default Dialogs;","import Dialogs from \"./Dialogs\";\r\nimport {dialogsAC} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {DialogType, MessageType} from \"../../types/types\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nconst addMessage = dialogsAC.addMessage;\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n            MapDispatchPropsType,\r\n            OwnPropsType,\r\n            StateType>(mapStateToProps, {addMessage}),\r\n    withAuthRedirect)(Dialogs);\r\n\r\nexport default DialogsContainer;"],"sourceRoot":""}