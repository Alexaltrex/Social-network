{"version":3,"sources":["Components/Main/Profile/ProfileAvatar.tsx","Components/Main/Profile/ProfileStatusForm.tsx","Components/common/LinearPreloader.tsx","Components/Main/Profile/ProfileStatus.tsx","Components/common/BlockTitle.tsx","Components/common/BlockField.tsx","Components/Main/Profile/ProfileInfo.tsx","Components/common/RenderTextareaField.tsx","Components/Main/Profile/ProfileInfoForm.tsx","Components/Main/Profile/ProfileInfoFormSidebar.tsx","Components/Main/Profile/ProfileFriendsItem.tsx","Components/Main/Profile/ProfileFriends.tsx","Components/common/RenderNakedTextareaField.tsx","Components/Main/Profile/MyPosts.tsx","Components/Main/Profile/MyPost.tsx","Components/Main/Profile/Profile.tsx"],"names":["ProfileAvatar","props","isOwner","userId","profile","followed","classes","useStyles","useState","onAvatarHover","setOnAvatarHover","avatarIsLoading","useSelector","getAvatarIsLoading","isFollowing","getIsFollowing","editMode","getEditMode","followingInProgress","getFollowingInProgress","dispatch","useDispatch","useEffect","onMouseAvatarEnter","onMouseAvatarLeave","buttonLabel","startIcon","Card","className","card","elevation","CardMedia","avatarWrapper","circular","CircularProgress","size","color","Avatar","avatar","onMouseEnter","onMouseLeave","src","photos","large","undefined","variant","Fade","in","timeout","Tooltip","title","placement","avatarButtonUpperPanel","IconButton","disableFocusRipple","disableRipple","onClick","profileAC","setPhotos","small","aria-label","avatarIconDelete","avatarBottomPanel","accept","onChange","e","target","files","length","savePhoto","input","id","multiple","type","htmlFor","buttonIcon","component","buttonIconInner","Typography","CardActions","cardActions","Button","setEditMode","disableElevation","disabled","fullWidth","button","buttonWrapper","some","item","getUnfollow","setFollowed","getFollow","CircularPreloader","style","makeStyles","width","height","marginBottom","padding","paddingBottom","position","overflow","top","right","zIndex","backgroundColor","borderRadius","bottom","left","changePhotoButton","paddingLeft","marginRight","display","justifyContent","alignItems","textTransform","ReduxStatusForm","reduxForm","form","handleSubmit","onClose","submitting","pristine","reset","error","classesField","useStylesField","onSubmit","Field","field","autoFocus","name","validate","maxLength30","RenderTextField","normalize","value","empty","root","ProfileStatusForm","open","anchorEl","statusFromState","getStatusSelector","initialValues","status","Popover","anchorOrigin","vertical","horizontal","transformOrigin","paper","formValue","console","log","updateStatus","border","marginTop","fontSize","marginDense","paddingTop","LinearPreloader","LinearProgress","theme","createStyles","ProfileStatus","getStatus","setAnchorEl","statusIsLoading","getStatusIsLoading","Boolean","ListItem","aria-describedby","event","currentTarget","listItem","gutters","BlockTitle","block","Divider","divider","transform","paddingRight","BlockField","rightType","Link","href","flexBasis","flexGrow","ProfileInfo","showDetailedInfo","setShowDetailedInfo","showDetailedInfoTitle","lookingForAJob","contactsElements","Object","keys","contacts","map","key","CardContent","cardContent","h6","fullName","showDetailInfo","align","Collapse","unmountOnExit","lookingForAJobDescription","lineHeight","RenderTextAreaField","icon","label","placeholder","meta","touched","invalid","custom","styles","iconLeft","TextField","InputProps","multiline","rows","helperText","ReduxForm","currentInfoFormSidebarItem","getCurrentInfoFormSidebarItem","FieldContactsIconArray","FieldContactsElements","el","i","fieldWrapper","shouldNotBeEmpty","clsx","hide","required","RenderCheckbox","iconField","ProfileInfoForm","getProfileSelector","values","saveProfile","marginLeft","ProfileInfoFormSidebar","Tabs","indicator","orientation","newValue","setCurrentInfoFormSidebarItem","tabs","Tab","wrapper","selected","tabRoot","labelIcon","borderLeft","palette","flexDirection","indigo","minHeight","ProfileFriendsItem","friend","indexBeforeWhiteSpace","search","shortName","slice","Grid","xs","RouterLink","to","sidebarAC","setCurrentSidebarItem","ProfileFriends","friends","totalFriendsCount","FriendsElements","link","Badge","badgeContent","max","showZero","container","alignContent","justify","wrap","spacing","RenderNakedTextAreaField","InputBase","onSubmitSuccess","result","setEditingPost","onBlur","useStylesTextArea","textArea","MyPosts","editingPost","getEditingPost","formWrapper","addPost","newPostText","submit","MyPost","post","React","setOpen","anchorRef","useRef","handleClose","current","contains","handleListKeyDown","preventDefault","prevOpen","focus","header","headerInfo","time","ref","aria-controls","aria-haspopup","Popper","role","transition","disablePortal","TransitionProps","Grow","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","message","popper","withAuthRedirect","authorizedUserId","getId","isLoading","getIsLoading","currentPage","getCurrentPage","pageSize","getPageSize","getFriendsSelector","getTotalFriendsCount","getFollowedSelector","posts","getPosts","useParams","profileSelector","getCurrentUserProfileSelector","getProfile","getFriends","getCurrentUserProfile","getFollowed","MyPostsItemElements","firstColumn","middleColumn","lastColumn"],"mappings":"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","file":"static/js/5.117e6ae7.chunk.js","sourcesContent":["import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowed, getProfile, profileAC, savePhoto} from \"../../../redux/profile-reducer\";\r\nimport {\r\n    getAvatarIsLoading, getCurrentUserProfileSelector,\r\n    getEditMode,\r\n    getFollowedSelector,\r\n    getProfileSelector\r\n} from \"../../../redux/profile-selectors\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CircularProgress} from \"@material-ui/core\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\n\r\nconst ProfileAvatar: React.FC<PropsType> = (props) => {\r\n    const {isOwner, userId, profile, followed} = props;\r\n    const classes = useStyles();\r\n    const [onAvatarHover, setOnAvatarHover] = useState(false);\r\n    const avatarIsLoading = useSelector(getAvatarIsLoading);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const editMode = useSelector(getEditMode);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!isOwner) {\r\n            //dispatch(getFollowed(userId));\r\n        }\r\n    }, [userId]);\r\n\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            if (e.target.files.length) {\r\n                dispatch(savePhoto(e.target.files[0]));\r\n            }\r\n        }\r\n    };\r\n\r\n    const onAvatarDelete = () => {\r\n        dispatch(profileAC.setPhotos({small: null, large: null}));\r\n    };\r\n\r\n    const onMouseAvatarEnter = () => {\r\n        setOnAvatarHover(true)\r\n    };\r\n\r\n    const onMouseAvatarLeave = () => {\r\n        setOnAvatarHover(false)\r\n    };\r\n\r\n    const onEditProfileClick = () => {\r\n        dispatch(profileAC.setEditMode(true));\r\n    };\r\n\r\n    const onFollowUnfollowClick = () => {\r\n        if (followed) {\r\n            dispatch(getUnfollow(userId));\r\n            dispatch(profileAC.setFollowed(false));\r\n        } else {\r\n            dispatch(getFollow(userId));\r\n            dispatch(profileAC.setFollowed(true));\r\n        }\r\n    };\r\n    const buttonLabel = followed ? 'unfollow' : 'follow';\r\n    const startIcon = followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n\r\n    return (\r\n        <>\r\n            {profile &&\r\n            <Card className={classes.card} elevation={6}>\r\n                <CardMedia>\r\n                    <div className={classes.avatarWrapper}>\r\n                        {!avatarIsLoading\r\n                            ? <Avatar className={classes.avatar}\r\n                                      onMouseEnter={onMouseAvatarEnter}\r\n                                      onMouseLeave={onMouseAvatarLeave}\r\n                                      src={profile.photos.large ? profile.photos.large : undefined}\r\n                                      variant=\"rounded\"/>\r\n                            : <div className={classes.circular}>\r\n                                <CircularProgress size={100} color={'secondary'}/>\r\n                            </div>\r\n                        }\r\n                        {isOwner && profile.photos &&\r\n                        <Fade in={onAvatarHover} timeout={100}>\r\n                            <Tooltip title=\"Delete avatar\" placement=\"bottom-start\">\r\n                                <div className={classes.avatarButtonUpperPanel}>\r\n                                    <IconButton disableFocusRipple={true}\r\n                                                disableRipple={true}\r\n                                                onMouseEnter={onMouseAvatarEnter}\r\n                                                onMouseLeave={onMouseAvatarLeave}\r\n                                                onClick={onAvatarDelete}\r\n                                                size='small'\r\n                                                aria-label=\"delete avatar\">\r\n                                        <HighlightOffIcon className={classes.avatarIconDelete}/>\r\n                                    </IconButton>\r\n                                </div>\r\n                            </Tooltip>\r\n                        </Fade>}\r\n\r\n                        {isOwner && <Fade in={onAvatarHover} timeout={100}>\r\n                            <div className={classes.avatarBottomPanel}\r\n                                 onMouseEnter={onMouseAvatarEnter}\r\n                                 onMouseLeave={onMouseAvatarLeave}>\r\n                                <input\r\n                                    accept=\"image/*\"\r\n                                    onChange={onPhotoSelected}\r\n                                    className={classes.input}\r\n                                    id=\"12345\"\r\n                                    multiple\r\n                                    type=\"file\"\r\n                                />\r\n                                <label htmlFor=\"12345\">\r\n                                    <IconButton className={classes.buttonIcon}\r\n                                                size='small'\r\n                                                aria-label=\"upload picture\"\r\n                                                component=\"span\">\r\n                                        <PhotoCamera className={classes.buttonIconInner}/>\r\n                                        <Typography variant='body2'>\r\n                                            Change photo\r\n                                        </Typography>\r\n                                    </IconButton>\r\n                                </label>\r\n                            </div>\r\n                        </Fade>}\r\n\r\n                    </div>\r\n                </CardMedia>\r\n\r\n\r\n                <CardActions className={classes.cardActions}>\r\n                    {isOwner\r\n                        ? <Button variant='outlined'\r\n                                  color=\"primary\"\r\n                                  onClick={onEditProfileClick}\r\n                                  disableElevation\r\n                                  disabled={editMode}\r\n                                  size='small'\r\n                                  fullWidth={true}\r\n                                  className={classes.button}>\r\n                            Edit profile\r\n                        </Button>\r\n                        : <>\r\n                            {followed !== null &&\r\n                            <div className={classes.buttonWrapper}>\r\n                                <Button\r\n                                    className={classes.button}\r\n                                    variant='outlined'\r\n                                    color=\"primary\"\r\n                                    size='small'\r\n                                    fullWidth\r\n                                    disabled={followingInProgress.some(item => item === userId)}\r\n                                    onClick={onFollowUnfollowClick}\r\n                                    startIcon={startIcon}\r\n                                >\r\n                                    {buttonLabel}\r\n                                </Button>\r\n                                {\r\n                                    isFollowing\r\n                                    && followingInProgress.some(item => item === userId)\r\n                                    &&\r\n                                    <CircularPreloader size={20} style={'absolute'}/>\r\n                                }\r\n                            </div>\r\n\r\n                            }\r\n                        </>\r\n\r\n                    }\r\n                </CardActions>\r\n\r\n\r\n            </Card>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ProfileAvatar;\r\n\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    userId: number\r\n    profile: ProfileType\r\n    followed: boolean | null\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 200,\r\n        height: 200,\r\n        marginBottom: 15\r\n    },\r\n    card: {\r\n        padding: 15,\r\n        paddingBottom: 10,\r\n        marginBottom: 15\r\n    },\r\n    avatarWrapper: {\r\n        position: 'relative',\r\n        overflow: 'hidden'\r\n    },\r\n    avatarButtonUpperPanel: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n        zIndex: 10,\r\n        backgroundColor: 'rgba(0,0,0,0.3)',\r\n        borderRadius: '0 4px 0 4px'\r\n    },\r\n    avatarBottomPanel: {\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        backgroundColor: 'rgba(0,0,0,0.3)',\r\n        borderRadius: '0 0 4px 4px'\r\n    },\r\n    changePhotoButton: {\r\n        color: 'white',\r\n    },\r\n    buttonIcon: {\r\n        color: 'white',\r\n        paddingLeft: 10,\r\n        marginRight: 10\r\n    },\r\n    buttonIconInner: {\r\n        marginRight: 10\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    },\r\n    avatarIconDelete: {\r\n        color: 'white'\r\n    },\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: 200,\r\n        height: 200,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        //marginTop: 15,\r\n        marginBottom: 5\r\n    },\r\n    cardActions: {\r\n        padding: 0\r\n    }\r\n});\r\n\r\n\r\n\r\n","import Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {updateStatus} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {empty, maxLength30} from \"../../../utilities/validators/validators\";\r\nimport {getStatusSelector} from \"../../../redux/profile-selectors\";\r\n\r\n//=================================== FORM ==========================================================================================\r\nconst Form: React.FC<InjectedFormProps<StatusFormValuesType, StatusFormOwnPropsType> & StatusFormOwnPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, reset, error, onClose} = props\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n\r\n    const normalize = (value: any) => {\r\n        if (empty(value)) {\r\n            return ''\r\n        } else return value\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={classes.form}>\r\n            <div>\r\n                <Field className={classes.field}\r\n                       classes={classesField}\r\n                       autoFocus={true}\r\n                       name='status'\r\n                       validate={[maxLength30]}\r\n                       component={RenderTextField}\r\n                       size='small'\r\n                       normalize={normalize}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button classes={{\r\n                    root: classes.button\r\n                }}\r\n                        color='primary'\r\n                        size='small'\r\n                        type=\"submit\"\r\n                        onClick={onClose}\r\n                        variant=\"outlined\">\r\n                    Save status\r\n                </Button>\r\n            </div>\r\n        </form>)\r\n};\r\n\r\n//===================================== REDUX-FORM===============================================================\r\nconst ReduxStatusForm = reduxForm<StatusFormValuesType, StatusFormOwnPropsType>({\r\n    form: 'status',\r\n})(Form);\r\n\r\n\r\n//====================================== COMPONENT =====================================================================\r\nconst ProfileStatusForm = (props: PropsType) => {\r\n    const {id, open, anchorEl, onClose} = props\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: StatusFormValuesType) => {\r\n        console.log(formValue);\r\n        dispatch(updateStatus(formValue.status));\r\n    };\r\n\r\n    const statusFromState = useSelector(getStatusSelector);\r\n    const status = statusFromState ? statusFromState : ''\r\n\r\n    const initialValues = {\r\n        status: status\r\n    };\r\n\r\n    return (\r\n        <Popover\r\n            id={id}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={onClose}\r\n\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'left',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'left',\r\n            }}\r\n            classes={{\r\n                paper: classes.paper,\r\n            }}\r\n        >\r\n            <ReduxStatusForm onSubmit={onSubmit}\r\n                             initialValues={initialValues}\r\n                             onClose={onClose}/>\r\n        </Popover>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusForm\r\n\r\n//=================================TYPES===================================================\r\ntype initialValuesType = {\r\n    status: string\r\n}\r\n\r\ntype PropsType = {\r\n    id: string | undefined\r\n    open: boolean\r\n    anchorEl: HTMLButtonElement | null\r\n    onClose: () => void\r\n\r\n}\r\ntype StatusFormValuesType = {\r\n    status: string\r\n}\r\ntype StatusFormOwnPropsType = {\r\n    onClose: () => void\r\n    initialValues: initialValuesType\r\n}\r\n\r\n//======================== STYLE =================================================================\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        right: 36,\r\n        border: '1px solid #ccc'\r\n    },\r\n    button: {\r\n        marginTop: 10,\r\n    },\r\n    form: {\r\n        padding: 5,\r\n        //backgroundColor: indigo[50],\r\n    },\r\n    field: {\r\n        width: '100%',\r\n        backgroundColor: 'white'\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles({\r\n        root: {\r\n            fontSize: '0.875rem',\r\n            padding: 0\r\n        },\r\n        input: {\r\n            padding: 0\r\n        },\r\n        marginDense: {\r\n            paddingTop: 4,\r\n            paddingBottom: 4,\r\n            paddingLeft: 6,\r\n            borderRadius: 0,\r\n            border: '1px solid #ccc'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n","import {Theme} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {createStyles} from \"@material-ui/styles\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nconst LinearPreloader: React.FC = (props: any) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgress color={'secondary'}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LinearPreloader;\r\n\r\n//============================= STYLES ===============================\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            paddingTop: 12,\r\n            paddingBottom: 12\r\n            // '& > * + *': {\r\n            //     marginTop: theme.spacing(2),\r\n            // },\r\n        },\r\n    }),\r\n);\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {getStatusIsLoading, getStatusSelector} from \"../../../redux/profile-selectors\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ProfileStatusForm from \"./ProfileStatusForm\";\r\nimport LinearPreloader from \"../../common/LinearPreloader\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {getStatus} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst ProfileStatus: React.FC<PropsType> = ({isOwner, userId}) => {\r\n    const classes = useStyles();\r\n    const status = useSelector(getStatusSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getStatus(userId));\r\n    }, [userId]);\r\n\r\n    //=========================\r\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\r\n    const statusIsLoading = useSelector(getStatusIsLoading);\r\n    const handleClick = (event: any) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popover' : undefined;\r\n    //==============================\r\n\r\n    return (\r\n        <div>\r\n\r\n            {isOwner //если свой профиль - кнопка с текстом статуса и вплывающая форма замены статуса\r\n                ? !statusIsLoading && status !== null\r\n                    ? <div>\r\n                        <ListItem button\r\n                                  aria-describedby={id}\r\n                                  onClick={handleClick}\r\n                                  classes={{\r\n                                      root: classes.listItem,\r\n                                      gutters: classes.gutters\r\n                                  }}\r\n                        >\r\n                            {status !== '' ?\r\n                                <Typography variant='body2'>{status}</Typography>\r\n                                : <Typography variant='body2' color='textSecondary'>change status</Typography>\r\n                            }\r\n                        </ListItem>\r\n                        <ProfileStatusForm\r\n                            id={id}\r\n                            open={open}\r\n                            anchorEl={anchorEl}\r\n                            onClose={handleClose}\r\n                        />\r\n                    </div>\r\n\r\n                    : <LinearPreloader/>\r\n\r\n                //если чужой профиль - просто текст статуса (ничего, если его нет)\r\n                : <>\r\n                    {\r\n                        !statusIsLoading\r\n                            ? <>\r\n                                {status  && <ListItem classes={{\r\n                                    gutters: classes.gutters\r\n                                }}\r\n                                >\r\n                                    {status}\r\n                                </ListItem>}\r\n                            </>\r\n                            : <LinearPreloader/>\r\n                    }\r\n\r\n                </>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatus;\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        marginTop: 15\r\n    },\r\n    gutters: {\r\n        paddingLeft: 11\r\n    },\r\n    listItem: {\r\n        paddingTop: 9,\r\n        paddingBottom: 9\r\n    }\r\n});\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    userId: number\r\n}","import Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst BlockTitle: React.FC<PropsType> = ({title}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.block}>\r\n            <Divider classes={{\r\n                root: classes.divider\r\n            }}/>\r\n            <Typography variant='subtitle2'\r\n                //color='primary'\r\n                        className={classes.title}\r\n            >\r\n                {title}\r\n            </Typography>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BlockTitle;\r\n\r\n\r\n//==================== TYPES =====================\r\ntype PropsType = {\r\n    title: string\r\n}\r\n\r\n//======================== STYLE =================\r\nconst useStyles = makeStyles({\r\n    block: {\r\n        position: 'relative'\r\n    },\r\n    divider: {\r\n        marginTop: 16,\r\n        marginBottom: 16\r\n    },\r\n    title: {\r\n        position: 'absolute',\r\n        left: 8,\r\n        top: '50%',\r\n        transform: 'translate(0, -50%)',\r\n        backgroundColor: 'white',\r\n        paddingLeft: 3,\r\n        paddingRight: 3,\r\n    }\r\n})","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from '@material-ui/core/Link';\r\n\r\n\r\nconst BlockField: React.FC<PropsType> = (props) => {\r\n    const {left, right, rightType} = props;\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.block}>\r\n            {left && <div className={classes.left}>\r\n                <Typography color='textSecondary'>{left}</Typography>\r\n            </div>}\r\n            {rightType === undefined && <div className={classes.right}>\r\n                <Typography>{right}</Typography>\r\n            </div>}\r\n            {rightType === 'link' && <div className={classes.right}>\r\n                <Link href={right}>\r\n                    {right}\r\n                </Link>\r\n            </div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BlockField;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    block: {\r\n        display: 'flex',\r\n        paddingLeft: 11\r\n    },\r\n    left: {\r\n        flexBasis: 200\r\n    },\r\n    right: {\r\n        flexGrow: 1\r\n    }\r\n});\r\n\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    left: string | null\r\n    right: string\r\n    rightType?: undefined | 'link'\r\n}","import React, {useState} from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getProfileSelector} from \"../../../redux/profile-selectors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport BlockTitle from \"../../common/BlockTitle\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport BlockField from \"../../common/BlockField\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({isOwner, userId, profile}) => {\r\n    const classes = useStyles();\r\n    const [showDetailedInfo, setShowDetailedInfo] = useState(false)\r\n\r\n    const onShowInfoClick = () => {\r\n        setShowDetailedInfo(!showDetailedInfo);\r\n    };\r\n\r\n    const showDetailedInfoTitle = showDetailedInfo\r\n        ? 'Hide detailed information'\r\n        : 'Show detailed information';\r\n\r\n    const lookingForAJob = profile && profile.lookingForAJob ? 'Да' : 'Нет';\r\n\r\n    const contactsElements = profile && Object\r\n        .keys(profile.contacts)\r\n        .map(key => {\r\n            if (profile.contacts[key as keyof ContactsType]) {\r\n                return <BlockField left={key} right={profile.contacts[key as keyof ContactsType]} rightType='link'/>\r\n            }\r\n        });\r\n\r\n    if (!profile) return <CircularPreloader/>\r\n\r\n    return (\r\n        <Card className={classes.card}\r\n              elevation={6}>\r\n            <CardContent className={classes.cardContent}>\r\n                <Typography variant='h6'\r\n                            color='primary'\r\n                            classes={{\r\n                                h6: classes.fullName\r\n                            }}>\r\n                    {profile.fullName}\r\n                </Typography>\r\n                <ProfileStatus isOwner={isOwner} userId={userId}/>\r\n\r\n                <Divider classes={{\r\n                    root: classes.divider\r\n                }}/>\r\n\r\n                <ListItem button\r\n                          className={classes.showDetailInfo}\r\n                          onClick={onShowInfoClick}\r\n                          classes={{\r\n                              //root: classes.listItem,\r\n                              //gutters: classes.gutters\r\n                          }}\r\n                >\r\n                    <Typography variant='body2' align='center' color='primary' display='block'>\r\n                        {showDetailedInfoTitle}\r\n                    </Typography>\r\n                </ListItem>\r\n\r\n                <Collapse in={showDetailedInfo} timeout=\"auto\" unmountOnExit>\r\n\r\n                    <>\r\n                        <BlockTitle title='About job'/>\r\n                        <BlockField left='Looking for a job' right={lookingForAJob}/>\r\n                        {\r\n                            profile.lookingForAJobDescription\r\n                            && <BlockField left='My professional skills' right={profile.lookingForAJobDescription}/>\r\n                        }\r\n                    </>\r\n\r\n                    {Object.keys(profile.contacts).some(key => profile.contacts[key as keyof ContactsType])\r\n                        ? <>\r\n                            <BlockTitle title='Contacts'/>\r\n                            {contactsElements}\r\n                        </>\r\n                        : <>\r\n                            {isOwner &&\r\n                            <>\r\n                                <BlockTitle title='Contacts'/>\r\n                                <Typography color='textSecondary' align='center'>No information available</Typography>\r\n                            </>\r\n                            }\r\n                        </>\r\n                    }\r\n\r\n\r\n                </Collapse>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\nexport default ProfileInfo;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n    },\r\n    cardContent: {\r\n        paddingLeft: 5,\r\n        paddingTop: 15,\r\n        paddingRight: 5,\r\n        '&:last-child': {\r\n            paddingBottom: 15\r\n        }\r\n    },\r\n    fullName: {\r\n        paddingLeft: 10,\r\n        marginBottom: 5,\r\n        lineHeight: '1.25rem'\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 16\r\n    },\r\n    showDetailInfo: {\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    userId: number\r\n    profile: ProfileType\r\n}","import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextAreaField = (props: any) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid, error}, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                multiline\r\n                rows={4}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentInfoFormSidebarItem, getProfileSelector} from \"../../../redux/profile-selectors\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport RenderCheckbox from \"../../common/RenderCheckbox\";\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport HttpIcon from '@material-ui/icons/Http';\r\nimport YouTubeIcon from '@material-ui/icons/YouTube';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport clsx from \"clsx\";\r\nimport RenderTextAreaField from \"../../common/RenderTextareaField\";\r\nimport {saveProfile} from \"../../../redux/profile-reducer\";\r\nimport {required, shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\n\r\n//========================== FORM ==============================================\r\nconst Form: React.FC<InjectedFormProps<FormValuesType, FormOwnPropsType> & FormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    const {handleSubmit, submitting, pristine, reset, error, profile} = props\r\n    const currentInfoFormSidebarItem = useSelector(getCurrentInfoFormSidebarItem);\r\n\r\n    const FieldContactsIconArray = [\r\n        <FacebookIcon/>,\r\n        <HttpIcon/>,\r\n        <ContactsIcon/>,\r\n        <TwitterIcon/>,\r\n        <InstagramIcon/>,\r\n        <YouTubeIcon/>,\r\n        <GitHubIcon/>,\r\n        <LanguageIcon/>\r\n    ];\r\n\r\n    const FieldContactsElements = Object.keys(profile.contacts)\r\n        .map((el, i) => <div className={classes.fieldWrapper}>\r\n            <Field name={`contacts.${el}`}\r\n                   key={i}\r\n                   icon={FieldContactsIconArray[i]}\r\n                   component={RenderTextField}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   className={classes.field}\r\n                   label={el}\r\n                   size='small'\r\n            />\r\n        </div>);\r\n\r\n    console.log(profile.fullName)\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n\r\n            <div className={clsx(classes.fieldWrapper, (currentInfoFormSidebarItem) !== 0 && classes.hide)}>\r\n                <Field name='fullName'\r\n                       icon={<AccountCircleIcon/>}\r\n                       component={RenderTextField}\r\n                       validate={[required, shouldNotBeEmpty]}\r\n                       className={classes.field}\r\n                       label='Full name'\r\n                       size='small'\r\n                />\r\n            </div>\r\n\r\n\r\n            <div className={clsx(currentInfoFormSidebarItem !== 1 && classes.hide)}>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field name='lookingForAJob'\r\n                           component={RenderCheckbox}\r\n                           className={classes.iconField}\r\n                           label='Looking for a job'\r\n                           size='small'\r\n                           variant='outlined'\r\n                    />\r\n                </div>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field name='lookingForAJobDescription'\r\n                           icon={<WorkIcon/>}\r\n                           component={RenderTextAreaField}\r\n                           validate={[shouldNotBeEmpty]}\r\n                           className={classes.field}\r\n                           label='My professional skills'\r\n                           placeholder='My professional skills'\r\n                           size='small'\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={clsx(currentInfoFormSidebarItem !== 2 && classes.hide)}>\r\n                {FieldContactsElements}\r\n            </div>\r\n\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SaveIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={classes.button}>\r\n                Save\r\n            </Button>\r\n\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\n//----------------------------REDUX-FORM------------------------------------------------\r\nconst ReduxForm = reduxForm<FormValuesType, FormOwnPropsType>({\r\n    form: 'profile-info',\r\n\r\n})(Form);\r\n\r\n//----------------------------COMPONENT-------------------------------------------------------\r\nconst ProfileInfoForm = () => {\r\n    const classes = useStyles();\r\n    const currentInfoFormSidebarItem = useSelector(getCurrentInfoFormSidebarItem);\r\n    const profile = useSelector(getProfileSelector);\r\n    const dispatch = useDispatch();\r\n    let title;\r\n    switch (currentInfoFormSidebarItem) {\r\n        case 0: {\r\n            title = 'Main'\r\n            break\r\n        }\r\n        case 1: {\r\n            title = 'Job'\r\n            break\r\n        }\r\n        case 2: {\r\n            title = 'Contacts'\r\n            break\r\n        }\r\n    }\r\n    let onSubmit = (values: FormValuesType) => {\r\n        console.log(values);\r\n        dispatch(saveProfile(values));\r\n        //dispatch(profileAC.setEditMode(false));\r\n    };\r\n\r\n    const initialValues = profile ? profile : undefined;\r\n\r\n    return (\r\n        <>\r\n            {profile\r\n                ? <Card className={classes.card}\r\n                        elevation={6}>\r\n                    <CardContent className={classes.cardContent}>\r\n                        <Typography variant='h6'\r\n                                    color='primary'\r\n                                    classes={{\r\n                                        h6: classes.title\r\n                                    }}>\r\n                            {title}\r\n                        </Typography>\r\n                        <Divider classes={{\r\n                            root: classes.divider\r\n                        }}/>\r\n\r\n                        <ReduxForm onSubmit={onSubmit}\r\n                                   profile={profile}\r\n                                   initialValues={initialValues}\r\n                        />\r\n\r\n                    </CardContent>\r\n                </Card>\r\n                : <CircularPreloader/>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ProfileInfoForm;\r\n\r\n//========================= TYPES ==============================================\r\ntype FormValuesType = ProfileType;\r\ntype FormOwnPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {},\r\n    cardContent: {\r\n        paddingLeft: 15,\r\n        paddingTop: 15,\r\n        paddingRight: 15,\r\n        '&:last-child': {\r\n            paddingBottom: 15\r\n        }\r\n    },\r\n    title: {\r\n        marginLeft: 15,\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 15\r\n    },\r\n    field: {\r\n        width: '100%',\r\n    },\r\n    iconField: {\r\n        marginBottom: 35,\r\n    },\r\n    fieldWrapper: {\r\n        marginLeft: 35,\r\n        marginBottom: 15\r\n    },\r\n    button: {\r\n        width: '100%',\r\n    },\r\n    hide: {\r\n        display: 'none'\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles({});\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import CardContent from \"@material-ui/core/CardContent\";\r\nimport React from \"react\";\r\nimport {Card, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport WorkOutlineIcon from '@material-ui/icons/WorkOutline';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentInfoFormSidebarItem} from \"../../../redux/profile-selectors\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {profileAC} from \"../../../redux/profile-reducer\";\r\n\r\nconst ProfileInfoFormSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentInfoFormSidebarItem = useSelector(getCurrentInfoFormSidebarItem);\r\n    const dispatch = useDispatch();\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(profileAC.setCurrentInfoFormSidebarItem(newValue));\r\n    };\r\n\r\n    return (\r\n        <Card elevation={6}>\r\n            <CardContent className={classes.cardContent}>\r\n\r\n                <Tabs\r\n                    classes={{\r\n                        indicator: classes.indicator\r\n                    }}\r\n                    orientation=\"vertical\"\r\n                    value={currentInfoFormSidebarItem}\r\n                    onChange={handleChange}\r\n                    className={classes.tabs}\r\n                >\r\n\r\n                    <Tab label=\"Main\" icon={<AccountCircleIcon className={classes.icon}/>} classes={{\r\n                        wrapper: classes.wrapper,\r\n                        selected: classes.selected,\r\n                        root: classes.tabRoot,\r\n                        labelIcon: classes.labelIcon\r\n                    }}/>\r\n                    <Tab label=\"Job\" icon={<WorkOutlineIcon className={classes.icon}/>} classes={{\r\n                        wrapper: classes.wrapper,\r\n                        selected: classes.selected,\r\n                        root: classes.tabRoot,\r\n                        labelIcon: classes.labelIcon\r\n                    }}/>\r\n                    <Tab label=\"Contacts\" icon={<LanguageIcon className={classes.icon}/>} classes={{\r\n                        wrapper: classes.wrapper,\r\n                        selected: classes.selected,\r\n                        root: classes.tabRoot,\r\n                        labelIcon: classes.labelIcon\r\n                    }}/>\r\n\r\n                </Tabs>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default ProfileInfoFormSidebar;\r\n\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    label: string\r\n    icon: React.ReactElement\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    cardContent: {\r\n        paddingLeft: 15,\r\n        paddingTop: 15,\r\n        paddingRight: 15,\r\n        '&:last-child': {\r\n            paddingBottom: 15\r\n        }\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid ${theme.palette.divider}`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none'\r\n    },\r\n    icon: {\r\n        marginRight: 15,\r\n        marginLeft: 15\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50\r\n    }\r\n}));","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\n\r\n\r\nconst ProfileFriendsItem: React.FC<PropsType> = ({friend}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const src = friend.photos.small;\r\n\r\n    let indexBeforeWhiteSpace = friend.name.search(/[\\s_]/);\r\n    const shortName = (indexBeforeWhiteSpace > 0) ?  friend.name.slice(0, indexBeforeWhiteSpace) : friend.name;\r\n\r\n    const onListItemClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(3));\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={4} className={classes.item}>\r\n                <Avatar className={classes.avatar}\r\n                        src={src ? src : undefined}\r\n                />\r\n            <Link component={RouterLink} to={`/users/${friend.id}`} onClick={onListItemClick}>\r\n\r\n                <Typography variant=\"caption\" align='center'>\r\n                    {shortName}\r\n                </Typography>\r\n            </Link>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default ProfileFriendsItem;\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    friend: UserType\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50\r\n    }\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ProfileFriendsItem from \"./ProfileFriendsItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\n\r\nconst ProfileFriends: React.FC<PropsType> = ({friends, totalFriendsCount}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const FriendsElements = friends\r\n        && friends\r\n            .map((el, i) => <ProfileFriendsItem key={i} friend={el}/>)\r\n            .slice(0,6);\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(4))\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <div className={classes.title}>\r\n                <Link component={RouterLink} to={'/friends'} className={classes.link} onClick={onClickHandler}>\r\n                    Friends\r\n                </Link>\r\n                <Badge badgeContent={totalFriendsCount} color=\"primary\" max={99999} showZero>\r\n                    <AccountCircleIcon/>\r\n                </Badge>\r\n\r\n            </div>\r\n\r\n            <Grid container alignContent='stretch' justify='space-between' wrap='wrap' spacing={1}>\r\n                {FriendsElements}\r\n            </Grid>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default ProfileFriends;\r\n\r\n//========================== TYPES ==============================================\r\ntype PropsType = {\r\n    friends: Array<UserType> | null\r\n    totalFriendsCount: number\r\n}\r\n\r\n//========================== STYLES =============================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 15,\r\n    },\r\n    title: {\r\n    marginBottom: 5\r\n    },\r\n    link: {\r\n        marginRight: 5\r\n    }\r\n});","import {InputBaseProps} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst RenderNakedTextAreaField = (props: any) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid, error}, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <InputBase\r\n                multiline\r\n                rows={4}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                //helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderNakedTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport {Button, Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {Field, InjectedFormProps, reduxForm, reset, submit} from \"redux-form\";\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport {required, shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport RenderNakedTextAreaField from \"../../common/RenderNakedTextareaField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {profileAC} from \"../../../redux/profile-reducer\";\r\nimport {getEditingPost} from \"../../../redux/profile-selectors\";\r\nimport BlockTitle from \"../../common/BlockTitle\";\r\n\r\n\r\n//============================ FORM ===================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, onBlur} = props;\r\n    const classes = useStyles();\r\n    const classesTextArea = useStylesTextArea();\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field name='newPostText'\r\n                   component={RenderNakedTextAreaField}\r\n                   validate={[shouldNotBeEmpty, required]}\r\n                   autoFocus={true}\r\n                   className={classes.textArea}\r\n                   placeholder='Enter your post'\r\n                   size='small'\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nfunction submitFunc(formValue: FormValuesType) {\r\n    console.log(formValue);\r\n}\r\n\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n    dispatch(profileAC.setEditingPost(false));\r\n    dispatch(reset('post'))\r\n\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'post',\r\n    onSubmitSuccess: afterSubmit,\r\n    //onSubmit: submitFunc\r\n})(Form);\r\n\r\n\r\n//============================= COMPONENT =====================================================\r\n\r\nconst MyPosts: React.FC<PropsType> = ({profile, onBlur}) => {\r\n    const classes = useStyles();\r\n    const editingPost = useSelector(getEditingPost)\r\n    const dispatch = useDispatch();\r\n\r\n    const onBlurLocale = () => {\r\n        dispatch(profileAC.setEditingPost(false))\r\n    }\r\n\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(profileAC.addPost(formValue.newPostText));\r\n    };\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(profileAC.setEditingPost(true))\r\n    };\r\n\r\n    const onSubmitHandler = () => {\r\n        dispatch(submit('post'));\r\n\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <div className={classes.formWrapper}>\r\n                <Avatar className={classes.avatar}\r\n                        src={profile.photos.large ? profile.photos.large : undefined}\r\n                />\r\n                <div className={classes.form}>\r\n                    {\r\n                        editingPost\r\n                            ? <ReduxForm onSubmit={onSubmit} onBlur={onBlurLocale}/>\r\n                            : <Typography onClick={onClickHandler}>\r\n                                Enter your post\r\n                            </Typography>\r\n                    }\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <BlockTitle title=''/>\r\n            <div>\r\n                <Button\r\n                    size=\"small\"\r\n                    color='primary'\r\n                    variant=\"contained\"\r\n                    startIcon={<PostAddIcon/>}\r\n                    //disabled={submitting || pristine}\r\n                    //className={classes.button}\r\n                    onClick={onSubmitHandler}\r\n                >\r\n                    Add post\r\n                </Button>\r\n            </div>\r\n\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default MyPosts;\r\n\r\n//========================== TYPES ==============================================\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    onBlur: () => void\r\n}\r\ntype OwnPropsType = {\r\n    onBlur: () => void\r\n}\r\nexport type FormValuesType = {\r\n    newPostText: string\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\n//========================== STYLES =============================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 15,\r\n        marginTop: 15,\r\n\r\n    },\r\n    avatar: {\r\n        width: 28,\r\n        height: 28,\r\n        marginRight: 10\r\n    },\r\n    formWrapper: {\r\n        display: 'flex'\r\n    },\r\n    textArea: {\r\n        border: 0,\r\n        width: '100%',\r\n    },\r\n    form: {\r\n        flexGrow: 1\r\n    }\r\n});\r\n\r\nconst useStylesTextArea = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    }\r\n})\r\n\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Card} from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {PostType, ProfileType} from \"../../../types/types\";\r\nimport BlockTitle from \"../../common/BlockTitle\";\r\n\r\n\r\nconst MyPost: React.FC<PropsType> = ({post, profile}) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                profile &&\r\n                <Card elevation={6} className={classes.card}>\r\n                    <div className={classes.header}>\r\n                        <Avatar className={classes.avatar}\r\n                                src={profile.photos.large ? profile.photos.large : undefined}\r\n                        />\r\n                        <div className={classes.headerInfo}>\r\n                            <Link component={RouterLink} to={'/profile'}>\r\n                                {profile.fullName}\r\n                            </Link>\r\n                            <Typography>\r\n                                {post.time}\r\n                            </Typography>\r\n                        </div>\r\n\r\n                        <div className={classes.root}>\r\n                            <div>\r\n                                <IconButton\r\n                                    ref={anchorRef}\r\n                                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleToggle}\r\n                                >\r\n                                    <KeyboardArrowDownIcon/>\r\n                                </IconButton>\r\n                                <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal placement='bottom-end'>\r\n                                    {({TransitionProps, placement}) => (\r\n                                        <Grow\r\n                                            {...TransitionProps}\r\n                                            style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                        >\r\n                                            <Paper>\r\n                                                <ClickAwayListener onClickAway={handleClose}>\r\n                                                    <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                              onKeyDown={handleListKeyDown}>\r\n                                                        <MenuItem onClick={handleClose}>Delete post</MenuItem>\r\n                                                        <MenuItem onClick={handleClose}>Something else</MenuItem>\r\n                                                        <MenuItem onClick={handleClose}>Something else</MenuItem>\r\n                                                    </MenuList>\r\n                                                </ClickAwayListener>\r\n                                            </Paper>\r\n                                        </Grow>\r\n                                    )}\r\n                                </Popper>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Typography variant='body1'>\r\n                        {post.message}\r\n                    </Typography>\r\n                    <BlockTitle title=''/>\r\n\r\n\r\n\r\n                </Card>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPost\r\n\r\n//========================== TYPES ==============================================\r\ntype PropsType = {\r\n    post: PostType\r\n    profile: ProfileType | null\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    paper: {\r\n        marginRight: 10,\r\n    },\r\n    card: {\r\n        padding: 15,\r\n        marginTop: 15\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        marginBottom: 15\r\n    },\r\n    headerInfo: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        flexGrow: 1\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50,\r\n        marginRight: 15\r\n    },\r\n    popper: {\r\n        zIndex: 1000\r\n    },\r\n});\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from \"react-router\";\r\nimport {getId} from \"../../../redux/auth-selectors\";\r\nimport {getIsLoading} from \"../../../redux/app-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport {getCurrentUserProfile, getFollowed, getProfile} from \"../../../redux/profile-reducer\";\r\n\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ProfileAvatar from \"./ProfileAvatar\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport ProfileInfoForm from \"./ProfileInfoForm\";\r\nimport ProfileInfoFormSidebar from \"./ProfileInfoFormSidebar\";\r\nimport {\r\n    getCurrentUserProfileSelector,\r\n    getEditMode, getFollowedSelector, getPosts,\r\n    getProfileSelector,\r\n} from \"../../../redux/profile-selectors\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport ProfileFriends from \"./ProfileFriends\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getFriendsSelector,\r\n    getPageSize,\r\n    getTotalFriendsCount\r\n} from \"../../../redux/users-selectors\";\r\nimport {getFriends} from \"../../../redux/users-reduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport MyPostsItem from \"./MyPostsItem\";\r\nimport MyPost from \"./MyPost\";\r\n\r\nconst Profile: React.FC = () => {\r\n    const classes = useStyles();\r\n    const authorizedUserId = useSelector(getId);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const editMode = useSelector(getEditMode);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const friends = useSelector(getFriendsSelector);\r\n    const totalFriendsCount = useSelector(getTotalFriendsCount);\r\n    const followed = useSelector(getFollowedSelector);\r\n    const posts = useSelector(getPosts);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    let {userId} = useParams();\r\n    const isOwner = userId ? false : true;\r\n    if (!userId) {\r\n        userId = authorizedUserId;\r\n    }\r\n\r\n    const profileSelector = isOwner ? getProfileSelector : getCurrentUserProfileSelector;\r\n    const profile = useSelector(profileSelector);\r\n\r\n    useEffect(() => {\r\n        if (isOwner) {\r\n            dispatch(getProfile(userId));\r\n            dispatch(getFriends(currentPage, pageSize));\r\n        } else {\r\n            dispatch(getCurrentUserProfile(userId));\r\n            dispatch(getFollowed(userId));\r\n        }\r\n    }, [userId]);\r\n\r\n\r\n    const MyPostsItemElements = posts\r\n        .map(el => <MyPost key={el.id} post={el} profile={profile}/>);\r\n\r\n    const onBlurHandler = () => {\r\n        console.log('onBlur')\r\n    }\r\n\r\n\r\n    if (isLoading || !profile) return <CircularPreloader/>\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <div className={classes.firstColumn}>\r\n                <ProfileAvatar isOwner={isOwner}\r\n                               userId={userId}\r\n                               profile={profile}\r\n                               followed={followed}\r\n                />\r\n                {isOwner && <ProfileFriends friends={friends} totalFriendsCount={totalFriendsCount}/>}\r\n            </div>\r\n\r\n            <div className={classes.middleColumn}>\r\n                {!editMode\r\n                    ? <>\r\n                        <ProfileInfo isOwner={isOwner} userId={userId} profile={profile}/>\r\n                        {\r\n                            isOwner &&\r\n                            <>\r\n                                <MyPosts profile={profile} onBlur={onBlurHandler}/>\r\n                                {MyPostsItemElements}\r\n                                {/*<MenuListComposition post={null} profile={null}/>*/}\r\n                                {/*<MyPostsItem post={null} profile={null}/>*/}\r\n                            </>\r\n                        }\r\n                    </>\r\n                    : <ProfileInfoForm/>\r\n                }\r\n            </div>\r\n\r\n            {\r\n                editMode &&\r\n                <div className={classes.lastColumn}>\r\n                    {<ProfileInfoFormSidebar/>}\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withAuthRedirect(Profile);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\"\r\n    },\r\n    firstColumn: {\r\n        flexBasis: 230,\r\n        marginRight: 15,\r\n    },\r\n    middleColumn: {\r\n        flexGrow: 1,\r\n        marginRight: 15\r\n    },\r\n    lastColumn: {\r\n        width: 160,\r\n    }\r\n});\r\n"],"sourceRoot":""}