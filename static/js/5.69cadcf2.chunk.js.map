{"version":3,"sources":["Components/Main/Dialogs/DialogsListItem.tsx","Components/Main/Dialogs/DialogsList.tsx","Components/Main/Dialogs/CurrentDialogHeader.tsx","Components/Main/Dialogs/CurrentDialogMessage.tsx","Components/Main/Dialogs/CurrentDialogMeseges.tsx","Components/Main/Dialogs/CurrentDialogForm.tsx","Components/Main/Dialogs/CurrentDialog.tsx","Components/Main/Dialogs/Dialogs.tsx"],"names":["ListItemLink","primary","secondary","to","src","dialog","classes","useStyles","dispatch","useDispatch","selected","useParams","userId","id","renderLink","React","useMemo","forwardRef","itemProps","ref","secondaryTransformed","DATE","dateTranslateFromAPI","className","item","ListItem","button","component","onClick","dialogsAC","setCurrentFriendsId","ListItemAvatar","Avatar","avatar","Typography","color","variant","ListItemText","DialogsListItem","userName","lastDialogActivityDate","photos","small","undefined","makeStyles","borderTop","borderBottom","width","height","marginRight","SkeletonListItem","skeletonWrapper","Skeleton","DialogsList","dialogs","dialogsIsLoading","useSelector","getDialogsIsLoading","dialogsElements","map","i","key","Card","card","elevation","List","disablePadding","btnWrapper","marginBottom","padding","display","alignItems","CurrentDialogHeader","currentDialog","isLoading","selectedMessagesId","getSelectedMessagesId","headerWrapper","ListSubheader","header","Link","RouterLink","link","length","messagesCount","IconButton","cleanSelectedId","iconClean","Tooltip","title","TransitionComponent","Zoom","arrow","deleteMessages","CurrentDialogMessage","message","useState","hover","setHover","myId","getId","profile","getProfileSelector","includes","useEffect","srcFinally","senderId","icon","removeSelectedId","addSelectedId","listItem","onMouseEnter","onMouseLeave","checkedIcon","fontSize","messageBlock","senderName","addedAt","body","Icon","boxSizing","margin","paddingLeft","position","top","left","transform","backgroundColor","flexGrow","SkeletonCustom","skeletonCustom","CurrentDialogMeseges","messages","messagesIsLoading","getMessagesIsLoading","elements","el","paddingRight","ReduxForm","reduxForm","form","onSubmitSuccess","result","reset","props","handleSubmit","submitting","pristine","classesField","useStylesField","onSubmit","fieldWrapper","Field","name","RenderTextAreaField","validate","shouldNotBeEmpty","autoFocus","rows","textArea","label","placeholder","size","type","disabled","CurrentDialogForm","formWrapper","formValue","sendMessage","root","grey","CurrentDialog","getMessagesSelector","subheader","withAuthRedirect","getIsLoading","getDialogsSelector","getCurrentFriendsId","getDialogs","getMessages","find","firstColumn","lastColumn","flexBasis"],"mappings":"qPAcMA,EAAgD,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,OAC3EC,EAAUC,IACVC,EAAWC,cAEXC,GADSC,cAAVC,SACwBP,EAAOQ,GAE9BC,EAAaC,IAAMC,SACrB,kBACID,IAAME,YAA6C,SAACC,EAAWC,GAAZ,OAC/C,kBAAC,IAAD,eAAYhB,GAAIA,EAAIgB,IAAKA,GAASD,SAE1C,CAACf,IAMCiB,EAAuBC,IAAKC,qBAAqBpB,GAEvD,OACI,wBAAIqB,UAAWjB,EAAQkB,MACnB,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,UAAWb,EAAYJ,SAAUA,EAAUkB,QAR9C,WAClBpB,EAASqB,IAAUC,oBAAoBzB,EAAOQ,OAQtC,kBAACkB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQ5B,IAAKA,EAAKmB,UAAWjB,EAAQ2B,UAEzC,kBAACC,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAAQ,MAChC,kBAACC,EAAA,EAAD,CAAcpC,QAASA,EAASC,UAAWkB,QAqBhDkB,EAb8B,SAAC,GAAc,IAAbjC,EAAY,EAAZA,OAE3C,OACI,kBAAC,EAAD,CACIF,GAAE,mBAAcE,EAAOQ,IACvBZ,QAASI,EAAOkC,SAChBrC,UAAWG,EAAOmC,uBAClBpC,IAAKC,EAAOoC,OAAOC,MAAQrC,EAAOoC,OAAOC,WAAQC,EACjDtC,OAAQA,KAqBdE,EAAYqC,YAAW,CACzBpB,KAAM,CACFqB,UAAW,iBACX,eAAgB,CACZC,aAAc,mBAGtBb,OAAQ,CACJc,MAAO,GACPC,OAAQ,GACRC,YAAa,M,iBC5EfC,EAAmB,WACrB,IAAM5C,EAAUC,IAChB,OACI,yBAAKgB,UAAWjB,EAAQ6C,iBACpB,kBAACC,EAAA,EAAD,CAAUhB,QAAQ,SAASW,MAAO,GAAIC,OAAQ,GAAIzB,UAAWjB,EAAQ2B,SACrE,kBAACmB,EAAA,EAAD,CAAUhB,QAAQ,OAAOW,MAAO,IAAKC,OAAQ,OA+B1CK,EAzB0B,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACjChD,EAAUC,IACVgD,EAAmBC,YAAYC,KAE/BC,EAAkBJ,GAAWA,EAC9BK,KAAI,SAACnC,EAAMoC,GAAP,OAAa,kBAAC,EAAD,CAAiBC,IAAKrC,EAAKX,GACVR,OAAQmB,OAE/C,OACI,kBAACsC,EAAA,EAAD,CAAMvC,UAAWjB,EAAQyD,KAAMC,UAAW,GACpCT,EACI,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAACU,EAAA,EAAD,CAAMC,gBAAc,GACrBR,KAeXnD,EAAYqC,YAAW,CACzBmB,KAAM,GAGN9B,OAAQ,CACJgB,YAAa,IAEjBkB,WAAY,CACRC,aAAc,IAElBjB,gBAAiB,CACbkB,QAAS,SACTrB,OAAQ,GACRsB,QAAS,OACTC,WAAY,Y,iFCqBLC,EAxEkC,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,cAAe7D,EAAuB,EAAvBA,OAAQ8D,EAAe,EAAfA,UAChEpE,EAAUC,IACVoE,EAAqBnB,YAAYoB,KACjCxE,EAAMqE,GAAiBA,EAAchC,OAAOC,MAAQ+B,EAAchC,OAAOC,WAAQC,EACjFnC,EAAWC,cAYjB,OACI,yBAAKc,UAAWjB,EAAQuE,eACnBH,EACK,kBAACI,EAAA,EAAD,CAAenD,UAAU,MAAMJ,UAAWjB,EAAQyE,QAChD,kBAAC3B,EAAA,EAAD,CAAUhB,QAAQ,SAASW,MAAO,GAAIC,OAAQ,GAAIzB,UAAWjB,EAAQ2B,SACrE,kBAACmB,EAAA,EAAD,CAAUhB,QAAQ,OAAOW,MAAO,IAAKC,OAAQ,MAE/C,kBAAC8B,EAAA,EAAD,CAAenD,UAAU,MAAMJ,UAAWjB,EAAQyE,QAC/CN,EACK,oCACE,kBAACzC,EAAA,EAAD,CAAQ5B,IAAKA,EAAKmB,UAAWjB,EAAQ2B,SAErC,kBAAC+C,EAAA,EAAD,CAAMrD,UAAWsD,IACX1D,UAAWjB,EAAQ4E,KACnB/E,GAAE,iBAAYsE,EAAc5D,IAC5BuB,QAAQ,aACTqC,EAAclC,UAIe,IAA9BoC,EAAmBQ,QACnB,oCACI,yBAAK5D,UAAWjB,EAAQ8E,eACpB,kBAAClD,EAAA,EAAD,CAAYE,QAAQ,QAAQD,MAAM,eAC7BwC,EAAmBQ,OADxB,aAGA,kBAACE,EAAA,EAAD,CAAYzD,QApCpB,WACxBpB,EAASqB,IAAUyD,oBAmCuD/D,UAAWjB,EAAQiF,WACzD,kBAAC,IAAD,QAIR,6BACI,kBAACC,EAAA,EAAD,CAASC,MAAM,SAASC,oBAAqBC,IAAMC,OAAO,GACtD,kBAACP,EAAA,EAAD,CAAYzD,QAvC5B,WAChBhB,GACAJ,EAASqF,YAAelB,EAAoB/D,KAqC0BW,UAAWjB,EAAQiF,WACrD,kBAAC,IAAD,WAUtB,kBAACrD,EAAA,EAAD,CAAYE,QAAQ,MAApB,eAsBpB7B,EAAYqC,YAAW,CACzBX,OAAQ,CACJgB,YAAa,IAEjB8B,OAAQ,CACJT,QAAS,OACTC,WAAY,SACZvB,OAAQ,IAEZ6B,cAAe,CACXR,QAAS,EACTvB,aAAc,kBAElBoC,KAAM,CACFjC,YAAa,IAEjBmC,cAAe,CACXd,QAAS,OACTC,WAAY,SACZtB,YAAa,IAEjBsC,UAAW,CACPlB,QAAS,K,wFC5BFyB,EAxEmC,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,QAAS3F,EAAS,EAATA,IACnDE,EAAUC,IADkD,EAExCyF,oBAAS,GAF+B,mBAE3DC,EAF2D,KAEpDC,EAFoD,KAG5DC,EAAO3C,YAAY4C,KACnBC,EAAU7C,YAAY8C,KACtB3B,EAAqBnB,YAAYoB,KACjCpE,EAAWC,cACXC,EAAWiE,EAAmB4B,SAASR,EAAQlF,IAcrD2F,qBAAU,WACNhG,EAASqB,IAAUyD,qBACpB,CAACS,IAEJ,IAAMU,EAAcJ,EACbN,EAAQW,WAAaP,EAAQE,EAAQ5D,OAAOC,MAAQtC,OACrDuC,EAEAxC,EAAM4F,EAAQW,WAAaP,EAAQ,WAA9B,iBAAqDJ,EAAQW,UAElEC,EAAOZ,EAAQW,WAAaP,EAAO,kBAAC,IAAD,MAAsB,kBAAC,IAAD,MAE/D,OACI,kBAAC1E,EAAA,EAAD,CAAUC,QAAM,EACNE,QA3BQ,WAIdpB,EAHCE,EAGQmB,IAAU+E,iBAAiBb,EAAQlF,IAFnCgB,IAAUgF,cAAcd,EAAQlF,MA0BnCH,SAAUA,EACVa,UAAWjB,EAAQwG,SACnBxG,QAAS,CACLI,SAAUJ,EAAQI,UAEtBqG,aA1Bc,WACxBb,GAAS,IA0BCc,aAxBc,WACxBd,GAAS,MAyBFD,IAAUvF,GAAaA,IAAa,kBAAC,IAAD,CAAiBa,UAAWjB,EAAQ2G,YACrB9E,MAAOzB,EAAW,UAAY,WAC9BwG,SAAS,UAC/D,kBAAClF,EAAA,EAAD,CAAQ5B,IAAKqG,EAAYlF,UAAWjB,EAAQ2B,SAC5C,yBAAKV,UAAWjB,EAAQ6G,cACpB,yBAAK5F,UAAWjB,EAAQmF,OACpB,kBAACT,EAAA,EAAD,CAAMrD,UAAWsD,IACX1D,UAAWjB,EAAQ4E,KACnB/E,GAAIA,EACJiC,QAAQ,aACT2D,EAAQqB,YAEb,kBAAClF,EAAA,EAAD,CAAYE,QAAQ,YACRD,MAAM,iBAEbd,IAAKC,qBAAqByE,EAAQsB,WAG3C,6BAAMtB,EAAQuB,OAGlB,kBAACC,EAAA,EAAD,CAAMhG,UAAWjB,EAAQqG,MAAOA,KAetCpG,EAAYqC,YAAW,CACzBkE,SAAU,CACNU,UAAW,aACXC,OAAQ,UACRpD,QAAS,EACTqD,YAAa,GACbC,SAAU,WACVrD,QAAS,OACTC,WAAY,cAEhB0C,YAAa,CACTU,SAAU,WACVC,IAAK,MACLC,KAAM,EACNC,UAAW,sBAEfpH,SAAU,CACNqH,gBAAiB,OAErB9F,OAAQ,CACJgB,YAAa,IAEjBwC,MAAO,CACHnB,QAAS,QAEbY,KAAM,CACFjC,YAAa,IAEjBkE,aAAc,CACVa,SAAU,GAEdrB,KAAM,CACF1D,YAAa,MC9HfgF,EAA2B,WAC7B,IAAM3H,EAAUC,IAChB,OACI,yBAAKgB,UAAWjB,EAAQ4H,gBACpB,kBAAC9E,EAAA,EAAD,CAAUhB,QAAQ,SAASW,MAAO,GAAIC,OAAQ,GAAIzB,UAAWjB,EAAQ2B,SACrE,kBAACmB,EAAA,EAAD,CAAUhB,QAAQ,OAAOW,MAAM,OAAOC,OAAQ,OAoC3CmF,EA9BmC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,SAAUhI,EAAiB,EAAjBA,IAAKQ,EAAY,EAAZA,OACzDyH,EAAoB7E,YAAY8E,KAEhCC,EAAWH,GAAYA,EACxBzE,KAAI,SAAA6E,GAAE,OAAI,kBAAC,EAAD,CAAsBzC,QAASyC,EAAIpI,IAAKA,OAEvD,OACI,oCAEQQ,GACA,6BAEQyH,EACM,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,oCACGE,MAoB3BhI,EAAYqC,YAAW,CACzBsF,eAAgB,CACZlF,OAAQ,GACRsB,QAAS,OACTC,WAAY,SACZmD,YAAa,GACbe,aAAc,IAGlBxG,OAAQ,CACJgB,YAAa,M,uFCpBfyF,GAAYC,aAAwC,CACtDC,KAAM,2BACNC,gBANgB,SAACC,EAAatI,GAC9BA,EAASuI,aAAM,+BAGDJ,EArCoB,SAACK,GAAW,IACvCC,EAAsCD,EAAtCC,aAAcC,EAAwBF,EAAxBE,WAAYC,EAAYH,EAAZG,SAC3B7I,EAAUC,KACV6I,EAAeC,KACrB,OACI,0BAAMC,SAAUL,EAAc1H,UAAWjB,EAAQsI,MAC7C,yBAAKrH,UAAWjB,EAAQiJ,cACpB,kBAACC,GAAA,EAAD,CAAOC,KAAK,UACL9H,UAAW+H,KACXC,SAAU,CAACC,MACXC,WAAW,EACXC,KAAM,EACNvI,UAAWjB,EAAQyJ,SACnBzJ,QAAS8I,EACTY,MAAM,qBACNC,YAAY,qBACZC,KAAK,WAIhB,kBAAC7E,EAAA,EAAD,CACI8E,KAAK,SACLhI,MAAM,UACNiI,SAAUlB,GAAcC,GAExB,kBAAC,IAAD,WAmCDkB,GAjByC,SAAC,GAAU,IAATxJ,EAAQ,EAARA,GAChDP,EAAUC,KACVC,EAAWC,cAQjB,OACI,yBAAKc,UAAWjB,EAAQgK,aACpB,kBAAC5B,GAAD,CAAWY,SARF,SAACiB,GACV1J,GACAL,EAASgK,YAAY3J,EAAI0J,EAAUxE,eAyBzCsD,GAAiBzG,YAAW,CAC9B6H,KAAM,CACF1C,gBAAiB,QACjBhF,MAAO,UAITxC,GAAYqC,YAAW,CACzB0H,YAAa,CACTvC,gBAAiB2C,KAAK,KACtBrG,QAAS,IAEbuE,KAAM,CACFtE,QAAS,OACTC,WAAY,UAEhBgF,aAAc,CACVvB,SAAU,GAGd+B,SAAU,CACNhH,MAAO,UCzEA4H,GAvB4B,SAAC,GAAwC,IAAvClG,EAAsC,EAAtCA,cAAe7D,EAAuB,EAAvBA,OAAQ8D,EAAe,EAAfA,UAC1DpE,EAAUC,KACV6H,EAAW5E,YAAYoH,KAEvBxK,EAAyB,OAAlBqE,EAAyBA,EAAchC,OAAOC,WAAQC,EAEnE,OACI,kBAACmB,EAAA,EAAD,CAAMvC,UAAWjB,EAAQyD,KAAMC,UAAW,GACtC,kBAACC,EAAA,EAAD,CAAMC,gBAAc,EAChB2G,UACA,kBAAC,EAAD,CAAqBpG,cAAeA,EACf7D,OAAQA,EACR8D,UAAWA,KAIhC,kBAAC,EAAD,CAAsB0D,SAAUA,EAAUhI,IAAKA,EAAKQ,OAAQA,KAEhE,kBAAC,GAAD,CAAmBC,GAAID,MAe7BL,GAAYqC,YAAW,CACzBmB,KAAM,GAGNI,WAAY,CACRC,aAAc,M,oBCYhB7D,IAHSuK,wBA3CW,WACtB,IAAMxK,EAAUC,KACVC,EAAWC,cACXiE,EAAYlB,YAAYuH,MACxBzH,EAAUE,YAAYwH,KAGvBpK,GAFoB4C,YAAYyH,KAEtBtK,cAAVC,QAEL4F,qBAAU,WACNhG,EAAS0K,iBACV,IAEH1E,qBAAU,WACF5F,GACAJ,EAAS2K,YAAYvK,MAE1B,CAACA,IAGJ,IAAM6D,EAAiBnB,GAAW1C,EAAU0C,EAAQ8H,MAAK,SAAA5C,GAAE,OAAIA,EAAG3H,MAAQD,KAAwB,KAElG,OACI,sCAEU8D,GAAapB,IACf,yBAAK/B,UAAWjB,EAAQmK,MACpB,yBAAKlJ,UAAWjB,EAAQ+K,aACpB,kBAAC,EAAD,CAAa/H,QAASA,KAE1B,yBAAK/B,UAAWjB,EAAQgL,YACpB,kBAAC,GAAD,CAAe7G,cAAeA,EACf7D,OAAQA,EACR8D,UAAWA,UAahC9B,YAAW,CACzB6H,KAAM,CACFnG,QAAS,QAGb+G,YAAa,CACTE,UAAW,IACXtI,YAAa,IAEjBqI,WAAY,CACRtD,SAAU","file":"static/js/5.69cadcf2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps, useParams} from 'react-router-dom';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentDialogsListItem, getCurrentFriendsId} from \"../../../redux/dialogs-selectors\";\r\nimport {dialogsAC} from \"../../../redux/dialogs-reducer\";\r\nimport {DATE} from \"../../../utilities/date\";\r\n\r\nconst ListItemLink: React.FC<ListItemLinkPropsType> = ({primary, secondary, to, src, dialog}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    let {userId} = useParams();\r\n    const selected = +userId === dialog.id;\r\n\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    const onClickHandle = () => {\r\n        dispatch(dialogsAC.setCurrentFriendsId(dialog.id))\r\n    };\r\n\r\n    const secondaryTransformed = DATE.dateTranslateFromAPI(secondary)\r\n\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem button component={renderLink} selected={selected} onClick={onClickHandle}>\r\n                <ListItemAvatar>\r\n                    <Avatar src={src} className={classes.avatar}/>\r\n                </ListItemAvatar>\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary} secondary={secondaryTransformed}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\n\r\nconst DialogsListItem: React.FC<PropsType> = ({dialog}) => {\r\n\r\n    return (\r\n        <ListItemLink\r\n            to={`/dialogs/${dialog.id}`}\r\n            primary={dialog.userName}\r\n            secondary={dialog.lastDialogActivityDate}\r\n            src={dialog.photos.small ? dialog.photos.small : undefined}\r\n            dialog={dialog}\r\n        >\r\n        </ListItemLink>\r\n    )\r\n};\r\nexport default DialogsListItem;\r\n\r\n//===================== TYPE =======================\r\ntype ListItemLinkPropsType = {\r\n    primary: string\r\n    secondary: string\r\n    to: string\r\n    src: string | undefined\r\n    dialog: DialogType\r\n}\r\n\r\ntype PropsType = {\r\n    dialog: DialogType\r\n}\r\n\r\n//===================== STYLE ======================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        borderTop: '1px solid #ccc',\r\n        '&:last-child': {\r\n            borderBottom: '1px solid #ccc'\r\n        },\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50,\r\n        marginRight: 10\r\n    }\r\n});","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport List from \"@material-ui/core/List\";\r\nimport DialogsListItem from \"./DialogsListItem\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getDialogsIsLoading} from \"../../../redux/dialogs-selectors\";\r\n\r\nconst SkeletonListItem = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.skeletonWrapper}>\r\n            <Skeleton variant=\"circle\" width={40} height={40} className={classes.avatar}/>\r\n            <Skeleton variant=\"rect\" width={200} height={45}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst DialogsList: React.FC<PropsType> = ({dialogs}) => {\r\n    const classes = useStyles();\r\n    const dialogsIsLoading = useSelector(getDialogsIsLoading);\r\n\r\n    const dialogsElements = dialogs && dialogs\r\n        .map((item, i) => <DialogsListItem key={item.id}\r\n                                           dialog={item}/>);\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            { dialogsIsLoading\r\n                ? <div>\r\n                    <SkeletonListItem/>\r\n                    <SkeletonListItem/>\r\n                    <SkeletonListItem/>\r\n                    <SkeletonListItem/>\r\n                </div>\r\n                : <List disablePadding>\r\n                {dialogsElements}\r\n            </List>\r\n            }\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default DialogsList;\r\n\r\n//============================ TYPE ================================================\r\ntype PropsType = {\r\n    dialogs: null | Array<DialogType>\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n\r\n    },\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    btnWrapper: {\r\n        marginBottom: 10\r\n    },\r\n    skeletonWrapper: {\r\n        padding: '0 16px',\r\n        height: 72,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    }\r\n});","import React from \"react\";\r\nimport {ListSubheader} from \"@material-ui/core\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getSelectedMessagesId} from \"../../../redux/dialogs-selectors\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {deleteMessages, dialogsAC} from \"../../../redux/dialogs-reducer\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\n\r\nconst CurrentDialogHeader: React.FC<PropsType> = ({currentDialog, userId, isLoading}) => {\r\n    const classes = useStyles();\r\n    const selectedMessagesId = useSelector(getSelectedMessagesId);\r\n    const src = currentDialog && currentDialog.photos.small ? currentDialog.photos.small : undefined\r\n    const dispatch = useDispatch();\r\n\r\n    const onCleanArrayHandler = () => {\r\n        dispatch(dialogsAC.cleanSelectedId())\r\n    }\r\n\r\n    const onDeleteHandler = () => {\r\n        if (userId) {\r\n            dispatch(deleteMessages(selectedMessagesId, userId));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.headerWrapper}>\r\n            {isLoading\r\n                ? <ListSubheader component=\"div\" className={classes.header}>\r\n                    <Skeleton variant=\"circle\" width={40} height={40} className={classes.avatar}/>\r\n                    <Skeleton variant=\"rect\" width={200} height={25}/>\r\n                </ListSubheader>\r\n                : <ListSubheader component=\"div\" className={classes.header}>\r\n                    {currentDialog\r\n                        ? <>\r\n                            <Avatar src={src} className={classes.avatar}/>\r\n\r\n                            <Link component={RouterLink}\r\n                                  className={classes.link}\r\n                                  to={`/users/${currentDialog.id}`}\r\n                                  variant='subtitle2'>\r\n                                {currentDialog.userName}\r\n                            </Link>\r\n\r\n                            {\r\n                                selectedMessagesId.length !== 0 &&\r\n                                <>\r\n                                    <div className={classes.messagesCount}>\r\n                                        <Typography variant='body2' color='textPrimary'>\r\n                                            {selectedMessagesId.length} messages\r\n                                        </Typography>\r\n                                        <IconButton onClick={onCleanArrayHandler} className={classes.iconClean}>\r\n                                            <CloseIcon/>\r\n                                        </IconButton>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <Tooltip title=\"Delete\" TransitionComponent={Zoom} arrow={true}>\r\n                                            <IconButton onClick={onDeleteHandler} className={classes.iconClean}>\r\n                                                <DeleteForeverIcon/>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n\r\n                                    </div>\r\n\r\n                                </>\r\n                            }\r\n\r\n                        </>\r\n                        : <Typography variant='h6'>\r\n                            Messages\r\n                        </Typography>\r\n                    }\r\n                </ListSubheader>\r\n\r\n\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogHeader;\r\n\r\n//===================== TYPE =======================\r\ntype PropsType = {\r\n    currentDialog: DialogType | null\r\n    userId: number | undefined\r\n    isLoading: boolean\r\n}\r\n\r\n//===================== STYLE ======================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n    },\r\n    headerWrapper: {\r\n        padding: 5,\r\n        borderBottom: '1px solid #ccc'\r\n    },\r\n    link: {\r\n        marginRight: 15\r\n    },\r\n    messagesCount: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginRight: 30\r\n    },\r\n    iconClean: {\r\n        padding: 5\r\n    },\r\n});","import {MessageType} from \"../../../DAL/dialogs-api\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getId} from \"../../../redux/auth-selectors\";\r\nimport {getProfileSelector} from \"../../../redux/profile-selectors\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {DATE} from \"../../../utilities/date\";\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\r\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport {dialogsAC} from \"../../../redux/dialogs-reducer\";\r\nimport {getSelectedMessagesId} from \"../../../redux/dialogs-selectors\";\r\n\r\nconst CurrentDialogMessage: React.FC<PropsType> = ({message, src}) => {\r\n    const classes = useStyles();\r\n    const [hover, setHover] = useState(false);\r\n    const myId = useSelector(getId);\r\n    const profile = useSelector(getProfileSelector);\r\n    const selectedMessagesId = useSelector(getSelectedMessagesId);\r\n    const dispatch = useDispatch();\r\n    const selected = selectedMessagesId.includes(message.id)\r\n    const onClickHandle = () => {\r\n        if (!selected) {\r\n            dispatch(dialogsAC.addSelectedId(message.id))\r\n        } else {\r\n            dispatch(dialogsAC.removeSelectedId(message.id))\r\n        }\r\n    };\r\n    const onMouseEnterHandler = () => {\r\n        setHover(true)\r\n    };\r\n    const onMouseLeaveHandler = () => {\r\n        setHover(false)\r\n    };\r\n    useEffect(() => {\r\n        dispatch(dialogsAC.cleanSelectedId())\r\n    }, [message]);\r\n\r\n    const srcFinally = (profile\r\n        ? (message.senderId === myId) ? profile.photos.small : src\r\n        : undefined) as string | undefined\r\n\r\n    const to = (message.senderId === myId) ? '/profile' : `/users/${message.senderId}`;\r\n\r\n    const icon = message.senderId === myId ? <ArrowForwardIcon/> : <ArrowBackIcon/>\r\n\r\n    return (\r\n        <ListItem button\r\n                  onClick={onClickHandle}\r\n                  selected={selected}\r\n                  className={classes.listItem}\r\n                  classes={{\r\n                      selected: classes.selected\r\n                  }}\r\n                  onMouseEnter={onMouseEnterHandler}\r\n                  onMouseLeave={onMouseLeaveHandler}\r\n        >\r\n            {((hover && !selected) || selected) && <CheckCircleIcon className={classes.checkedIcon}\r\n                                                                  color={selected ? 'inherit' : 'disabled'}\r\n                                                                  fontSize='small'/>}\r\n            <Avatar src={srcFinally} className={classes.avatar}/>\r\n            <div className={classes.messageBlock}>\r\n                <div className={classes.title}>\r\n                    <Link component={RouterLink}\r\n                          className={classes.link}\r\n                          to={to}\r\n                          variant='subtitle2'>\r\n                        {message.senderName}\r\n                    </Link>\r\n                    <Typography variant='subtitle2'\r\n                                color='textSecondary'\r\n                    >\r\n                        {DATE.dateTranslateFromAPI(message.addedAt)}\r\n                    </Typography>\r\n                </div>\r\n                <div>{message.body}</div>\r\n            </div>\r\n\r\n            <Icon className={classes.icon}>{icon}</Icon>\r\n\r\n\r\n        </ListItem>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogMessage;\r\n\r\n//========================== TYPE ============================\r\ntype PropsType = {\r\n    message: MessageType\r\n    src: string | undefined\r\n}\r\n//========================= STYLES ===========================\r\nconst useStyles = makeStyles({\r\n    listItem: {\r\n        boxSizing: 'border-box',\r\n        margin: '2px 0px',\r\n        padding: 8,\r\n        paddingLeft: 40,\r\n        position: 'relative',\r\n        display: 'flex',\r\n        alignItems: 'flex-start'\r\n    },\r\n    checkedIcon: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: 5,\r\n        transform: 'translate(0, -50%)'\r\n    },\r\n    selected: {\r\n        backgroundColor: 'red'\r\n    },\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    title: {\r\n        display: 'flex'\r\n    },\r\n    link: {\r\n        marginRight: 10\r\n    },\r\n    messageBlock: {\r\n        flexGrow: 1\r\n    },\r\n    icon: {\r\n        marginRight: 10\r\n    }\r\n});","import React from \"react\";\r\nimport {MessageType} from \"../../../DAL/dialogs-api\";\r\nimport CurrentDialogMessage from \"./CurrentDialogMessage\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getMessagesIsLoading} from \"../../../redux/dialogs-selectors\";\r\n\r\nconst SkeletonCustom: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.skeletonCustom}>\r\n            <Skeleton variant=\"circle\" width={40} height={40} className={classes.avatar}/>\r\n            <Skeleton variant=\"rect\" width='100%' height={40}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst CurrentDialogMeseges: React.FC<PropsType> = ({messages, src, userId}) => {\r\n    const messagesIsLoading = useSelector(getMessagesIsLoading);\r\n\r\n    const elements = messages && messages\r\n        .map(el => <CurrentDialogMessage message={el} src={src}/>)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                userId &&\r\n                <div>\r\n                    {\r\n                        messagesIsLoading\r\n                            ? <>\r\n                                <SkeletonCustom/>\r\n                                <SkeletonCustom/>\r\n                                <SkeletonCustom/>\r\n                                <SkeletonCustom/>\r\n                            </>\r\n                            : <>\r\n                                {elements}\r\n                            </>\r\n                    }\r\n                </div>\r\n            }\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogMeseges;\r\n\r\n//==================== TYPES ==================\r\ntype PropsType = {\r\n    messages: Array<MessageType> | null\r\n    src: string | undefined\r\n    userId: number | undefined\r\n}\r\n\r\n//========================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    skeletonCustom: {\r\n        height: 59,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        paddingLeft: 40,\r\n        paddingRight: 15\r\n\r\n    },\r\n    avatar: {\r\n        marginRight: 10\r\n    }\r\n});","import SendIcon from '@material-ui/icons/Send';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextAreaField from \"../../common/RenderTextareaField\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {reduxForm, Field, InjectedFormProps, reset} from \"redux-form\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport {sendMessage} from \"../../../redux/dialogs-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine} = props;\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    return (\r\n        <form onSubmit={handleSubmit} className={classes.form}>\r\n            <div className={classes.fieldWrapper}>\r\n                <Field name='message'\r\n                       component={RenderTextAreaField}\r\n                       validate={[shouldNotBeEmpty]}\r\n                       autoFocus={true}\r\n                       rows={1}\r\n                       className={classes.textArea}\r\n                       classes={classesField}\r\n                       label='Enter your message'\r\n                       placeholder='Enter your message'\r\n                       size='small'\r\n                />\r\n            </div>\r\n\r\n            <IconButton\r\n                type=\"submit\"\r\n                color='primary'\r\n                disabled={submitting || pristine}\r\n            >\r\n                <SendIcon/>\r\n            </IconButton>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n    dispatch(reset('send-message-from-dialog'));\r\n}\r\n\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'send-message-from-dialog',\r\n    onSubmitSuccess: afterSubmit\r\n})(Form);\r\n\r\n//============================= COMPONENT =========================================\r\nconst CurrentDialogForm: React.FC<ComponentPropsType> = ({id}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        if (id) {\r\n            dispatch(sendMessage(id, formValue.message))\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.formWrapper}>\r\n            <ReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogForm;\r\n\r\n//=============================== TYPES ================================================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    message: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {\r\n    id: number | undefined\r\n}\r\n\r\n//========================== STYLES ===================================================\r\nconst useStylesField = makeStyles({\r\n    root: {\r\n        backgroundColor: 'white',\r\n        width: '100%'\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n    formWrapper: {\r\n        backgroundColor: grey[100],\r\n        padding: 10\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    fieldWrapper: {\r\n        flexGrow: 1,\r\n        //width: '100%'\r\n    },\r\n    textArea: {\r\n        width: '100%'\r\n    }\r\n})","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getMessagesSelector} from \"../../../redux/dialogs-selectors\";\r\nimport List from \"@material-ui/core/List\";\r\nimport CurrentDialogHeader from \"./CurrentDialogHeader\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport CurrentDialogMeseges from \"./CurrentDialogMeseges\";\r\nimport CurrentDialogForm from \"./CurrentDialogForm\";\r\n\r\nconst CurrentDialog: React.FC<PropsType> = ({currentDialog, userId, isLoading}) => {\r\n    const classes = useStyles();\r\n    const messages = useSelector(getMessagesSelector);\r\n\r\n    const src = (currentDialog !== null ? currentDialog.photos.small : undefined) as string | undefined;\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <List disablePadding\r\n                subheader={\r\n                <CurrentDialogHeader currentDialog={currentDialog}\r\n                                     userId={userId}\r\n                                     isLoading={isLoading}\r\n                />\r\n            }\r\n            >\r\n                <CurrentDialogMeseges messages={messages} src={src} userId={userId}/>\r\n            </List>\r\n            <CurrentDialogForm id={userId}/>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default CurrentDialog;\r\n\r\n//========================= TYPE =================\r\ntype PropsType = {\r\n    currentDialog: DialogType | null\r\n    userId: number | undefined\r\n    isLoading: boolean\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        //padding: 15,\r\n    },\r\n    btnWrapper: {\r\n        marginBottom: 10\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport DialogsList from \"./DialogsList\";\r\nimport CurrentDialog from \"./CurrentDialog\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsLoading} from \"../../../redux/app-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport {getCurrentFriendsId, getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport {getDialogs, getMessages} from \"../../../redux/dialogs-reducer\";\r\nimport {useParams} from \"react-router\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\n\r\n\r\nconst Dialogs: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const isLoading = useSelector(getIsLoading);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n    const currentFriendsId = useSelector(getCurrentFriendsId);\r\n\r\n    let {userId} = useParams();\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs())\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            dispatch(getMessages(userId));\r\n        }\r\n    }, [userId]);\r\n\r\n\r\n    const currentDialog = (dialogs && userId) ? dialogs.find(el => el.id === +userId) as DialogType : null;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (!isLoading || dialogs) &&\r\n                <div className={classes.root}>\r\n                    <div className={classes.firstColumn}>\r\n                        <DialogsList dialogs={dialogs}/>\r\n                    </div>\r\n                    <div className={classes.lastColumn}>\r\n                        <CurrentDialog currentDialog={currentDialog}\r\n                                       userId={userId}\r\n                                       isLoading={isLoading}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default withAuthRedirect(Dialogs);\r\n\r\n//========================== STYLES =============================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\"\r\n\r\n    },\r\n    firstColumn: {\r\n        flexBasis: 300,\r\n        marginRight: 15,\r\n    },\r\n    lastColumn: {\r\n        flexGrow: 1\r\n    },\r\n});"],"sourceRoot":""}