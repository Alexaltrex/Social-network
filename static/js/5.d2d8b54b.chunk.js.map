{"version":3,"sources":["Components/Main/Dialogs/DialogsListItem.tsx","Components/Main/Dialogs/DialogsList.tsx","Components/Main/Dialogs/CurrentDialogHeader.tsx","Components/Main/Dialogs/CurrentDialogMessageItem.tsx","Components/Main/Dialogs/CurrentDialogMessages.tsx","Components/Main/Dialogs/CurrentDialogForm.tsx","Components/Main/Dialogs/CurrentDialog.tsx","Components/Main/Dialogs/DialogsSidebar.tsx","Components/Main/Dialogs/Dialogs.tsx"],"names":["ListItemLink","primary","secondary","to","src","dialog","classes","useStyles","selected","useDispatch","useParams","userId","id","renderLink","React","useMemo","forwardRef","itemProps","ref","secondaryTransformed","DATE","dateTranslateFromAPI","className","item","ListItem","button","listItem","component","onClick","ListItemAvatar","Avatar","avatar","Typography","color","variant","ListItemText","DialogsListItem","userName","lastDialogActivityDate","photos","small","undefined","makeStyles","borderTop","borderBottom","width","height","marginRight","padding","fontSize","fontStyle","SkeletonListItem","skeletonWrapper","Skeleton","DialogsList","dialogs","dialogsIsLoading","useSelector","getDialogsIsLoading","currentDialogsSidebarItem","getCurrentDialogsSidebarItem","deletedMessages","getDeletedMessages","spamMessages","getSpamMessages","dialogsElements","map","key","dialogsDeletedElements","dialogsSpamElements","skeletonElements","i","push","Card","card","elevation","DialogsSidebarItemEnum","all","List","disablePadding","deleted","length","emptyDialogs","spam","btnWrapper","marginBottom","display","alignItems","CurrentDialogHeader","currentDialog","selectedMessages","getSelectedMessages","selectedDeletedMessages","getSelectedDeletedMessages","loading","getLoading","deletedMessagesItem","find","el","currentDeletedDialog","dispatch","onCleanArrayHandler","dialogsAC","cleanSelectedMessages","cleanSelectedDeletedMessages","headerWrapper","ListSubheader","header","Link","RouterLink","link","messagesCount","IconButton","iconClean","disabled","iconButtonWrapper","Tooltip","title","TransitionComponent","Zoom","arrow","deleteMessages","restoreMessages","CurrentDialogMessageItem","message","useState","hover","setHover","myId","getId","profile","getProfileSelector","messagesIsDeleting","getMessagesIsDeleting","srcFinally","senderId","icon","listItemWrapper","removeFromSelectedMessages","addToSelectedMessages","removeFromSelectedDeletedMessages","addToSelectedDeletedMessages","onMouseEnter","onMouseLeave","checkedIcon","messageBlock","senderName","addedAt","body","Icon","CircularPreloader","size","style","position","boxSizing","margin","paddingLeft","top","left","transform","backgroundColor","flexGrow","CurrentDialogMessages","messages","messagesIsLoading","getMessagesIsLoading","messageIsSending","getMessageIsSending","useEffect","elements","elementsDeleted","circularPreloaderWrapper","emptyMessages","ReduxForm","reduxForm","form","onSubmitSuccess","result","reset","props","handleSubmit","submitting","pristine","classesField","useStylesField","label","onSubmit","fieldWrapper","Field","name","RenderTextAreaField","validate","shouldNotBeEmpty","autoFocus","rows","textArea","placeholder","type","CurrentDialogForm","formWrapper","formValue","sendMessage","root","grey","CurrentDialog","getMessagesSelector","subheader","skeleton","borderRadius","DialogsSidebar","Tabs","indicator","orientation","value","onChange","event","newValue","setCurrentDialogsSidebarItem","tabs","Tab","wrapper","tabRoot","labelIcon","borderLeft","right","flexDirection","justifyContent","textTransform","indigo","minWidth","minHeight","withAuthRedirect","isLoading","getIsLoading","getDialogsSelector","getDialogs","getMessages","setMessages","firstColumn","secondColumn","lastColumn","flexBasis","flexShrink"],"mappings":"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","file":"static/js/5.d2d8b54b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps, useParams} from 'react-router-dom';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {DATE} from \"../../../utilities/date\";\r\n\r\nconst ListItemLink: React.FC<ListItemLinkPropsType> = ({primary, secondary, to, src, dialog}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    let {userId} = useParams();\r\n    const selected = +userId === dialog.id;\r\n\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    const onClickHandle = () => {\r\n        //dispatch(dialogsAC.setCurrentFriendsId(dialog.id))\r\n    };\r\n\r\n    const secondaryTransformed = DATE.dateTranslateFromAPI(secondary)\r\n\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem button\r\n                      className={classes.listItem}\r\n                      component={renderLink}\r\n                      selected={selected}\r\n                      onClick={onClickHandle}>\r\n                <ListItemAvatar>\r\n                    <Avatar src={src} className={classes.avatar}/>\r\n                </ListItemAvatar>\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}\r\n                                  secondary={secondaryTransformed}\r\n                                  classes={{\r\n                                      primary: classes.primary,\r\n                                      secondary: classes.secondary\r\n                                  }}\r\n                    />\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\n\r\nconst DialogsListItem: React.FC<PropsType> = ({dialog}) => {\r\n\r\n    return (\r\n        <ListItemLink\r\n            to={`/dialogs/${dialog.id}`}\r\n            primary={dialog.userName}\r\n            secondary={dialog.lastDialogActivityDate}\r\n            src={dialog.photos.small ? dialog.photos.small : undefined}\r\n            dialog={dialog}\r\n        >\r\n        </ListItemLink>\r\n    )\r\n};\r\nexport default DialogsListItem;\r\n\r\n//===================== TYPE =======================\r\ntype ListItemLinkPropsType = {\r\n    primary: string\r\n    secondary: string\r\n    to: string\r\n    src: string | undefined\r\n    dialog: DialogType\r\n}\r\n\r\ntype PropsType = {\r\n    dialog: DialogType\r\n}\r\n\r\n//===================== STYLE ======================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        borderTop: '1px solid #ccc',\r\n        '&:last-child': {\r\n            borderBottom: '1px solid #ccc'\r\n        },\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50,\r\n        marginRight: 10\r\n    },\r\n    listItem: {\r\n        padding: '5px 10px'\r\n    },\r\n    secondary: {\r\n        fontSize: '0.75rem',\r\n        fontStyle: 'italic'\r\n    },\r\n    primary: {\r\n        fontSize: '0.9rem',\r\n    }\r\n});","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport List from \"@material-ui/core/List\";\r\nimport DialogsListItem from \"./DialogsListItem\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentDialogsSidebarItem,\r\n    getDeletedMessages,\r\n    getDialogsIsLoading,\r\n    getSpamMessages\r\n} from \"../../../redux/dialogs-selectors\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {DialogsSidebarItemEnum} from \"../../../types/types\";\r\n\r\nconst SkeletonListItem = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.skeletonWrapper}>\r\n            <Skeleton variant=\"circle\" width={40} height={40} className={classes.avatar}/>\r\n            <Skeleton variant=\"rect\" width={200} height={45}/>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst DialogsList: React.FC<PropsType> = ({dialogs}) => {\r\n    const classes = useStyles();\r\n    const dialogsIsLoading = useSelector(getDialogsIsLoading);\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n    const deletedMessages = useSelector(getDeletedMessages);\r\n    const spamMessages = useSelector(getSpamMessages);\r\n\r\n    const dialogsElements = dialogs && dialogs\r\n        .map(item => <DialogsListItem key={item.id}\r\n                                           dialog={item}/>);\r\n\r\n    const dialogsDeletedElements = deletedMessages\r\n        .map(item => <DialogsListItem key={item.dialog.id}\r\n                                           dialog={item.dialog}/>);\r\n\r\n    const dialogsSpamElements = spamMessages\r\n        .map(item => <DialogsListItem key={item.dialog.id}\r\n                                      dialog={item.dialog}/>);\r\n\r\n    const skeletonElements = [] as Array<React.ReactElement>;\r\n    for (let i = 0; i < 9; i++) {\r\n        skeletonElements.push(<SkeletonListItem key={i}/>)\r\n    }\r\n\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.all &&\r\n                <>\r\n                    {dialogsIsLoading\r\n                        ? <div>\r\n                            {skeletonElements}\r\n                        </div>\r\n                        : <List disablePadding>\r\n                            {dialogsElements}\r\n                        </List>\r\n                    }\r\n                </>\r\n            }\r\n\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted &&\r\n                <>\r\n                    {deletedMessages.length === 0\r\n                        ? <div className={classes.emptyDialogs}>\r\n                            <Typography variant='subtitle1' color='primary'>\r\n                                There are no deleted dialogs\r\n                            </Typography>\r\n\r\n                        </div>\r\n                        : <List disablePadding>\r\n                            {dialogsDeletedElements}\r\n                        </List>\r\n                    }\r\n                </>\r\n            }\r\n\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.spam &&\r\n                <>\r\n                    {spamMessages.length === 0\r\n                        ? <div className={classes.emptyDialogs}>\r\n                            <Typography variant='subtitle1' color='primary'>\r\n                                There are no spam dialogs\r\n                            </Typography>\r\n\r\n                        </div>\r\n                        : <List disablePadding>\r\n                            {dialogsSpamElements}\r\n                        </List>\r\n                    }\r\n                </>\r\n            }\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default DialogsList;\r\n\r\n//============================ TYPE ================================================\r\ntype PropsType = {\r\n    dialogs: null | Array<DialogType>\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {},\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    btnWrapper: {\r\n        marginBottom: 10\r\n    },\r\n    skeletonWrapper: {\r\n        padding: '0 16px',\r\n        height: 72,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    emptyDialogs: {\r\n        padding: '8px 16px'\r\n    }\r\n});","import React from \"react\";\r\nimport {ListSubheader} from \"@material-ui/core\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentDialogsSidebarItem,\r\n    getDeletedMessages,\r\n    getDialogsIsLoading, getLoading, getSelectedDeletedMessages, getSelectedMessages,\r\n} from \"../../../redux/dialogs-selectors\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {deleteMessages, dialogsAC, restoreMessages, signMessageAsSpam} from \"../../../redux/dialogs-reducer\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport RestoreFromTrashIcon from '@material-ui/icons/RestoreFromTrash';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport {DialogsSidebarItemEnum} from \"../../../types/types\";\r\n\r\nconst CurrentDialogHeader: React.FC<PropsType> = ({currentDialog, userId}) => {\r\n    const classes = useStyles();\r\n    const selectedMessages = useSelector(getSelectedMessages);\r\n    const selectedDeletedMessages = useSelector(getSelectedDeletedMessages);\r\n    const dialogsIsLoading = useSelector(getDialogsIsLoading);\r\n    const loading = useSelector(getLoading);\r\n    const deletedMessages = useSelector(getDeletedMessages);\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n\r\n    const to = !loading && currentDialog ? `/users/${currentDialog.id}` : '#';\r\n    const deletedMessagesItem = userId && deletedMessages\r\n        .find(el => +el.dialog.id === +userId);\r\n    const currentDeletedDialog = deletedMessagesItem && deletedMessagesItem.dialog;\r\n\r\n    let src;\r\n    if (currentDialogsSidebarItem === DialogsSidebarItemEnum.all) {\r\n        src = currentDialog && currentDialog.photos.small ? currentDialog.photos.small : undefined\r\n    } else if (currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted) {\r\n        src = currentDeletedDialog && currentDeletedDialog.photos.small ? currentDeletedDialog.photos.small : undefined\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onCleanArrayHandler = () => {\r\n        if (currentDialogsSidebarItem === DialogsSidebarItemEnum.all) {\r\n            dispatch(dialogsAC.cleanSelectedMessages())\r\n        } else if (currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted) {\r\n            dispatch(dialogsAC.cleanSelectedDeletedMessages())\r\n        }\r\n    };\r\n\r\n    const onDeleteHandler = () => {\r\n        if (userId && currentDialog) {\r\n            dispatch(deleteMessages(selectedMessages, currentDialog));\r\n        }\r\n    };\r\n\r\n    const onSpamHandler = () => {\r\n        if (userId && currentDialog) {\r\n            dispatch(signMessageAsSpam(selectedMessages, currentDialog));\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const onRestoreHandler = () => {\r\n        if (userId && currentDialog) {\r\n            dispatch(restoreMessages(selectedDeletedMessages));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.headerWrapper}>\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.all &&\r\n                <>\r\n                    {dialogsIsLoading\r\n                        ? <ListSubheader component=\"div\" className={classes.header}>\r\n                            <Skeleton variant=\"circle\" width={40} height={40} className={classes.avatar}/>\r\n                            <Skeleton variant=\"rect\" width={200} height={25}/>\r\n                        </ListSubheader>\r\n                        : <ListSubheader component=\"div\" className={classes.header}>\r\n                            {currentDialog\r\n                                ? <>\r\n                                    <Avatar src={src} className={classes.avatar}/>\r\n\r\n                                    <Link component={RouterLink}\r\n                                          className={classes.link}\r\n                                          to={to}\r\n                                          variant='subtitle2'>\r\n                                        {currentDialog.userName}\r\n                                    </Link>\r\n\r\n                                    {\r\n                                        selectedMessages.length !== 0 &&\r\n                                        <>\r\n                                            <div className={classes.messagesCount}>\r\n                                                <Typography variant='body2' color='textPrimary'>\r\n                                                    {selectedMessages.length} messages\r\n                                                </Typography>\r\n                                                <IconButton onClick={onCleanArrayHandler}\r\n                                                            className={classes.iconClean}\r\n                                                            disabled={loading}\r\n                                                >\r\n                                                    <CloseIcon/>\r\n                                                </IconButton>\r\n                                            </div>\r\n\r\n                                            <div className={classes.iconButtonWrapper}>\r\n                                                <Tooltip title=\"Delete\" TransitionComponent={Zoom} arrow={true}>\r\n                                                    <IconButton onClick={onDeleteHandler}\r\n                                                                className={classes.iconClean}\r\n                                                                disabled={loading}\r\n                                                    >\r\n                                                        <DeleteForeverIcon/>\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </div>\r\n\r\n                                            {/*<div>*/}\r\n                                            {/*    <Tooltip title=\"Spam\" TransitionComponent={Zoom} arrow={true}>*/}\r\n                                            {/*        <IconButton onClick={onSpamHandler}*/}\r\n                                            {/*                    className={classes.iconClean}*/}\r\n                                            {/*                    disabled={loading}*/}\r\n                                            {/*        >*/}\r\n                                            {/*            <WarningIcon/>*/}\r\n                                            {/*        </IconButton>*/}\r\n                                            {/*    </Tooltip>*/}\r\n                                            {/*</div>*/}\r\n\r\n                                        </>\r\n                                    }\r\n\r\n                                </>\r\n                                : <Typography variant='subtitle1' color='primary'>\r\n                                    Select a dialog\r\n                                </Typography>\r\n                            }\r\n                        </ListSubheader>\r\n                    }\r\n                </>\r\n            }\r\n\r\n\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted &&\r\n                <ListSubheader component=\"div\" className={classes.header}>\r\n                    {\r\n                        userId && currentDeletedDialog\r\n                            ? <>\r\n                                <Avatar src={src} className={classes.avatar}/>\r\n\r\n                                <Link component={RouterLink}\r\n                                      className={classes.link}\r\n                                      to={to}\r\n                                      variant='subtitle2'>\r\n                                    {currentDeletedDialog.userName}\r\n                                </Link>\r\n\r\n                                {\r\n                                    selectedDeletedMessages.length !== 0 &&\r\n                                    <>\r\n                                        <div className={classes.messagesCount}>\r\n                                            <Typography variant='body2' color='textPrimary'>\r\n                                                {selectedDeletedMessages.length} messages\r\n                                            </Typography>\r\n                                            <IconButton onClick={onCleanArrayHandler}\r\n                                                        className={classes.iconClean}\r\n                                                        disabled={loading}\r\n                                            >\r\n                                                <CloseIcon/>\r\n                                            </IconButton>\r\n                                        </div>\r\n\r\n                                        <div className={classes.iconButtonWrapper}>\r\n                                            <Tooltip title=\"Restore\" TransitionComponent={Zoom} arrow={true}>\r\n                                                <IconButton onClick={onRestoreHandler}\r\n                                                            className={classes.iconClean}\r\n                                                            disabled={loading}\r\n                                                >\r\n                                                    <RestoreFromTrashIcon/>\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </div>\r\n\r\n                                    </>\r\n                                }\r\n\r\n                            </>\r\n                            : <Typography variant='subtitle1' color='primary'>\r\n                                Select deleted dialog\r\n                            </Typography>\r\n                    }\r\n                </ListSubheader>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogHeader;\r\n\r\n//===================== TYPE =======================\r\ntype PropsType = {\r\n    currentDialog: DialogType | null\r\n    userId: number | undefined\r\n}\r\n\r\n//===================== STYLE ======================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n    },\r\n    headerWrapper: {\r\n        padding: 5,\r\n        borderBottom: '1px solid #ccc',\r\n        //backgroundColor: indigo[100]\r\n    },\r\n    link: {\r\n        marginRight: 15\r\n    },\r\n    messagesCount: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginRight: 30\r\n    },\r\n    iconClean: {\r\n        padding: 5\r\n    },\r\n    iconButtonWrapper: {\r\n        marginRight: 10\r\n    }\r\n});","import {MessageType} from \"../../../DAL/dialogs-api\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getId} from \"../../../redux/auth-selectors\";\r\nimport {getProfileSelector} from \"../../../redux/profile-selectors\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {DATE} from \"../../../utilities/date\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport {dialogsAC} from \"../../../redux/dialogs-reducer\";\r\nimport {\r\n    getCurrentDialogsSidebarItem,\r\n    getMessagesIsDeleting, getSelectedDeletedMessages,\r\n    getSelectedMessages\r\n} from \"../../../redux/dialogs-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport {DialogsSidebarItemEnum} from \"../../../types/types\";\r\n\r\nconst CurrentDialogMessageItem: React.FC<PropsType> = ({message, src}) => {\r\n    const classes = useStyles();\r\n    const [hover, setHover] = useState(false);\r\n    const myId = useSelector(getId);\r\n    const profile = useSelector(getProfileSelector);\r\n    const selectedMessages = useSelector(getSelectedMessages);\r\n    const selectedDeletedMessages = useSelector(getSelectedDeletedMessages);\r\n    const messagesIsDeleting = useSelector(getMessagesIsDeleting);\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n\r\n    const dispatch = useDispatch();\r\n    let selected: boolean;\r\n    if (currentDialogsSidebarItem === DialogsSidebarItemEnum.all) {\r\n        selected = !!selectedMessages.find(el => el.id === message.id);\r\n    } else if (currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted) {\r\n        selected = !!selectedDeletedMessages.find(el => el.id === message.id);\r\n    } else {\r\n        selected = false\r\n    }\r\n\r\n\r\n    const onClickHandle = () => {\r\n        if (currentDialogsSidebarItem === DialogsSidebarItemEnum.all) {\r\n            if (!selected) {\r\n                dispatch(dialogsAC.addToSelectedMessages(message))\r\n            } else {\r\n                dispatch(dialogsAC.removeFromSelectedMessages(message))\r\n            }\r\n        } else if (currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted) {\r\n            if (!selected) {\r\n                dispatch(dialogsAC.addToSelectedDeletedMessages(message))\r\n            } else {\r\n                dispatch(dialogsAC.removeFromSelectedDeletedMessages(message))\r\n            }\r\n        }\r\n\r\n    };\r\n    const onMouseEnterHandler = () => {\r\n        setHover(true)\r\n    };\r\n    const onMouseLeaveHandler = () => {\r\n        setHover(false)\r\n    };\r\n\r\n    const srcFinally = (profile\r\n        ? (message.senderId === myId) ? profile.photos.small : src\r\n        : undefined) as string | undefined\r\n\r\n    const to = (message.senderId === myId) ? '/profile' : `/users/${message.senderId}`;\r\n\r\n    const icon = message.senderId === myId ? <ArrowForwardIcon/> : <ArrowBackIcon/>\r\n\r\n    return (\r\n        <div className={classes.listItemWrapper}>\r\n            <ListItem button\r\n                      onClick={onClickHandle}\r\n                      selected={selected}\r\n                      className={classes.listItem}\r\n                      classes={{\r\n                          selected: classes.selected\r\n                      }}\r\n                      onMouseEnter={onMouseEnterHandler}\r\n                      onMouseLeave={onMouseLeaveHandler}\r\n            >\r\n                {((hover && !selected) || selected) && <CheckCircleIcon className={classes.checkedIcon}\r\n                                                                        color={selected ? 'inherit' : 'disabled'}\r\n                                                                        fontSize='small'/>}\r\n                <Avatar src={srcFinally} className={classes.avatar}/>\r\n                <div className={classes.messageBlock}>\r\n                    <div className={classes.title}>\r\n                        <Link component={RouterLink}\r\n                              className={classes.link}\r\n                              to={to}\r\n                              variant='subtitle2'>\r\n                            {message.senderName}\r\n                        </Link>\r\n                        <Typography variant='subtitle2'\r\n                                    color='textSecondary'\r\n                        >\r\n                            {DATE.dateTranslateFromAPI(message.addedAt)}\r\n                        </Typography>\r\n                    </div>\r\n                    <div>{message.body}</div>\r\n                </div>\r\n\r\n                <Icon className={classes.icon}>{icon}</Icon>\r\n\r\n            </ListItem>\r\n\r\n            {\r\n                messagesIsDeleting && selectedMessages.find(el => el.id === message.id) &&\r\n                <CircularPreloader size={50} style='absolute'/>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogMessageItem;\r\n\r\n//========================== TYPE ============================\r\ntype PropsType = {\r\n    message: MessageType\r\n    src: string | undefined\r\n}\r\n//========================= STYLES ===========================\r\nconst useStyles = makeStyles({\r\n    listItemWrapper: {\r\n        position: 'relative'\r\n    },\r\n    listItem: {\r\n        boxSizing: 'border-box',\r\n        margin: '2px 0px',\r\n        padding: 8,\r\n        paddingLeft: 40,\r\n        position: 'relative',\r\n        display: 'flex',\r\n        alignItems: 'flex-start'\r\n    },\r\n    checkedIcon: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: 5,\r\n        transform: 'translate(0, -50%)'\r\n    },\r\n    selected: {\r\n        backgroundColor: 'red'\r\n    },\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    title: {\r\n        display: 'flex'\r\n    },\r\n    link: {\r\n        marginRight: 10\r\n    },\r\n    messageBlock: {\r\n        flexGrow: 1\r\n    },\r\n    icon: {\r\n        marginRight: 10\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {MessageType} from \"../../../DAL/dialogs-api\";\r\nimport CurrentDialogMessageItem from \"./CurrentDialogMessageItem\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentDialogsSidebarItem, getDeletedMessages,\r\n    getMessageIsSending,\r\n    getMessagesIsDeleting,\r\n    getMessagesIsLoading\r\n} from \"../../../redux/dialogs-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport {dialogsAC} from \"../../../redux/dialogs-reducer\";\r\nimport {DialogsSidebarItemEnum} from \"../../../types/types\";\r\n\r\nconst CurrentDialogMessages: React.FC<PropsType> = ({messages, src, userId}) => {\r\n    const classes = useStyles();\r\n\r\n    const messagesIsLoading = useSelector(getMessagesIsLoading);\r\n    const messageIsSending = useSelector(getMessageIsSending);\r\n    const messagesIsDeleting = useSelector(getMessagesIsDeleting);\r\n    const deletedMessages = useSelector(getDeletedMessages);\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    // очистка массива выделенных сообщений при первой отрисове или при изменении диалога\r\n    useEffect(() => {\r\n        dispatch(dialogsAC.cleanSelectedMessages())\r\n    }, [userId]);\r\n\r\n    const elements = messages && messages\r\n        .map(el => <CurrentDialogMessageItem key={el.id} message={el} src={src}/>);\r\n\r\n    const deletedMessagesItem = !!userId && deletedMessages\r\n        .find(el => el.dialog.id === +userId)\r\n\r\n    const elementsDeleted = deletedMessagesItem && deletedMessagesItem\r\n        .messages\r\n        .map(el => <CurrentDialogMessageItem key={el.id} message={el} src={src}/>);\r\n\r\n    // 1\r\n    // сообщение удаляется - messagesIsDeleting\r\n    // показывать messages\r\n    // в удаляемых сообщениях поверх компонента показать CircularPreloader\r\n\r\n    // 2\r\n    // сообщение добавляется - messageIsSending\r\n    // messages есть или нет (если первое сообщение)\r\n    // messages есть - показывать messages, messages нет - ничего не показывать\r\n\r\n    // 3\r\n    // все сообщения загружаются или перегружаются (при переключении юзера) - messagesIsLoading\r\n    // загружаются - messages нет, перегружаются - messages есть\r\n    // вместо сообщений показывать CircularPreloader\r\n\r\n    // 4\r\n    // остальные случаи, когда ничего не загружается - !messagesIsLoading && !messageIsSending && !messagesIsDeleting\r\n    // messages есть (все загрузилось, удалилось, отправилось) или нет (диалог не выбран)\r\n    // messages есть - показывать messages, messages нет - ничего не показывать\r\n\r\n    // во время загрузки, отправки и удаления блокировать форму добавления сообщений и боковую панель\r\n\r\n    return (\r\n        <>\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.all &&\r\n                <>\r\n                    {\r\n                        messagesIsDeleting &&\r\n                        <>\r\n                            {elements}\r\n                        </>\r\n                    }\r\n\r\n                    {\r\n                        messageIsSending &&\r\n                        <>\r\n                            {\r\n                                messages\r\n                                    ? <>\r\n                                        {elements}\r\n                                    </>\r\n                                    : null\r\n                            }\r\n                        </>\r\n                    }\r\n\r\n                    {\r\n                        messagesIsLoading &&\r\n                        <div className={classes.circularPreloaderWrapper}>\r\n                            <CircularPreloader size={36}/>\r\n                        </div>\r\n                    }\r\n\r\n                    {\r\n                        !messagesIsLoading && !messageIsSending && !messagesIsDeleting &&\r\n                        <>\r\n                            {\r\n                                messages\r\n                                    ? <>\r\n                                        {elements}\r\n                                    </>\r\n                                    : null\r\n                            }\r\n                        </>\r\n                    }\r\n\r\n                </>\r\n            }\r\n\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted &&\r\n                deletedMessagesItem &&\r\n                <>\r\n                    {elementsDeleted}\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogMessages;\r\n\r\n//==================== TYPES ==================\r\ntype PropsType = {\r\n    messages: Array<MessageType> | null\r\n    src: string | undefined\r\n    userId: number | undefined\r\n}\r\n\r\n//========================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    circularPreloaderWrapper: {\r\n        margin: '10px 0'\r\n    },\r\n    emptyMessages: {\r\n        padding: '8px 16px'\r\n    }\r\n});","import SendIcon from '@material-ui/icons/Send';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextAreaField from \"../../common/RenderTextareaField\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {reduxForm, Field, InjectedFormProps, reset} from \"redux-form\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport {sendMessage} from \"../../../redux/dialogs-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getLoading,\r\n    getMessageIsSending,\r\n} from \"../../../redux/dialogs-selectors\";\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, loading, messageIsSending} = props;\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    const label = messageIsSending ? 'message is sent...' : 'Enter your message'\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={classes.form}>\r\n            <div className={classes.fieldWrapper}>\r\n                <Field name='message'\r\n                       component={RenderTextAreaField}\r\n                       validate={[shouldNotBeEmpty]}\r\n                       autoFocus={true}\r\n                       rows={1}\r\n                       className={classes.textArea}\r\n                       classes={classesField}\r\n                       label={label}\r\n                       placeholder='Enter your message'\r\n                       size='small'\r\n                />\r\n            </div>\r\n\r\n            <IconButton\r\n                type=\"submit\"\r\n                color='primary'\r\n                disabled={submitting || pristine || loading}\r\n            >\r\n                <SendIcon/>\r\n            </IconButton>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n    dispatch(reset('send-message-from-dialog'));\r\n}\r\n\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'send-message-from-dialog',\r\n    onSubmitSuccess: afterSubmit\r\n})(Form);\r\n\r\n//============================= COMPONENT =========================================\r\nconst CurrentDialogForm: React.FC<ComponentPropsType> = ({id}) => {\r\n    const classes = useStyles();\r\n    const messageIsSending = useSelector(getMessageIsSending);\r\n    const loading = useSelector(getLoading);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        if (id) {\r\n            dispatch(sendMessage(id, formValue.message))\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.formWrapper}>\r\n            <ReduxForm onSubmit={onSubmit}\r\n                       messageIsSending={messageIsSending}\r\n                       loading={loading}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentDialogForm;\r\n\r\n//=============================== TYPES ================================================\r\ntype OwnPropsType = {\r\n    loading: boolean\r\n    messageIsSending: boolean\r\n}\r\nexport type FormValuesType = {\r\n    message: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {\r\n    id: number | undefined\r\n}\r\n\r\n//========================== STYLES ===================================================\r\nconst useStylesField = makeStyles({\r\n    root: {\r\n        backgroundColor: 'white',\r\n        width: '100%'\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n    formWrapper: {\r\n        backgroundColor: grey[100],\r\n        padding: 10,\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    fieldWrapper: {\r\n        flexGrow: 1,\r\n        marginRight: 5\r\n        //width: '100%'\r\n    },\r\n    textArea: {\r\n        width: '100%',\r\n\r\n    }\r\n})","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, Typography} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getCurrentDialogsSidebarItem, getDeletedMessages, getMessagesSelector} from \"../../../redux/dialogs-selectors\";\r\nimport List from \"@material-ui/core/List\";\r\nimport CurrentDialogHeader from \"./CurrentDialogHeader\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport CurrentDialogMessages from \"./CurrentDialogMessages\";\r\nimport CurrentDialogForm from \"./CurrentDialogForm\";\r\nimport {DialogsSidebarItemEnum} from \"../../../types/types\";\r\n\r\nconst CurrentDialog: React.FC<PropsType> = ({currentDialog, userId}) => {\r\n    const classes = useStyles();\r\n    const messages = useSelector(getMessagesSelector);\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n    const deletedMessages = useSelector(getDeletedMessages);\r\n\r\n\r\n    const src = (currentDialog !== null ? currentDialog.photos.small : undefined) as string | undefined;\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            { currentDialogsSidebarItem === DialogsSidebarItemEnum.all ||\r\n            currentDialogsSidebarItem === DialogsSidebarItemEnum.deleted && deletedMessages.length\r\n                ? <List disablePadding\r\n                      subheader={\r\n                          <CurrentDialogHeader currentDialog={currentDialog}\r\n                                               userId={userId}\r\n                          />\r\n                      }\r\n                >\r\n                    <CurrentDialogMessages messages={messages} src={src} userId={userId}/>\r\n                </List>\r\n                : <div className={classes.emptyMessages}>\r\n                    <Typography variant='subtitle1' color='primary'>\r\n                        There ara no deleted messages\r\n                    </Typography>\r\n\r\n                </div>\r\n            }\r\n\r\n\r\n            {\r\n                currentDialogsSidebarItem === DialogsSidebarItemEnum.all && userId &&\r\n                <CurrentDialogForm id={userId}/>\r\n            }\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default CurrentDialog;\r\n\r\n//========================= TYPE =================\r\ntype PropsType = {\r\n    currentDialog: DialogType | null\r\n    userId: number | undefined\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        //padding: 15,\r\n    },\r\n    btnWrapper: {\r\n        marginBottom: 10\r\n    },\r\n    skeleton: {\r\n        borderRadius: 4\r\n    },\r\n    emptyMessages: {\r\n        padding: '8px 16px'\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentDialogsSidebarItem, getLoading} from \"../../../redux/dialogs-selectors\";\r\nimport {dialogsAC} from \"../../../redux/dialogs-reducer\";\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogsSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentDialogsSidebarItem = useSelector(getCurrentDialogsSidebarItem);\r\n    const loading = useSelector(getLoading);\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandle = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(dialogsAC.setCurrentDialogsSidebarItem(newValue));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Tabs\r\n                classes={{\r\n                    indicator: classes.indicator\r\n                }}\r\n                orientation=\"vertical\"\r\n                value={currentDialogsSidebarItem}\r\n                onChange={onChangeHandle}\r\n                className={classes.tabs}\r\n            >\r\n\r\n                <Tab label=\"All\"\r\n                     component={RouterLink}\r\n                     to='/dialogs'\r\n                     disabled={loading}\r\n                     icon={<ChatIcon className={classes.icon}/>}\r\n                     classes={{\r\n                         wrapper: classes.wrapper,\r\n                         selected: classes.selected,\r\n                         root: classes.tabRoot,\r\n                         labelIcon: classes.labelIcon\r\n                     }}/>\r\n\r\n                <Tab label=\"Deleted\"\r\n                     component={RouterLink}\r\n                     to='/dialogs'\r\n                     disabled={loading}\r\n                     icon={<DeleteForeverIcon className={classes.icon}/>}\r\n                     classes={{\r\n                         wrapper: classes.wrapper,\r\n                         selected: classes.selected,\r\n                         root: classes.tabRoot,\r\n                         labelIcon: classes.labelIcon\r\n                     }}/>\r\n\r\n                {/*<Tab label=\"Spam\"*/}\r\n                {/*     component={RouterLink}*/}\r\n                {/*     to='/dialogs'*/}\r\n                {/*     disabled={loading}*/}\r\n                {/*     icon={<WarningIcon className={classes.icon}/>}*/}\r\n                {/*     classes={{*/}\r\n                {/*         wrapper: classes.wrapper,*/}\r\n                {/*         selected: classes.selected,*/}\r\n                {/*         root: classes.tabRoot,*/}\r\n                {/*         labelIcon: classes.labelIcon*/}\r\n                {/*     }}/>*/}\r\n\r\n            </Tabs>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default DialogsSidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid #ccc`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none',\r\n        '& > *:first-child': {\r\n            marginBottom: '0!important'\r\n        }\r\n    },\r\n    icon: {\r\n        margin: '0 10px',\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0,\r\n        minWidth: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport DialogsList from \"./DialogsList\";\r\nimport CurrentDialog from \"./CurrentDialog\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsLoading} from \"../../../redux/app-selectors\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport {dialogsAC, getDialogs, getMessages} from \"../../../redux/dialogs-reducer\";\r\nimport {useParams} from \"react-router\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport DialogsSidebar from \"./DialogsSidebar\";\r\n\r\nconst Dialogs: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const isLoading = useSelector(getIsLoading);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n\r\n    let {userId} = useParams();\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs())\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            dispatch(getMessages(userId));\r\n        }\r\n        return () => {\r\n            dispatch(dialogsAC.setMessages(null))\r\n        }\r\n    }, [userId]);\r\n\r\n    const currentDialog = (dialogs && userId) ? dialogs.find(el => el.id === +userId) as DialogType : null;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (!isLoading || dialogs) &&\r\n                <div className={classes.root}>\r\n\r\n                    <div className={classes.firstColumn}>\r\n                        <DialogsList dialogs={dialogs}/>\r\n                    </div>\r\n\r\n                    <div className={classes.secondColumn}>\r\n                        <CurrentDialog currentDialog={currentDialog}\r\n                                       userId={userId}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={classes.lastColumn}>\r\n                        <DialogsSidebar/>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default withAuthRedirect(Dialogs);\r\n\r\n//========================== STYLES =============================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\"\r\n    },\r\n    firstColumn: {\r\n        flexBasis: 230,\r\n        flexShrink: 0,\r\n        marginRight: 10,\r\n    },\r\n    secondColumn: {\r\n        flexGrow: 1,\r\n        marginRight: 10,\r\n    },\r\n    lastColumn: {\r\n        flexBasis: 120,\r\n        flexShrink: 0,\r\n    },\r\n});"],"sourceRoot":""}