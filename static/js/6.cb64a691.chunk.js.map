{"version":3,"sources":["Components/Main/Profile/ProfileAvatar.tsx","Components/Main/Profile/ProfileStatusForm.tsx","Components/common/LinearPreloader.tsx","Components/Main/Profile/ProfileStatus.tsx","Components/common/BlockTitle.tsx","Components/common/BlockField.tsx","Components/Main/Profile/ProfileInfo.tsx","Components/Main/Profile/ProfileInfoForm.tsx","Components/Main/Profile/ProfileInfoFormSidebar.tsx","Components/Main/Profile/ProfileFriendsItem.tsx","Components/Main/Profile/ProfileFriends.tsx","Components/Main/Profile/MyPosts.tsx","hooks/hooks.js","Components/Main/Profile/MyPost.tsx","Components/Main/Profile/Profile.tsx"],"names":["ProfileAvatar","props","isOwner","userId","profile","followed","classes","useStyles","useState","onAvatarHover","setOnAvatarHover","React","openSendMessageForm","setOpenSendMessageForm","avatarIsLoading","useSelector","getAvatarIsLoading","isFollowing","getIsFollowing","editMode","getEditMode","followingInProgress","getFollowingInProgress","dialogs","getDialogsSelector","dispatch","useDispatch","useEffect","getDialogs","onMouseAvatarEnter","onMouseAvatarLeave","buttonLabel","startIcon","src","photos","small","undefined","Card","className","card","elevation","CardMedia","avatarWrapper","circular","CircularProgress","size","color","Avatar","avatar","onMouseEnter","onMouseLeave","large","variant","Fade","in","timeout","Tooltip","title","placement","avatarButtonUpperPanel","IconButton","disableFocusRipple","disableRipple","onClick","profileAC","setPhotos","aria-label","avatarIconDelete","avatarBottomPanel","accept","onChange","e","target","files","length","savePhoto","input","id","multiple","type","htmlFor","buttonIcon","component","buttonIconInner","Typography","CardActions","cardActions","buttons","Button","setEditMode","disableElevation","disabled","fullWidth","button","buttonWrapper","some","item","getUnfollow","setFollowed","getFollow","CircularPreloader","style","SendMessageForm","open","onClose","name","fullName","makeStyles","width","height","padding","paddingBottom","marginBottom","position","overflow","top","right","zIndex","backgroundColor","borderRadius","bottom","left","changePhotoButton","paddingLeft","marginRight","display","justifyContent","alignItems","marginTop","textTransform","ReduxStatusForm","reduxForm","form","handleSubmit","submitting","pristine","reset","error","classesField","useStylesField","onSubmit","Field","field","autoFocus","validate","maxLength30","RenderTextField","normalize","value","empty","root","ProfileStatusForm","anchorEl","statusFromState","getStatusSelector","initialValues","status","Popover","anchorOrigin","vertical","horizontal","transformOrigin","paper","formValue","console","log","updateStatus","border","fontSize","marginDense","paddingTop","LinearPreloader","LinearProgress","theme","createStyles","ProfileStatus","getStatus","setAnchorEl","statusIsLoading","getStatusIsLoading","Boolean","ListItem","aria-describedby","event","currentTarget","listItem","gutters","BlockTitle","block","Divider","divider","transform","paddingRight","BlockField","rightType","Link","href","flexBasis","flexShrink","flexGrow","ProfileInfo","showDetailedInfo","setShowDetailedInfo","showDetailedInfoTitle","lookingForAJob","contactsElements","Object","keys","contacts","map","key","CardContent","cardContent","h6","showDetailInfo","align","Collapse","unmountOnExit","lookingForAJobDescription","lineHeight","ReduxForm","currentInfoFormSidebarItem","getCurrentInfoFormSidebarItem","FieldContactsIconArray","FieldContactsElements","el","i","fieldWrapper","icon","shouldNotBeEmpty","label","clsx","ProfileSidebarItemEnum","main","hide","required","job","RenderCheckbox","iconField","RenderTextAreaField","placeholder","ProfileInfoForm","getProfileSelector","values","saveProfile","marginLeft","ProfileInfoFormSidebar","Tabs","indicator","orientation","newValue","setCurrentInfoFormSidebarItem","tabs","Tab","wrapper","selected","tabRoot","labelIcon","borderLeft","palette","flexDirection","margin","indigo","minHeight","ProfileFriendsItem","friend","indexBeforeWhiteSpace","search","shortName","slice","Grid","xs","RouterLink","to","sidebarAC","setCurrentSidebarItem","ProfileFriends","friends","totalFriendsCount","FriendsElements","Math","min","link","SidebarItemEnum","Badge","badgeContent","max","showZero","container","alignContent","justify","wrap","spacing","onSubmitSuccess","result","RenderNakedTextAreaField","textArea","MyPosts","ref","cb","editingPost","getEditingPost","wrapperRef","useRef","setEditingPost","handleClickOutside","current","contains","document","addEventListener","removeEventListener","formWrapper","addPost","newPostText","text","MyPost","post","setOpen","anchorRef","handleClose","handleListKeyDown","preventDefault","prevOpen","focus","onDeletePostHandle","deletePost","likeMe","like","header","headerInfo","time","aria-controls","aria-haspopup","Popper","role","transition","disablePortal","popper","TransitionProps","Grow","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","message","footer","toggleLikeMe","likeCount","withAuthRedirect","authorizedUserId","getId","isLoading","getIsLoading","currentPage","getCurrentPage","pageSize","getPageSize","getFriendsSelector","getTotalFriendsCount","getFollowedSelector","posts","getPosts","useParams","profileSelector","getCurrentUserProfileSelector","getProfile","searchFriends","getCurrentUserProfile","getFollowed","MyPostsItemElements","firstColumn","Skeleton","profileFriends","middleColumn","profileInfo","myPosts","myPost","lastColumn"],"mappings":"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","file":"static/js/6.cb64a691.chunk.js","sourcesContent":["import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {profileAC, savePhoto} from \"../../../redux/profile-reducer\";\r\nimport {\r\n    getAvatarIsLoading,\r\n    getEditMode,\r\n} from \"../../../redux/profile-selectors\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CircularProgress} from \"@material-ui/core\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst ProfileAvatar: React.FC<PropsType> = (props) => {\r\n    const {isOwner, userId, profile, followed} = props;\r\n    const classes = useStyles();\r\n    const [onAvatarHover, setOnAvatarHover] = useState(false);\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const avatarIsLoading = useSelector(getAvatarIsLoading);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const editMode = useSelector(getEditMode);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!isOwner) {\r\n            //dispatch(getFollowed(userId));\r\n        }\r\n    }, [userId]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs());\r\n    }, []);\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            if (e.target.files.length) {\r\n                dispatch(savePhoto(e.target.files[0]));\r\n            }\r\n        }\r\n    };\r\n\r\n    const onAvatarDelete = () => {\r\n        dispatch(profileAC.setPhotos({small: null, large: null}));\r\n    };\r\n\r\n    const onMouseAvatarEnter = () => {\r\n        setOnAvatarHover(true)\r\n    };\r\n\r\n    const onMouseAvatarLeave = () => {\r\n        setOnAvatarHover(false)\r\n    };\r\n\r\n    const onEditProfileClick = () => {\r\n        dispatch(profileAC.setEditMode(true));\r\n    };\r\n\r\n    const onFollowUnfollowClick = () => {\r\n        if (followed) {\r\n            dispatch(getUnfollow(userId));\r\n            dispatch(profileAC.setFollowed(false));\r\n        } else {\r\n            dispatch(getFollow(userId));\r\n            dispatch(profileAC.setFollowed(true));\r\n        }\r\n    };\r\n\r\n    const onOpenSendMessageFormHandle = () => {\r\n        setOpenSendMessageForm(true)\r\n    };\r\n\r\n    const buttonLabel = followed ? 'unfollow' : 'follow';\r\n    const startIcon = followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n    const src = ((profile && profile.photos.small) ? profile.photos.small : undefined) as string | undefined;\r\n\r\n    return (\r\n        <>\r\n            {profile &&\r\n            <Card className={classes.card} elevation={6}>\r\n                <CardMedia>\r\n                    <div className={classes.avatarWrapper}>\r\n                        {!avatarIsLoading\r\n                            ? <Avatar className={classes.avatar}\r\n                                      onMouseEnter={onMouseAvatarEnter}\r\n                                      onMouseLeave={onMouseAvatarLeave}\r\n                                      src={profile.photos.large ? profile.photos.large : undefined}\r\n                                      variant=\"rounded\"/>\r\n                            : <div className={classes.circular}>\r\n                                <CircularProgress size={100} color={'secondary'}/>\r\n                            </div>\r\n                        }\r\n                        {isOwner && profile.photos &&\r\n                        <Fade in={onAvatarHover} timeout={100}>\r\n                            <Tooltip title=\"Delete avatar\" placement=\"bottom-start\">\r\n                                <div className={classes.avatarButtonUpperPanel}>\r\n                                    <IconButton disableFocusRipple={true}\r\n                                                disableRipple={true}\r\n                                                onMouseEnter={onMouseAvatarEnter}\r\n                                                onMouseLeave={onMouseAvatarLeave}\r\n                                                onClick={onAvatarDelete}\r\n                                                size='small'\r\n                                                aria-label=\"delete avatar\">\r\n                                        <HighlightOffIcon className={classes.avatarIconDelete}/>\r\n                                    </IconButton>\r\n                                </div>\r\n                            </Tooltip>\r\n                        </Fade>}\r\n\r\n                        {isOwner && <Fade in={onAvatarHover} timeout={100}>\r\n                            <div className={classes.avatarBottomPanel}\r\n                                 onMouseEnter={onMouseAvatarEnter}\r\n                                 onMouseLeave={onMouseAvatarLeave}>\r\n                                <input\r\n                                    accept=\"image/*\"\r\n                                    onChange={onPhotoSelected}\r\n                                    className={classes.input}\r\n                                    id=\"12345\"\r\n                                    multiple\r\n                                    type=\"file\"\r\n                                />\r\n                                <label htmlFor=\"12345\">\r\n                                    <IconButton className={classes.buttonIcon}\r\n                                                size='small'\r\n                                                aria-label=\"upload picture\"\r\n                                                component=\"span\">\r\n                                        <PhotoCamera className={classes.buttonIconInner}/>\r\n                                        <Typography variant='body2'>\r\n                                            Change photo\r\n                                        </Typography>\r\n                                    </IconButton>\r\n                                </label>\r\n                            </div>\r\n                        </Fade>}\r\n\r\n                    </div>\r\n                </CardMedia>\r\n\r\n\r\n                <CardActions className={classes.cardActions}>\r\n                    {isOwner\r\n                        ? <div className={classes.buttons}>\r\n                            <Button variant='outlined'\r\n                                    color=\"primary\"\r\n                                    onClick={onEditProfileClick}\r\n                                    disableElevation\r\n                                    disabled={editMode}\r\n                                    size='small'\r\n                                    fullWidth={true}\r\n                                    className={classes.button}>\r\n                                Edit profile\r\n                            </Button>\r\n                        </div>\r\n                        : <div className={classes.buttons}>\r\n\r\n                            {followed !== null &&\r\n                            <div className={classes.buttonWrapper}>\r\n                                <Button\r\n                                    className={classes.button}\r\n                                    variant='outlined'\r\n                                    color=\"primary\"\r\n                                    size='small'\r\n                                    fullWidth\r\n                                    disabled={followingInProgress.some(item => item === userId)}\r\n                                    onClick={onFollowUnfollowClick}\r\n                                    startIcon={startIcon}\r\n                                >\r\n                                    {buttonLabel}\r\n                                </Button>\r\n                                {\r\n                                    isFollowing\r\n                                    && followingInProgress.some(item => item === userId)\r\n                                    &&\r\n                                    <CircularPreloader size={20} style={'absolute'}/>\r\n                                }\r\n                            </div>\r\n                            }\r\n\r\n                            <div className={classes.buttonWrapper}>\r\n                                <Button\r\n                                    className={classes.button}\r\n                                    variant='outlined'\r\n                                    color=\"primary\"\r\n                                    size='small'\r\n                                    fullWidth\r\n                                    onClick={onOpenSendMessageFormHandle}\r\n                                    startIcon={<SendIcon/>}\r\n                                >\r\n                                    Send message\r\n                                </Button>\r\n                            </div>\r\n\r\n                            <SendMessageForm open={openSendMessageForm}\r\n                                             onClose={setOpenSendMessageForm}\r\n                                             id={profile.userId}\r\n                                             name={profile.fullName}\r\n                                             src={src}\r\n                                             dialogs={dialogs}\r\n                            />\r\n\r\n\r\n                        </div>\r\n\r\n                    }\r\n                </CardActions>\r\n\r\n\r\n            </Card>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ProfileAvatar;\r\n\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    userId: number\r\n    profile: ProfileType\r\n    followed: boolean | null\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 210,\r\n        height: 210,\r\n    },\r\n    card: {\r\n        padding: 10,\r\n        paddingBottom: 10,\r\n        marginBottom: 10\r\n    },\r\n    avatarWrapper: {\r\n        position: 'relative',\r\n        overflow: 'hidden'\r\n    },\r\n    avatarButtonUpperPanel: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n        zIndex: 10,\r\n        backgroundColor: 'rgba(0,0,0,0.3)',\r\n        borderRadius: '0 4px 0 4px'\r\n    },\r\n    avatarBottomPanel: {\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        backgroundColor: 'rgba(0,0,0,0.3)',\r\n        borderRadius: '0 0 4px 4px'\r\n    },\r\n    changePhotoButton: {\r\n        color: 'white',\r\n    },\r\n    buttonIcon: {\r\n        color: 'white',\r\n        paddingLeft: 10,\r\n        marginRight: 10\r\n    },\r\n    buttonIconInner: {\r\n        marginRight: 10\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    },\r\n    avatarIconDelete: {\r\n        color: 'white'\r\n    },\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: 200,\r\n        height: 200,\r\n    },\r\n    buttons: {\r\n        width: '100%',\r\n        marginTop: 10\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        marginBottom: 5\r\n    },\r\n    cardActions: {\r\n        padding: 0\r\n    }\r\n});\r\n\r\n\r\n\r\n","import Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {updateStatus} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {empty, maxLength30} from \"../../../utilities/validators/validators\";\r\nimport {getStatusSelector} from \"../../../redux/profile-selectors\";\r\n\r\n//=================================== FORM ==========================================================================================\r\nconst Form: React.FC<InjectedFormProps<StatusFormValuesType, StatusFormOwnPropsType> & StatusFormOwnPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, reset, error, onClose} = props\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n\r\n    const normalize = (value: any) => {\r\n        if (empty(value)) {\r\n            return ''\r\n        } else return value\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={classes.form}>\r\n            <div>\r\n                <Field className={classes.field}\r\n                       classes={classesField}\r\n                       autoFocus={true}\r\n                       name='status'\r\n                       validate={[maxLength30]}\r\n                       component={RenderTextField}\r\n                       size='small'\r\n                       normalize={normalize}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button classes={{\r\n                    root: classes.button\r\n                }}\r\n                        color='primary'\r\n                        size='small'\r\n                        type=\"submit\"\r\n                        onClick={onClose}\r\n                        variant=\"outlined\">\r\n                    Save status\r\n                </Button>\r\n            </div>\r\n        </form>)\r\n};\r\n\r\n//===================================== REDUX-FORM===============================================================\r\nconst ReduxStatusForm = reduxForm<StatusFormValuesType, StatusFormOwnPropsType>({\r\n    form: 'status',\r\n})(Form);\r\n\r\n\r\n//====================================== COMPONENT =====================================================================\r\nconst ProfileStatusForm = (props: PropsType) => {\r\n    const {id, open, anchorEl, onClose} = props\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: StatusFormValuesType) => {\r\n        console.log(formValue);\r\n        dispatch(updateStatus(formValue.status));\r\n    };\r\n\r\n    const statusFromState = useSelector(getStatusSelector);\r\n    const status = statusFromState ? statusFromState : ''\r\n\r\n    const initialValues = {\r\n        status: status\r\n    };\r\n\r\n    return (\r\n        <Popover\r\n            id={id}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={onClose}\r\n\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'left',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'left',\r\n            }}\r\n            classes={{\r\n                paper: classes.paper,\r\n            }}\r\n        >\r\n            <ReduxStatusForm onSubmit={onSubmit}\r\n                             initialValues={initialValues}\r\n                             onClose={onClose}/>\r\n        </Popover>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusForm\r\n\r\n//=================================TYPES===================================================\r\ntype initialValuesType = {\r\n    status: string\r\n}\r\n\r\ntype PropsType = {\r\n    id: string | undefined\r\n    open: boolean\r\n    anchorEl: HTMLButtonElement | null\r\n    onClose: () => void\r\n\r\n}\r\ntype StatusFormValuesType = {\r\n    status: string\r\n}\r\ntype StatusFormOwnPropsType = {\r\n    onClose: () => void\r\n    initialValues: initialValuesType\r\n}\r\n\r\n//======================== STYLE =================================================================\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        right: 36,\r\n        border: '1px solid #ccc'\r\n    },\r\n    button: {\r\n        marginTop: 10,\r\n    },\r\n    form: {\r\n        padding: 5,\r\n        //backgroundColor: indigo[50],\r\n    },\r\n    field: {\r\n        width: '100%',\r\n        backgroundColor: 'white'\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles({\r\n        root: {\r\n            fontSize: '0.875rem',\r\n            padding: 0\r\n        },\r\n        input: {\r\n            padding: 0\r\n        },\r\n        marginDense: {\r\n            paddingTop: 4,\r\n            paddingBottom: 4,\r\n            paddingLeft: 6,\r\n            borderRadius: 0,\r\n            border: '1px solid #ccc'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n","import {Theme} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {createStyles} from \"@material-ui/styles\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nconst LinearPreloader: React.FC = (props: any) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgress color={'secondary'}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LinearPreloader;\r\n\r\n//============================= STYLES ===============================\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            paddingTop: 12,\r\n            paddingBottom: 12\r\n            // '& > * + *': {\r\n            //     marginTop: theme.spacing(2),\r\n            // },\r\n        },\r\n    }),\r\n);\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {getStatusIsLoading, getStatusSelector} from \"../../../redux/profile-selectors\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ProfileStatusForm from \"./ProfileStatusForm\";\r\nimport LinearPreloader from \"../../common/LinearPreloader\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {getStatus} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst ProfileStatus: React.FC<PropsType> = ({isOwner, userId}) => {\r\n    const classes = useStyles();\r\n    const status = useSelector(getStatusSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getStatus(userId));\r\n    }, [userId]);\r\n\r\n    //=========================\r\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\r\n    const statusIsLoading = useSelector(getStatusIsLoading);\r\n    const handleClick = (event: any) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popover' : undefined;\r\n    //==============================\r\n\r\n    return (\r\n        <div>\r\n\r\n            {isOwner //если свой профиль - кнопка с текстом статуса и вплывающая форма замены статуса\r\n                ? !statusIsLoading && status !== null\r\n                    ? <div>\r\n                        <ListItem button\r\n                                  aria-describedby={id}\r\n                                  onClick={handleClick}\r\n                                  classes={{\r\n                                      root: classes.listItem,\r\n                                      gutters: classes.gutters\r\n                                  }}\r\n                        >\r\n                            {status !== '' ?\r\n                                <Typography variant='body2'>{status}</Typography>\r\n                                : <Typography variant='body2' color='textSecondary'>change status</Typography>\r\n                            }\r\n                        </ListItem>\r\n                        <ProfileStatusForm\r\n                            id={id}\r\n                            open={open}\r\n                            anchorEl={anchorEl}\r\n                            onClose={handleClose}\r\n                        />\r\n                    </div>\r\n\r\n                    : <LinearPreloader/>\r\n\r\n                //если чужой профиль - просто текст статуса (ничего, если его нет)\r\n                : <>\r\n                    {\r\n                        !statusIsLoading\r\n                            ? <>\r\n                                {status  && <ListItem classes={{\r\n                                    gutters: classes.gutters\r\n                                }}\r\n                                >\r\n                                    {status}\r\n                                </ListItem>}\r\n                            </>\r\n                            : <LinearPreloader/>\r\n                    }\r\n\r\n                </>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatus;\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        marginTop: 15\r\n    },\r\n    gutters: {\r\n        paddingLeft: 11\r\n    },\r\n    listItem: {\r\n        paddingTop: 9,\r\n        paddingBottom: 9\r\n    }\r\n});\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    userId: number\r\n}","import Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst BlockTitle: React.FC<PropsType> = ({title}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.block}>\r\n            <Divider classes={{\r\n                root: classes.divider\r\n            }}/>\r\n            <Typography variant='subtitle2'\r\n                //color='primary'\r\n                        className={classes.title}\r\n            >\r\n                {title}\r\n            </Typography>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BlockTitle;\r\n\r\n\r\n//==================== TYPES =====================\r\ntype PropsType = {\r\n    title: string\r\n}\r\n\r\n//======================== STYLE =================\r\nconst useStyles = makeStyles({\r\n    block: {\r\n        position: 'relative'\r\n    },\r\n    divider: {\r\n        marginTop: 16,\r\n        marginBottom: 16\r\n    },\r\n    title: {\r\n        position: 'absolute',\r\n        left: 8,\r\n        top: '50%',\r\n        transform: 'translate(0, -50%)',\r\n        backgroundColor: 'white',\r\n        paddingLeft: 3,\r\n        paddingRight: 3,\r\n    }\r\n})","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from '@material-ui/core/Link';\r\n\r\n\r\nconst BlockField: React.FC<PropsType> = (props) => {\r\n    const {left, right, rightType} = props;\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.block}>\r\n            {left && <div className={classes.left}>\r\n                <Typography color='textSecondary'>{left}</Typography>\r\n            </div>}\r\n            {rightType === undefined && <div className={classes.right}>\r\n                <Typography>{right}</Typography>\r\n            </div>}\r\n            {rightType === 'link' && <div className={classes.right}>\r\n                <Link href={right}>\r\n                    {right}\r\n                </Link>\r\n            </div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BlockField;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    block: {\r\n        display: 'flex',\r\n        paddingLeft: 11\r\n    },\r\n    left: {\r\n        flexBasis: 200,\r\n        flexShrink: 0\r\n    },\r\n    right: {\r\n        flexGrow: 1\r\n    }\r\n});\r\n\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    left: string | null\r\n    right: string\r\n    rightType?: undefined | 'link'\r\n}","import React, {useState} from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getProfileSelector} from \"../../../redux/profile-selectors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport BlockTitle from \"../../common/BlockTitle\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport BlockField from \"../../common/BlockField\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({isOwner, userId, profile}) => {\r\n    const classes = useStyles();\r\n    const [showDetailedInfo, setShowDetailedInfo] = useState(false)\r\n\r\n    const onShowInfoClick = () => {\r\n        setShowDetailedInfo(!showDetailedInfo);\r\n    };\r\n\r\n    const showDetailedInfoTitle = showDetailedInfo\r\n        ? 'Hide detailed information'\r\n        : 'Show detailed information';\r\n\r\n    const lookingForAJob = profile && profile.lookingForAJob ? 'Да' : 'Нет';\r\n\r\n    const contactsElements = profile && Object\r\n        .keys(profile.contacts)\r\n        .map(key => {\r\n            if (profile.contacts[key as keyof ContactsType]) {\r\n                return <BlockField left={key} right={profile.contacts[key as keyof ContactsType]} rightType='link'/>\r\n            }\r\n        });\r\n\r\n    if (!profile) return <CircularPreloader/>\r\n\r\n    return (\r\n        <Card className={classes.card}\r\n              elevation={6}>\r\n            <CardContent className={classes.cardContent}>\r\n                <Typography variant='h6'\r\n                            color='primary'\r\n                            classes={{\r\n                                h6: classes.fullName\r\n                            }}>\r\n                    {profile.fullName}\r\n                </Typography>\r\n                <ProfileStatus isOwner={isOwner} userId={userId}/>\r\n\r\n                <Divider classes={{\r\n                    root: classes.divider\r\n                }}/>\r\n\r\n                <ListItem button\r\n                          className={classes.showDetailInfo}\r\n                          onClick={onShowInfoClick}\r\n                          classes={{\r\n                              //root: classes.listItem,\r\n                              //gutters: classes.gutters\r\n                          }}\r\n                >\r\n                    <Typography variant='body2' align='center' color='primary' display='block'>\r\n                        {showDetailedInfoTitle}\r\n                    </Typography>\r\n                </ListItem>\r\n\r\n                <Collapse in={showDetailedInfo} timeout=\"auto\" unmountOnExit>\r\n\r\n                    <>\r\n                        <BlockTitle title='About job'/>\r\n                        <BlockField left='Looking for a job' right={lookingForAJob}/>\r\n                        {\r\n                            profile.lookingForAJobDescription\r\n                            && <BlockField left='My professional skills' right={profile.lookingForAJobDescription}/>\r\n                        }\r\n                    </>\r\n\r\n                    {Object.keys(profile.contacts).some(key => profile.contacts[key as keyof ContactsType])\r\n                        ? <>\r\n                            <BlockTitle title='Contacts'/>\r\n                            {contactsElements}\r\n                        </>\r\n                        : <>\r\n                            {isOwner &&\r\n                            <>\r\n                                <BlockTitle title='Contacts'/>\r\n                                <Typography color='textSecondary' align='center'>No information available</Typography>\r\n                            </>\r\n                            }\r\n                        </>\r\n                    }\r\n\r\n\r\n                </Collapse>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\nexport default ProfileInfo;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n    },\r\n    cardContent: {\r\n        paddingLeft: 5,\r\n        paddingTop: 10,\r\n        paddingRight: 5,\r\n        '&:last-child': {\r\n            paddingBottom: 10\r\n        }\r\n    },\r\n    fullName: {\r\n        paddingLeft: 10,\r\n        marginBottom: 5,\r\n        lineHeight: '1.25rem'\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 5\r\n    },\r\n    showDetailInfo: {\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    userId: number\r\n    profile: ProfileType\r\n}","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentInfoFormSidebarItem, getProfileSelector} from \"../../../redux/profile-selectors\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport RenderCheckbox from \"../../common/RenderCheckbox\";\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport HttpIcon from '@material-ui/icons/Http';\r\nimport YouTubeIcon from '@material-ui/icons/YouTube';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport {ProfileSidebarItemEnum, ProfileType} from \"../../../types/types\";\r\nimport clsx from \"clsx\";\r\nimport RenderTextAreaField from \"../../common/RenderTextareaField\";\r\nimport {saveProfile} from \"../../../redux/profile-reducer\";\r\nimport {required, shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\n\r\n//========================== FORM ==============================================\r\nconst Form: React.FC<InjectedFormProps<FormValuesType, FormOwnPropsType> & FormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    const {handleSubmit, submitting, pristine, reset, error, profile} = props\r\n    const currentInfoFormSidebarItem = useSelector(getCurrentInfoFormSidebarItem);\r\n\r\n    const FieldContactsIconArray = [\r\n        <FacebookIcon/>,\r\n        <HttpIcon/>,\r\n        <ContactsIcon/>,\r\n        <TwitterIcon/>,\r\n        <InstagramIcon/>,\r\n        <YouTubeIcon/>,\r\n        <GitHubIcon/>,\r\n        <LanguageIcon/>\r\n    ];\r\n\r\n    const FieldContactsElements = Object.keys(profile.contacts)\r\n        .map((el, i) => <div className={classes.fieldWrapper}>\r\n            <Field name={`contacts.${el}`}\r\n                   key={i}\r\n                   icon={FieldContactsIconArray[i]}\r\n                   component={RenderTextField}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   className={classes.field}\r\n                   label={el}\r\n                   size='small'\r\n            />\r\n        </div>);\r\n\r\n    console.log(profile.fullName)\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n\r\n            <div className={clsx(classes.fieldWrapper, (currentInfoFormSidebarItem) !== ProfileSidebarItemEnum.main && classes.hide)}>\r\n                <Field name='fullName'\r\n                       icon={<AccountCircleIcon/>}\r\n                       component={RenderTextField}\r\n                       validate={[required, shouldNotBeEmpty]}\r\n                       className={classes.field}\r\n                       label='Full name'\r\n                       size='small'\r\n                />\r\n            </div>\r\n\r\n\r\n            <div className={clsx(currentInfoFormSidebarItem !== ProfileSidebarItemEnum.job && classes.hide)}>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field name='lookingForAJob'\r\n                           component={RenderCheckbox}\r\n                           className={classes.iconField}\r\n                           label='Looking for a job'\r\n                           size='small'\r\n                           variant='outlined'\r\n                    />\r\n                </div>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field name='lookingForAJobDescription'\r\n                           icon={<WorkIcon/>}\r\n                           component={RenderTextAreaField}\r\n                           validate={[shouldNotBeEmpty]}\r\n                           className={classes.field}\r\n                           label='My professional skills'\r\n                           placeholder='My professional skills'\r\n                           size='small'\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={clsx(currentInfoFormSidebarItem !== ProfileSidebarItemEnum.contacts && classes.hide)}>\r\n                {FieldContactsElements}\r\n            </div>\r\n\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SaveIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={classes.button}>\r\n                Save\r\n            </Button>\r\n\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\n//----------------------------REDUX-FORM------------------------------------------------\r\nconst ReduxForm = reduxForm<FormValuesType, FormOwnPropsType>({\r\n    form: 'profile-info',\r\n\r\n})(Form);\r\n\r\n//----------------------------COMPONENT-------------------------------------------------------\r\nconst ProfileInfoForm = () => {\r\n    const classes = useStyles();\r\n    const currentInfoFormSidebarItem = useSelector(getCurrentInfoFormSidebarItem);\r\n    const profile = useSelector(getProfileSelector);\r\n    const dispatch = useDispatch();\r\n    let title;\r\n    switch (currentInfoFormSidebarItem) {\r\n        case 0: {\r\n            title = 'Main'\r\n            break\r\n        }\r\n        case 1: {\r\n            title = 'Job'\r\n            break\r\n        }\r\n        case 2: {\r\n            title = 'Contacts'\r\n            break\r\n        }\r\n    }\r\n    let onSubmit = (values: FormValuesType) => {\r\n        console.log(values);\r\n        dispatch(saveProfile(values));\r\n        //dispatch(profileAC.setEditMode(false));\r\n    };\r\n\r\n    const initialValues = profile ? profile : undefined;\r\n\r\n    return (\r\n        <>\r\n            {profile\r\n                ? <Card className={classes.card}\r\n                        elevation={6}>\r\n                    <CardContent className={classes.cardContent}>\r\n                        <Typography variant='h6'\r\n                                    color='primary'\r\n                                    classes={{\r\n                                        h6: classes.title\r\n                                    }}>\r\n                            {title}\r\n                        </Typography>\r\n                        <Divider classes={{\r\n                            root: classes.divider\r\n                        }}/>\r\n\r\n                        <ReduxForm onSubmit={onSubmit}\r\n                                   profile={profile}\r\n                                   initialValues={initialValues}\r\n                        />\r\n\r\n                    </CardContent>\r\n                </Card>\r\n                : <CircularPreloader/>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ProfileInfoForm;\r\n\r\n//========================= TYPES ==============================================\r\ntype FormValuesType = ProfileType;\r\ntype FormOwnPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {},\r\n    cardContent: {\r\n        paddingLeft: 15,\r\n        paddingTop: 15,\r\n        paddingRight: 15,\r\n        '&:last-child': {\r\n            paddingBottom: 15\r\n        }\r\n    },\r\n    title: {\r\n        marginLeft: 15,\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 15\r\n    },\r\n    field: {\r\n        width: '100%',\r\n    },\r\n    iconField: {\r\n        marginBottom: 35,\r\n    },\r\n    fieldWrapper: {\r\n        marginLeft: 35,\r\n        marginBottom: 15\r\n    },\r\n    button: {\r\n        width: '100%',\r\n    },\r\n    hide: {\r\n        display: 'none'\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles({});\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import CardContent from \"@material-ui/core/CardContent\";\r\nimport React from \"react\";\r\nimport {Card, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport WorkOutlineIcon from '@material-ui/icons/WorkOutline';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentInfoFormSidebarItem} from \"../../../redux/profile-selectors\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {profileAC} from \"../../../redux/profile-reducer\";\r\n\r\nconst ProfileInfoFormSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentInfoFormSidebarItem = useSelector(getCurrentInfoFormSidebarItem);\r\n    const dispatch = useDispatch();\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(profileAC.setCurrentInfoFormSidebarItem(newValue));\r\n    };\r\n\r\n    return (\r\n        <Card elevation={6}>\r\n            <CardContent className={classes.cardContent}>\r\n\r\n                <Tabs\r\n                    classes={{\r\n                        indicator: classes.indicator\r\n                    }}\r\n                    orientation=\"vertical\"\r\n                    value={currentInfoFormSidebarItem}\r\n                    onChange={handleChange}\r\n                    className={classes.tabs}\r\n                >\r\n\r\n                    <Tab label=\"Main\" icon={<AccountCircleIcon className={classes.icon}/>} classes={{\r\n                        wrapper: classes.wrapper,\r\n                        selected: classes.selected,\r\n                        root: classes.tabRoot,\r\n                        labelIcon: classes.labelIcon\r\n                    }}/>\r\n                    <Tab label=\"Job\" icon={<WorkOutlineIcon className={classes.icon}/>} classes={{\r\n                        wrapper: classes.wrapper,\r\n                        selected: classes.selected,\r\n                        root: classes.tabRoot,\r\n                        labelIcon: classes.labelIcon\r\n                    }}/>\r\n                    <Tab label=\"Contacts\" icon={<LanguageIcon className={classes.icon}/>} classes={{\r\n                        wrapper: classes.wrapper,\r\n                        selected: classes.selected,\r\n                        root: classes.tabRoot,\r\n                        labelIcon: classes.labelIcon\r\n                    }}/>\r\n\r\n                </Tabs>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default ProfileInfoFormSidebar;\r\n\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    label: string\r\n    icon: React.ReactElement\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    cardContent: {\r\n        paddingLeft: 5,\r\n        paddingTop: 5,\r\n        paddingRight: 5,\r\n        '&:last-child': {\r\n            paddingBottom: 5\r\n        }\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid ${theme.palette.divider}`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none',\r\n        '& > *:first-child': {\r\n            marginBottom: '0!important'\r\n        }\r\n    },\r\n    icon: {\r\n        margin: '0 10px 0',\r\n\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0,\r\n        marginLeft: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50,\r\n    }\r\n}));","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\n\r\n\r\nconst ProfileFriendsItem: React.FC<PropsType> = ({friend}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const src = friend.photos.small;\r\n\r\n    let indexBeforeWhiteSpace = friend.name.search(/[\\s_]/);\r\n    let shortName = (indexBeforeWhiteSpace > 0) ?  friend.name.slice(0, indexBeforeWhiteSpace) : friend.name;\r\n    if (shortName.length > 10 ) {\r\n        shortName = shortName.slice(0,9) + '...';\r\n    }\r\n\r\n\r\n    const onListItemClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(3));\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={4} className={classes.item}>\r\n                <Avatar className={classes.avatar}\r\n                        src={src ? src : undefined}\r\n                />\r\n            <Link component={RouterLink} to={`/users/${friend.id}`} onClick={onListItemClick}>\r\n\r\n                <Typography variant=\"caption\" align='center'>\r\n                    {shortName}\r\n                </Typography>\r\n            </Link>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default ProfileFriendsItem;\r\n//========================== TYPES =================================================\r\ntype PropsType = {\r\n    friend: UserType\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50\r\n    }\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ProfileFriendsItem from \"./ProfileFriendsItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {SidebarItemEnum, UserType} from \"../../../types/types\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst ProfileFriends: React.FC<PropsType> = ({friends, totalFriendsCount}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const FriendsElements = friends\r\n        && friends\r\n            .map((el, i) => <ProfileFriendsItem key={i} friend={el}/>)\r\n            .slice(0, Math.min(9, friends.length));\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.friends))\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            { friends && friends.length\r\n                ? <>\r\n                <div className={classes.title}>\r\n                    <Link component={RouterLink} to={'/friends'} className={classes.link} onClick={onClickHandler}>\r\n                        Friends\r\n                    </Link>\r\n                    <Badge badgeContent={totalFriendsCount} color=\"primary\" max={99999} showZero>\r\n                        <AccountCircleIcon/>\r\n                    </Badge>\r\n\r\n                </div>\r\n\r\n                <Grid container alignContent='stretch' justify='space-between' wrap='wrap' spacing={1}>\r\n                    {FriendsElements}\r\n                </Grid>\r\n            </>\r\n                : <Typography>\r\n                    No friends\r\n                </Typography>\r\n            }\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default ProfileFriends;\r\n\r\n//========================== TYPES ==============================================\r\ntype PropsType = {\r\n    friends: Array<UserType> | null\r\n    totalFriendsCount: number\r\n}\r\n\r\n//========================== STYLES =============================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: '15px 10px 10px',\r\n    },\r\n    title: {\r\n        marginBottom: 5\r\n    },\r\n    link: {\r\n        marginRight: 5\r\n    }\r\n});","import React, {useRef, useState} from \"react\";\r\nimport {Button, Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {Field, InjectedFormProps, reduxForm, reset, submit} from \"redux-form\";\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport {required, shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport RenderNakedTextAreaField from \"../../common/RenderNakedTextareaField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {profileAC} from \"../../../redux/profile-reducer\";\r\nimport {getEditingPost} from \"../../../redux/profile-selectors\";\r\nimport BlockTitle from \"../../common/BlockTitle\";\r\nimport useOutsideAlerter from \"../../../hooks/hooks\";\r\n\r\n//============================ FORM ===================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field name='newPostText'\r\n                   component={RenderNakedTextAreaField}\r\n                   validate={[shouldNotBeEmpty, required]}\r\n                   autoFocus={true}\r\n                   className={classes.textArea}\r\n                   placeholder='Enter your post'\r\n                   size='small'\r\n            />\r\n\r\n            <BlockTitle title=''/>\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<PostAddIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    Add post\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n   dispatch(reset('post'))\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'post',\r\n    onSubmitSuccess: afterSubmit,\r\n})(Form);\r\n\r\n\r\n//============================= COMPONENT =====================================================\r\n\r\nconst MyPosts: React.FC<PropsType> = ({profile}) => {\r\n    const classes = useStyles();\r\n    const editingPost = useSelector(getEditingPost)\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(profileAC.addPost(formValue.newPostText));\r\n    };\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(profileAC.setEditingPost(true))\r\n    };\r\n\r\n    const onOutClickHandler = () => {\r\n        dispatch(profileAC.setEditingPost(false))\r\n    }\r\n\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef, onOutClickHandler);\r\n\r\n    return (\r\n        <Card className={classes.card}\r\n              elevation={6}\r\n              ref={wrapperRef}\r\n        >\r\n            <div className={classes.formWrapper}>\r\n                <Avatar className={classes.avatar}\r\n                        src={profile.photos.large ? profile.photos.large : undefined}\r\n                />\r\n                <div>\r\n                    {\r\n                        editingPost\r\n                            ? <ReduxForm onSubmit={onSubmit}/>\r\n                            : <Typography onClick={onClickHandler}\r\n                                          color='textSecondary'\r\n                                          className={classes.text}>\r\n                                Enter your post\r\n                            </Typography>\r\n                    }\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default MyPosts;\r\n\r\n//========================== TYPES ==============================================\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    newPostText: string\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\n//========================== STYLES =============================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 15,\r\n        marginTop: 10,\r\n    },\r\n    avatar: {\r\n        width: 28,\r\n        height: 28,\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0\r\n    },\r\n    formWrapper: {\r\n        position: 'relative'\r\n    },\r\n    textArea: {\r\n        border: 0,\r\n        width: '100%',\r\n        marginLeft: 38\r\n    },\r\n    text: {\r\n        marginLeft: 38\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    }\r\n});\r\n\r\n\r\n\r\n","import {useEffect} from \"react\";\r\n\r\nexport default function useOutsideAlerter(ref, cb) {\r\n    useEffect(() => {\r\n        // cb() if clicked outside of element\r\n                function handleClickOutside(event) {\r\n            // contains - является ли узел потомком данного узла\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                cb();\r\n            }\r\n        }\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            // Unbind the event listener on clean up\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n}","import React from 'react';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Card} from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {PostType, ProfileType} from \"../../../types/types\";\r\nimport BlockTitle from \"../../common/BlockTitle\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {profileAC} from \"../../../redux/profile-reducer\";\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\n\r\nconst MyPost: React.FC<PropsType> = ({post, profile}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //======================================\r\n\r\n    const onDeletePostHandle = (e: React.MouseEvent<EventTarget>) => {\r\n        dispatch(profileAC.deletePost(post.id));\r\n        handleClose(e)\r\n    };\r\n\r\n    const onLikeHandle = () => {\r\n        dispatch(profileAC.toggleLikeMe(post.id))\r\n\r\n    };\r\n\r\n    const icon = post.likeMe\r\n        ? <FavoriteIcon className={classes.like}/>\r\n        : <FavoriteBorderIcon/>\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                profile &&\r\n                <Card elevation={6} className={classes.card}>\r\n                    <div className={classes.header}>\r\n                        <Avatar className={classes.avatar}\r\n                                src={profile.photos.large ? profile.photos.large : undefined}\r\n                        />\r\n                        <div className={classes.headerInfo}>\r\n                            <Link component={RouterLink} to={'/profile'}>\r\n                                {profile.fullName}\r\n                            </Link>\r\n                            <Typography>\r\n                                {post.time}\r\n                            </Typography>\r\n                        </div>\r\n\r\n\r\n                        <div>\r\n                            <IconButton\r\n                                ref={anchorRef}\r\n                                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleToggle}\r\n                            >\r\n                                <KeyboardArrowDownIcon/>\r\n                            </IconButton>\r\n                            <Popper open={open}\r\n                                    anchorEl={anchorRef.current}\r\n                                    role={undefined}\r\n                                    transition\r\n                                    disablePortal\r\n                                    placement='bottom-end' className={classes.popper}>\r\n                                {({TransitionProps, placement}) => (\r\n                                    <Grow\r\n                                        {...TransitionProps}\r\n                                        style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                    >\r\n                                        <Paper className={classes.paper}>\r\n                                            <ClickAwayListener onClickAway={handleClose}>\r\n                                                <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                          onKeyDown={handleListKeyDown}>\r\n                                                    <MenuItem onClick={onDeletePostHandle}>Delete post</MenuItem>\r\n                                                    <MenuItem onClick={handleClose}>Something else</MenuItem>\r\n                                                    <MenuItem onClick={handleClose}>Something else</MenuItem>\r\n                                                </MenuList>\r\n                                            </ClickAwayListener>\r\n                                        </Paper>\r\n                                    </Grow>\r\n                                )}\r\n                            </Popper>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <Typography variant='body1'>\r\n                        {post.message}\r\n                    </Typography>\r\n                    <BlockTitle title=''/>\r\n\r\n                    <div className={classes.footer}>\r\n                        <IconButton\r\n                            onClick={onLikeHandle}\r\n                        >\r\n                            {icon}\r\n                        </IconButton>\r\n                        {post.likeCount}\r\n                    </div>\r\n\r\n                </Card>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPost\r\n\r\n//========================== TYPES ==============================================\r\ntype PropsType = {\r\n    post: PostType\r\n    profile: ProfileType | null\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    paper: {\r\n        border: '1px solid #ccc'\r\n    },\r\n    card: {\r\n        padding: 10,\r\n        marginTop: 10\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        marginBottom: 10\r\n    },\r\n    headerInfo: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        flexGrow: 1\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50,\r\n        marginRight: 15\r\n    },\r\n    popper: {\r\n        zIndex: 1000,\r\n    },\r\n    footer: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    like: {\r\n        color: 'red'\r\n    }\r\n});\r\n","import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from \"react-router\";\r\nimport {getId} from \"../../../redux/auth-selectors\";\r\nimport {getIsLoading} from \"../../../redux/app-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport {getCurrentUserProfile, getFollowed, getProfile} from \"../../../redux/profile-reducer\";\r\n\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ProfileAvatar from \"./ProfileAvatar\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport ProfileInfoForm from \"./ProfileInfoForm\";\r\nimport ProfileInfoFormSidebar from \"./ProfileInfoFormSidebar\";\r\nimport {\r\n    getCurrentUserProfileSelector,\r\n    getEditMode, getFollowedSelector, getPosts,\r\n    getProfileSelector,\r\n} from \"../../../redux/profile-selectors\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport ProfileFriends from \"./ProfileFriends\";\r\nimport {\r\n    getCurrentPage,\r\n    getFriendsSelector,\r\n    getPageSize,\r\n    getTotalFriendsCount\r\n} from \"../../../redux/users-selectors\";\r\nimport {searchFriends} from \"../../../redux/users-reduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport MyPost from \"./MyPost\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\n\r\nconst Profile: React.FC = () => {\r\n    const classes = useStyles();\r\n    const authorizedUserId = useSelector(getId);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const editMode = useSelector(getEditMode);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const friends = useSelector(getFriendsSelector);\r\n    const totalFriendsCount = useSelector(getTotalFriendsCount);\r\n    const followed = useSelector(getFollowedSelector);\r\n    const posts = useSelector(getPosts);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    let {userId} = useParams();\r\n    const isOwner = userId ? false : true;\r\n    if (!userId) {\r\n        userId = authorizedUserId;\r\n    }\r\n\r\n    const profileSelector = isOwner ? getProfileSelector : getCurrentUserProfileSelector;\r\n    const profile = useSelector(profileSelector);\r\n\r\n    useEffect(() => {\r\n        if (isOwner) {\r\n            dispatch(getProfile(userId));\r\n            dispatch(searchFriends(currentPage, pageSize, ''));\r\n        } else {\r\n            dispatch(getCurrentUserProfile(userId));\r\n            dispatch(getFollowed(userId));\r\n        }\r\n    }, [userId]);\r\n\r\n    const MyPostsItemElements = posts\r\n        .map(el => <MyPost key={el.id} post={el} profile={profile}/>);\r\n\r\n    //if (isLoading || !profile) return <CircularPreloader/>\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <div className={classes.firstColumn}>\r\n\r\n                {\r\n                    !isLoading && profile\r\n\r\n                    ? <ProfileAvatar isOwner={isOwner}\r\n                                     userId={userId}\r\n                                     profile={profile}\r\n                                     followed={followed}\r\n                    />\r\n                    : <Skeleton variant=\"rect\" width={230} height={266} className={classes.avatar}/>\r\n                }\r\n\r\n                {\r\n                    isOwner &&\r\n                    <>\r\n                        {\r\n                            !isLoading && friends\r\n                                ? <ProfileFriends friends={friends}\r\n                                                  totalFriendsCount={totalFriendsCount}\r\n                                />\r\n                                : <Skeleton variant=\"rect\" width={230} height={282} className={classes.profileFriends} />\r\n                        }\r\n                    </>\r\n                }\r\n\r\n            </div>\r\n\r\n            <div className={classes.middleColumn}>\r\n                {!editMode\r\n                    ? <>\r\n\r\n                        {\r\n                            !isLoading && profile\r\n                                ? <ProfileInfo isOwner={isOwner} userId={userId} profile={profile}/>\r\n                                : <Skeleton variant=\"rect\" width='100%' height={151} className={classes.profileInfo}/>\r\n                        }\r\n\r\n                        {\r\n                            isOwner &&\r\n                            <>\r\n                                {\r\n                                    !isLoading && profile\r\n                                        ? <MyPosts profile={profile}/>\r\n                                        : <Skeleton variant=\"rect\" width='100%' height={54} className={classes.myPosts}/>\r\n                                }\r\n\r\n                                {\r\n                                    !isLoading && profile\r\n\r\n                                        ? <>\r\n                                            {MyPostsItemElements}\r\n                                        </>\r\n                                        : <Skeleton variant=\"rect\" width='100%' height={200} className={classes.myPost}/>\r\n                                }\r\n\r\n                            </>\r\n                        }\r\n                    </>\r\n                    : <ProfileInfoForm/>\r\n                }\r\n            </div>\r\n\r\n            {\r\n                editMode &&\r\n                <div className={classes.lastColumn}>\r\n                    {<ProfileInfoFormSidebar/>}\r\n                </div>\r\n\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withAuthRedirect(Profile);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\"\r\n    },\r\n    firstColumn: {\r\n        flexBasis: 230,\r\n        marginRight: 10,\r\n    },\r\n    middleColumn: {\r\n        flexGrow: 1,\r\n\r\n    },\r\n    lastColumn: {\r\n        width: 130,\r\n        marginLeft: 10\r\n    },\r\n    avatar: {\r\n        marginBottom: 10,\r\n        borderRadius: 4\r\n    },\r\n    profileFriends: {\r\n        borderRadius: 4\r\n    },\r\n    profileInfo: {\r\n        marginBottom: 10,\r\n        borderRadius: 4\r\n    },\r\n    myPosts: {\r\n        marginBottom: 10,\r\n        borderRadius: 4\r\n    },\r\n    myPost: {\r\n        marginBottom: 10,\r\n        borderRadius: 4\r\n    }\r\n});\r\n"],"sourceRoot":""}