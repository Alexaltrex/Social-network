{"version":3,"sources":["Components/common/RenderTextField.tsx","api/profile-api.ts","utilities/date.ts","redux/profile-reducer.ts","hoc/withAuthRedirect.tsx","redux/app-selectors.ts","redux/app-reducer.ts","redux/profile-selectors.ts","redux/dialogs-reducer.ts","utilities/objects-helpers.js","api/users-api.ts","redux/users-reduser.ts","Components/common/RenderCheckbox.tsx","api/api.ts","redux/users-selectors.ts","serviceWorker.js","redux/redux-store.ts","redux/sidebar-selectors.ts","Components/Header/Header.tsx","const/const.js","Components/Sidebar/SidebarItem.tsx","Components/Sidebar/Sidebar.tsx","Components/common/RenderPasswordField.tsx","Components/Login/Login.tsx","Components/Main/Users/User.tsx","Components/common/Paginator.tsx","Components/common/RenderRadioButton.tsx","Components/Main/Users/SearchUsers.tsx","Components/Main/Users/Users.tsx","Components/Main/Friends/FriendsListItem.tsx","Components/Main/Friends/FriendsList.tsx","Components/Main/Friends/FriendsSidebar.tsx","Components/Main/Friends/Friends.tsx","Components/Main/Main.tsx","App.tsx","AppContainer.tsx","index.js","redux/sidebar-reducer.ts","Components/common/CircularPreloader.tsx","utilities/validators/validators.ts","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/auth-selectors.ts"],"names":["RenderTextField","props","icon","label","input","meta","touched","invalid","error","classes","custom","styles","useStyles","className","root","iconLeft","InputProps","variant","placeholder","helperText","makeStyles","position","width","left","top","transform","profileAPI","id","instance","get","response","data","status","put","photo","formData","FormData","append","values","userId","DATE","Date","date","monthWord","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","initialState","posts","message","likeCount","time","profile","currentUserProfile","avatarIsLoading","statusIsLoading","editMode","currentInfoFormSidebarItem","followed","editingPost","profileAC","setEditingPost","type","setCurrentUserProfile","setFollowed","setCurrentInfoFormSidebarItem","addPost","post","deletePost","setUserProfile","setStatus","setPhotos","photos","toggleAvatarLoading","toggleStatusLoading","setEditMode","getProfile","dispatch","a","appAC","toggleLoading","setLanError","getCurrentUserProfile","getFollowed","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","errorFields","messages","key","slice","length","toLowerCase","stopSubmit","Promise","reject","profileReducer","state","action","filter","mapStateToPropsRedirect","isAuth","auth","withAuthRedirect","WrappedComponent","connect","restProps","to","getInitialized","app","initialized","getIsLoading","isLoading","globalError","lanError","setInitialized","promise","getAuthUserData","all","then","e","appReducer","getPosts","getProfileSelector","getCurrentUserProfileSelector","getStatusSelector","getAvatarIsLoading","getStatusIsLoading","getEditMode","getCurrentInfoFormSidebarItem","getFollowedSelector","getEditingPost","dialogs","name","text","dialogsAC","addMessage","dialogsReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","item","usersAPI","getUsers","currentPage","pageSize","searchUsers","term","friend","url","friendUrl","followUser","unfollowUser","delete","users","totalUsersCount","totalFriendsCount","isFollowing","followingInProgress","friends","searchUsersParams","showUsersFrom","currentFriendsSidebarItem","needToChangeListOfFriends","friendIdToRemove","usersAC","setNeedToChangeListOfFriends","setCurrentFriendsSidebarItem","setFriends","setSearchUsersParams","setFollow","setUnfollow","setUsers","setCurrentPage","setTotalUsersCount","setTotalFriendsCount","toggleFollowing","toggleFollowingProgress","setShowUsersFrom","totalCount","console","log","getFriends","removeAndUpdateFriends","_followUnfollowFlow","apiMethod","actionCreator","getFollow","bind","getUnfollow","usersReducer","RenderCheckbox","control","checked","value","color","onChange","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","baseURL","withCredentials","headers","getUsersSelector","getFriendsSelector","getPageSize","getCurrentPage","getFollowingInProgress","getTotalUsersCount","getTotalFriendsCount","getIsFollowing","getSearchUsersParams","getShowUsersFrom","getCurrentFriendsSidebarItem","getNeedToChangeListOfFriends","getFriendIdToRemove","Boolean","window","location","hostname","match","rootReducer","combineReducers","sidebar","sidebarReducer","authReducer","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","getSidebarIsOpen","sidebarIsOpen","getCurrentSidebarItem","currentSidebarItem","theme","createStyles","appBar","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","display","logo","flexGrow","login","button","backgroundColor","borderRadius","minHeight","textTransform","paddingTop","paddingBottom","avatar","height","Header","useSelector","getIsAuth","getLogin","useDispatch","React","useState","open","setOpen","anchorRef","useRef","handleClose","event","current","contains","target","handleListKeyDown","preventDefault","prevOpen","useEffect","focus","onSettingsClick","onLogoutClick","logout","AppBar","clsx","Toolbar","IconButton","aria-label","onClick","sidebarAC","setSidebarIsOpen","edge","Typography","noWrap","Button","ref","aria-controls","undefined","aria-haspopup","small","Avatar","src","Popper","anchorEl","role","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","ListItemIcon","ListItemText","primary","component","RouterLink","SidebarItem","ownIndex","ListItem","setCurrentSidebarItem","selected","indigo","Sidebar","useTheme","Drawer","drawer","paperAnchorDockedLeft","paper","drawerPaper","anchor","drawerHeader","direction","Divider","List","flexShrink","alignItems","padding","mixins","toolbar","justifyContent","border","RenderPasswordField","disabled","showPassword","setShowPassword","password","setPassword","FormControl","textField","InputLabel","htmlFor","outlined","OutlinedInput","outlinedInputRoot","outlinedInputInput","endAdornment","InputAdornment","onMouseDown","iconButton","labelWidth","paddingLeft","ReduxLoginForm","reduxForm","handleSubmit","submitting","pristine","captcha","onSubmit","fieldWrapper","Field","validate","required","shouldNotBeEmpty","size","alt","fullWidth","Login","getCaptchaSelector","Card","card","elevation","title","align","email","rememberMe","marginBottom","User","user","buttonLabel","startIcon","Grid","CardActionArea","CardContent","cardContent","CardActions","disableSpacing","cardActions","some","CircularPreloader","media","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","startPortionNumber","endPortionNumber","elements","p","buttonRoot","disableElevation","prevPortionLabelEnd","prevPortionLabel","nextPortionLabelEnd","nextPortionLabel","paginator","iconButtonRoot","paddingRight","minWidth","RenderRadioButton","labels","rest","formControlLabelElements","el","FormControlLabel","formControlLabel","Radio","FormLabel","formLabel","RadioGroup","radioGroup","SearchUsersReduxForm","reset","classesRadioButton","useStylesRadioButton","submit","SearchUsers","h6","divider","formValue","initialValues","marginTop","margin","flexDirection","searchPanelIsOpen","setSearchPanelIsOpen","usersElements","countTitle","Collapse","in","timeout","unmountOnExit","count","Badge","badgeContent","max","showZero","pageNumber","container","alignContent","justify","wrap","FriendsListItem","handleRemove","listItem","listItemInner","listItemInnerleft","ListItemAvatar","large","Link","popper","zIndex","FriendsList","FriendsListElements","FriendsSidebar","Tabs","indicator","orientation","newValue","tabs","Tab","wrapper","tabRoot","labelIcon","borderLeft","right","leftColumn","rightColumn","flexBasis","DialogsContainer","lazy","Profile","Main","content","contentShift","fallback","exact","path","render","App","initializeApp","catchAllUnhandledErrors","alert","addEventListener","removeEventListener","AppContainer","AppGlobal","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","classesAbsolute","useStylesAbsolute","classesStaticCenter","useStylesStaticCenter","classesStaticTop","useStylesStaticTop","circularWrapper","circular","bottom","maxLength","maxLength30","maxLength100","empty","str","test","authAPI","securityAPI","authAC","Success","CaptchaIsRequired","getCaptchaUrl","_error","getId"],"mappings":"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","file":"static/js/main.15c94f63.chunk.js","sourcesContent":["import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, input, meta: {touched, invalid, error}, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon &&\r\n            <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                variant=\"outlined\"\r\n                label={label}\r\n\r\n                placeholder={label}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n            width: '100%'\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, ResponseTypeAPI} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    async getProfile(id: number) {\r\n        let response = await instance.get<ProfileType>(`profile/${id}`)\r\n        return response.data;\r\n    },\r\n    async getStatus(id: number) {\r\n        let response = await instance.get<string>(`profile/status/${id}`)\r\n        return response.data;\r\n    },\r\n    async updateStatus(status: string) {\r\n        let response = await instance.put<ResponseTypeAPI>(`profile/status`, {status: status})\r\n        return response.data;\r\n    },\r\n    async savePhoto(photo: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photo);\r\n        let response = await instance.put('profile/photo', formData);\r\n        return response.data;\r\n    },\r\n    async saveProfile(values: ProfileType) {\r\n        let response = await instance.put<ResponseTypeAPI<SavePhotoResponseDataType>>(`profile`, values)\r\n        return response.data;\r\n    },\r\n    async getFollowed(userId: number) {\r\n        let response = await instance.get<boolean>(`follow/${userId}`)\r\n        return response.data;\r\n    },\r\n};","export const DATE = {\r\n    // получение текущей даты\r\n    // RETURN - JS DATE\r\n    getCurrentDate() {\r\n        return new Date();\r\n    },\r\n\r\n    dateTranslate(date: Date) {\r\n        let month = date.getMonth() + 1;\r\n        let day = date.getDate();\r\n        let hours = date.getHours();\r\n        let minutes = date.getMinutes()\r\n        let monthWord;\r\n        switch (+month) {\r\n            case 1: {\r\n                monthWord = 'January';\r\n                break;\r\n            }\r\n            case 2: {\r\n                monthWord = 'February';\r\n                break;\r\n            }\r\n            case 3: {\r\n                monthWord = 'March';\r\n                break;\r\n            }\r\n            case 4: {\r\n                monthWord = 'April';\r\n                break;\r\n            }\r\n            case 5: {\r\n                monthWord = 'May';\r\n                break;\r\n            }\r\n            case 6: {\r\n                monthWord = 'June';\r\n                break;\r\n            }\r\n            case 7: {\r\n                monthWord = 'July';\r\n                break;\r\n            }\r\n            case 8: {\r\n                monthWord = 'August';\r\n                break;\r\n            }\r\n            case 9: {\r\n                monthWord = 'September';\r\n                break;\r\n            }\r\n            case 10: {\r\n                monthWord = 'October';\r\n                break;\r\n            }\r\n            case 11: {\r\n                monthWord = 'November';\r\n                break;\r\n            }\r\n            case 12: {\r\n                monthWord = 'December';\r\n                break;\r\n            }\r\n        }\r\n        return `${day} ${monthWord} in ${hours}:${minutes}`;\r\n    },\r\n\r\n\r\n}","import {FormAction, stopSubmit} from 'redux-form';\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {DATE} from \"../utilities/date\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hello, world', likeCount: 1, time: '25 September in 10:10'},\r\n    ] as Array<PostType>,\r\n    profile: null as null | ProfileType,\r\n    currentUserProfile: null as null | ProfileType,\r\n    status: null as null | string,\r\n    avatarIsLoading: false,\r\n    statusIsLoading: false,\r\n    editMode: false,\r\n    currentInfoFormSidebarItem: 0,\r\n    followed: null as null | boolean,\r\n    editingPost: false\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = GetActionsType<typeof profileAC>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction | AppActionsType>\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profile/SET_EDITING_POST': {\r\n            return {...state, editingPost: action.editingPost}\r\n        }\r\n        case 'profile/SET_CURRENT_USER_PROFILE': {\r\n            return {...state, currentUserProfile: action.currentUserProfile}\r\n        }\r\n        case 'profile/SET_FOLLOWED': {\r\n            return {...state, followed: action.followed}\r\n        }\r\n        case 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM': {\r\n            return {...state, currentInfoFormSidebarItem: action.currentInfoFormSidebarItem}\r\n        }\r\n        case 'profile/SET_EDIT_MODE': {\r\n            return {...state, editMode: action.editMode}\r\n        }\r\n        case 'profile/AVATAR_IS_LOADING': {\r\n            return {...state, avatarIsLoading: action.avatarIsLoading}\r\n        }\r\n        case 'profile/STATUS_IS_LOADING': {\r\n            return {...state, statusIsLoading: action.statusIsLoading}\r\n        }\r\n        case 'profile/ADD_POST': {\r\n            let id = state.posts ? state.posts[state.posts.length - 1].id + 1 : 1;\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    id: id,\r\n                    message: action.post,\r\n                    likeCount: 0,\r\n                    time: action.time\r\n                }]\r\n            };\r\n        }\r\n        case 'profile/DELETE_POST': {\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.id)}\r\n        }\r\n        case 'profile/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'profile/SET_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'profile/SET_PHOTOS': {\r\n            if (state.profile) {\r\n                return {\r\n                    ...state, profile: {...state.profile, photos: action.photos}\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const profileAC = {\r\n    setEditingPost : (editingPost: boolean) => ({type: 'profile/SET_EDITING_POST', editingPost} as const),\r\n    setCurrentUserProfile: (currentUserProfile: ProfileType) => ({\r\n        type: 'profile/SET_CURRENT_USER_PROFILE',\r\n        currentUserProfile\r\n    } as const),\r\n    setFollowed: (followed: null | boolean) => ({type: 'profile/SET_FOLLOWED', followed} as const),\r\n    setCurrentInfoFormSidebarItem: (currentInfoFormSidebarItem: number) => ({\r\n        type: 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM',\r\n        currentInfoFormSidebarItem\r\n    } as const),\r\n    addPost: (post: string) => ({type: 'profile/ADD_POST', post, time: DATE.dateTranslate(DATE.getCurrentDate())} as const),\r\n    deletePost: (id: number) => ({type: 'profile/DELETE_POST', id} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'profile/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\r\n    setPhotos: (photos: PhotosType) => ({type: 'profile/SET_PHOTOS', photos} as const),\r\n    toggleAvatarLoading: (avatarIsLoading: boolean) => ({type: 'profile/AVATAR_IS_LOADING', avatarIsLoading} as const),\r\n    toggleStatusLoading: (statusIsLoading: boolean) => ({type: 'profile/STATUS_IS_LOADING', statusIsLoading} as const),\r\n    setEditMode: (editMode: boolean) => ({type: 'profile/SET_EDIT_MODE', editMode} as const),\r\n};\r\n\r\n\r\nexport const getProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentUserProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setCurrentUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getFollowed = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getFollowed(userId);\r\n        dispatch(profileAC.setFollowed(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.getStatus(id);\r\n        dispatch(profileAC.setStatus(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setStatus(status));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: File): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleAvatarLoading(true));\r\n        const data = await profileAPI.savePhoto(photo);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setPhotos(data.data.photos));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleAvatarLoading(false));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (values: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await profileAPI.saveProfile(values)\r\n        //const id = getState().auth.id;\r\n        const id = values.userId\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(getProfile(id));\r\n        } else {\r\n            //data.messages[0]\r\n            let errorFields = {} as any;\r\n            for (let message of data.messages) {\r\n                let key = message.slice(30, message.length - 1).toLowerCase();\r\n                errorFields[key] = 'Invalid url format';\r\n            }\r\n            //dispatch(stopSubmit('profileAboutMeForm', {_error: 'error'}));\r\n            dispatch(stopSubmit('profileAboutMeForm', {'contacts': errorFields}));\r\n            return Promise.reject(data.messages[0]);\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsRedirect = (state: StateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n       let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, StateType>(mapStateToPropsRedirect)(RedirectComponent);\r\n};","import {StateType} from \"./redux-store\";\r\n\r\nexport const getInitialized = (state: StateType) => state.app.initialized;\r\nexport const getIsLoading = (state: StateType) => state.app.isLoading;\r\nexport const getLanError = (state: StateType) => state.app.lanError;","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>;\r\ntype ThunkType = BaseThunkType<AppActionsType>\r\n\r\nlet initialState = {\r\n    initialized: true,\r\n    globalError: null,\r\n    isLoading: false,\r\n    lanError: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZED_SUCCESS':\r\n            return {...state, initialized: true};\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        };\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setInitialized: () => ({type: 'APP/INITIALIZED_SUCCESS'} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n};\r\n\r\nexport const getInitialized = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let promise = dispatch(getAuthUserData());\r\n        // dispatch(somethingElse());\r\n        // dispatch(somethingElse());\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(appAC.setInitialized());\r\n            })\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport default appReducer;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getPosts = (state: StateType) => state.profile.posts;\r\nexport const getProfileSelector = (state: StateType) => state.profile.profile;\r\nexport const getCurrentUserProfileSelector = (state: StateType) => state.profile.currentUserProfile;\r\nexport const getStatusSelector = (state: StateType) => state.profile.status;\r\nexport const getAvatarIsLoading = (state: StateType) => state.profile.avatarIsLoading;\r\nexport const getStatusIsLoading = (state: StateType) => state.profile.statusIsLoading;\r\nexport const getEditMode = (state: StateType) => state.profile.editMode;\r\nexport const getCurrentInfoFormSidebarItem = (state: StateType) => state.profile.currentInfoFormSidebarItem;\r\nexport const getFollowedSelector = (state: StateType) => state.profile.followed;\r\nexport const getEditingPost = (state: StateType) => state.profile.editingPost;\r\n\r\n\r\n\r\n\r\n","import {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {AppActionsType} from \"./app-reducer\";\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimon'},\r\n        {id: 2, name: 'Alex'},\r\n        {id: 3, name: 'John'},\r\n        {id: 4, name: 'Tony'},\r\n    ],\r\n    messages: [\r\n        {id: 1, text: 'Hei-Hei'},\r\n        {id: 2, text: 'Hello'},\r\n        {id: 3, text: 'Yow'}\r\n    ]\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype DialogsActionsType = GetActionsType<typeof dialogsAC>\r\ntype ThunkType = BaseThunkType<DialogsActionsType | AppActionsType>\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'dialogs/ADD_MESSAGE': {\r\n            let id = state.messages ? state.messages[state.messages.length - 1].id : 1;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: id, text: action.message}]\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const dialogsAC = {\r\n    addMessage: (message: string) => ({type: 'dialogs/ADD_MESSAGE', message: message} as const)\r\n};\r\n\r\nexport default dialogsReducer;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(item => {\r\n        if (item[objPropName] === itemId) {\r\n            return {...item, ...newObjProps}\r\n        }\r\n        return item;\r\n    })\r\n};","import {GetItemsType, instance, ResponseTypeAPI} from \"./api\";\r\nimport {FriendsValuesType} from \"../types/types\";\r\n\r\nexport const usersAPI = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        let response = await instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`);\r\n        return response.data;\r\n    },\r\n\r\n    async searchUsers(currentPage = 1, pageSize = 10, term: string, friend: FriendsValuesType) {\r\n        let url = `users?page=${currentPage}&count=${pageSize}`;\r\n        if (term) url = url + `&term=${term}`;\r\n        let friendUrl;\r\n        if (friend === 'all') {\r\n            friendUrl = ''\r\n        } else {\r\n            friendUrl = `&friend=${friend}`\r\n        }\r\n        url = url + friendUrl;\r\n        let response = await instance.get<GetItemsType>(url);\r\n        return response.data;\r\n    },\r\n\r\n    async followUser(id: number) {\r\n        let response = await instance.post<ResponseTypeAPI>(`follow/${id}`)\r\n        return response.data;\r\n    },\r\n    async unfollowUser(id: number) {\r\n        let response = await instance.delete(`follow/${id}`) //as AxiosResponse<any>\r\n                return response.data as Promise<ResponseTypeAPI>;\r\n      },\r\n    // async getProfile(id: number) {\r\n    //     let response = await instance.get<>(`profile/${id}`)\r\n    //     return response.data;\r\n    // }\r\n};\r\n\r\n//================================= TYPE =======================================\r\ntype friendType = 'all' | 'friend' | 'not friend';\r\n","import {updateObjectInArray} from \"../utilities/objects-helpers\";\r\nimport {\r\n    FriendsValuesType,\r\n    SearchUsersParamsType,\r\n    UserType\r\n} from \"../types/types\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/users-api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    users: null as null | Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    totalFriendsCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    isFollowing: false,\r\n    // массив пользователей, для которых послан запрос на подписку/отписку\r\n    followingInProgress: [] as Array<number>,\r\n    friends: null as null | Array<UserType>,\r\n    searchUsersParams: {term: '', friend: 'all'} as SearchUsersParamsType,\r\n    showUsersFrom: 'all' as 'all' | 'search',\r\n    currentFriendsSidebarItem: 0,\r\n    needToChangeListOfFriends: false,\r\n    friendIdToRemove: null as null | number\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS': {\r\n            return {...state,\r\n                needToChangeListOfFriends: action.needToChangeListOfFriends,\r\n                friendIdToRemove: action.friendIdToRemove\r\n            }\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM': {\r\n            return {...state, currentFriendsSidebarItem: action.currentFriendsSidebarItem}\r\n        }\r\n        case 'USERS/SET_FRIENDS': {\r\n            return {...state, friends: action.friends}\r\n        }\r\n        case 'USERS/SET_SHOW_USERS_FROM': {\r\n            return {...state, showUsersFrom: action.showUsersFrom}\r\n        }\r\n        case 'USERS/SEARCH_USERS_PARAMS': {\r\n            return {...state, searchUsersParams: action.searchUsersParams}\r\n        }\r\n        case 'USERS/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        }\r\n        case 'USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        }\r\n        case 'USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage};\r\n        }\r\n        case 'USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        }\r\n        case 'USERS/SET_TOTAL_FRIENDS_COUNT': {\r\n            return {...state, totalFriendsCount: action.totalFriendsCount};\r\n        }\r\n        case 'USERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING': {\r\n            return {...state, isFollowing: action.isFollowing}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                // если запрос на подписку-отписку послан - добавить в массив, иначе удалить из массива\r\n                followingInProgress:\r\n                    action.followingInProgress\r\n                        ? [...state.followingInProgress, action.id]\r\n                        : state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const usersAC = {\r\n    setNeedToChangeListOfFriends: (needToChangeListOfFriends: boolean, friendIdToRemove: number | null) => ({\r\n        type: 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS',\r\n        needToChangeListOfFriends,\r\n        friendIdToRemove\r\n    } as const),\r\n    setCurrentFriendsSidebarItem: (currentFriendsSidebarItem: number) => ({\r\n        type: 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM',\r\n        currentFriendsSidebarItem\r\n    } as const),\r\n    setFriends: (friends: Array<UserType>) => ({type: 'USERS/SET_FRIENDS', friends} as const),\r\n    setSearchUsersParams: (searchUsersParams: SearchUsersParamsType) => ({\r\n        type: 'USERS/SEARCH_USERS_PARAMS',\r\n        searchUsersParams\r\n    } as const),\r\n    setFollow: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    setUnfollow: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'USERS/SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n    setTotalFriendsCount: (totalFriendsCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_FRIENDS_COUNT',\r\n        totalFriendsCount\r\n    } as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'USERS/TOGGLE_LOADING', isLoading} as const),\r\n    toggleFollowing: (isFollowing: boolean) => ({type: 'USERS/TOGGLE_FOLLOWING', isFollowing} as const),\r\n    toggleFollowingProgress: (followingInProgress: boolean, id: number) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        followingInProgress,\r\n        id\r\n    } as const),\r\n    setShowUsersFrom: (showUsersFrom: 'all' | 'search') => ({type: 'USERS/SET_SHOW_USERS_FROM', showUsersFrom} as const)\r\n};\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize);\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchUsers = (currentPage: number, pageSize: number, term: string, friend: FriendsValuesType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, friend);\r\n        console.log('searchUsers')\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getFriends = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, '', 'true');\r\n        dispatch(usersAC.setFriends(data.items));\r\n        dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const removeAndUpdateFriends = (currentPage: number, pageSize: number, id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(true, id));\r\n        let dataFromUnfollow = await usersAPI.unfollowUser(id);\r\n        if (dataFromUnfollow.resultCode === 0) {\r\n            let data = await usersAPI.searchUsers(currentPage, pageSize, '', 'true');\r\n            dispatch(usersAC.setFriends(data.items));\r\n            dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n            dispatch(usersAC.setNeedToChangeListOfFriends(false, null));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(false, id));\r\n    }\r\n};\r\n\r\n\r\ntype FollowUnfollwType = UsersActionsType;//followType | unfollowType\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   id: number,\r\n                                   apiMethod: any,\r\n                                   actionCreator: (id: number) => FollowUnfollwType) => {\r\n    dispatch(usersAC.toggleFollowing(true));\r\n    dispatch(usersAC.toggleFollowingProgress(true, id));\r\n    let data = await apiMethod(id)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(usersAC.toggleFollowingProgress(false, id));\r\n};\r\n\r\nexport const getFollow = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        await _followUnfollowFlow(dispatch, id, usersAPI.followUser.bind(id), usersAC.setFollow);\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(false));\r\n    }\r\n\r\n};\r\n\r\nexport const getUnfollow = (id: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, id, usersAPI.unfollowUser.bind(id), usersAC.setUnfollow);\r\n};\r\n\r\nexport default usersReducer;\r\n\r\n//============================ TYPES ==============================================\r\nexport type initialStateType = typeof initialState;\r\ntype UsersActionsType = GetActionsType<typeof usersAC>\r\ntype DispatchType = Dispatch<UsersActionsType>\r\ntype ThunkType = BaseThunkType<UsersActionsType | AppActionsType>","import {FormControlLabel} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderCheckbox: React.FC<PropsType> = (props) => {\r\n    const {input, label, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {icon && <div className={classes.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={input.value ? true : false}\r\n                        color=\"primary\"\r\n                        onChange={input.onChange}\r\n                    />\r\n                }\r\n                label={label}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RenderCheckbox\r\n\r\n//======================== TYPES ============================\r\ntype PropsType = {\r\n    icon?: React.ReactElement\r\n    label: string\r\n    input: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);","// DAL - уровень доступа к данным\r\n// упрощенный (через коллбэки) доступ к данным на сервере\r\nimport axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e09d6375-5dac-4dde-95ca-700e186a8f7d'\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseTypeAPI<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","import {StateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: StateType) => state.users.users;\r\nexport const getFriendsSelector = (state: StateType) => state.users.friends;\r\nexport const getPageSize = (state: StateType) => state.users.pageSize;\r\nexport const getCurrentPage = (state: StateType) => state.users.currentPage;\r\nexport const getFollowingInProgress = (state: StateType) => state.users.followingInProgress;\r\nexport const getTotalUsersCount = (state: StateType) => state.users.totalUsersCount;\r\nexport const getTotalFriendsCount = (state: StateType) => state.users.totalFriendsCount;\r\nexport const getIsLoading = (state: StateType) => state.users.isLoading;\r\nexport const getIsFollowing = (state: StateType) => state.users.isFollowing;\r\nexport const getSearchUsersParams = (state: StateType) => state.users.searchUsersParams;\r\nexport const getShowUsersFrom = (state: StateType) => state.users.showUsersFrom;\r\nexport const getCurrentFriendsSidebarItem = (state: StateType) => state.users.currentFriendsSidebarItem;\r\nexport const getNeedToChangeListOfFriends = (state: StateType) => state.users.needToChangeListOfFriends;\r\nexport const getFriendIdToRemove = (state: StateType) => state.users.friendIdToRemove;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\n// объединяем редьюсеры в объект\r\nlet rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getSidebarIsOpen = (state: StateType) => state.sidebar.sidebarIsOpen;\r\nexport const getCurrentSidebarItem = (state: StateType) => state.sidebar.currentSidebarItem;","import React from 'react';\r\nimport {drawerWidth} from \"../../const/const\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {AppBar} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsAuth, getLogin} from \"../../redux/auth-selectors\";\r\nimport {getSidebarIsOpen} from \"../../redux/sidebar-selectors\";\r\nimport {getProfileSelector} from \"../../redux/profile-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        logo: {\r\n            flexGrow: 1\r\n        },\r\n        login: {\r\n            marginRight: 10\r\n        },\r\n        button: {\r\n            '&:hover': {\r\n                backgroundColor: 'rgba(0,0,0,0.3)',\r\n                borderRadius: 0,\r\n                minHeight: 64\r\n            },\r\n            textTransform: 'none',\r\n            paddingTop: 0,\r\n            paddingBottom: 0\r\n        },\r\n        label: {\r\n            minHeight: 64\r\n        },\r\n        avatar: {\r\n            width: 50,\r\n            height: 50,\r\n            marginRight: 10\r\n        }\r\n\r\n    }),\r\n);\r\n\r\nconst Header: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    const isAuth = useSelector(getIsAuth);\r\n    const sidebarIsOpen = useSelector(getSidebarIsOpen);\r\n    const login = useSelector(getLogin);\r\n    const profile = useSelector(getProfileSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDrawerOpen = () => {\r\n        dispatch(sidebarAC.setSidebarIsOpen(true));\r\n    };\r\n\r\n    //===================================================================================\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //=========================================================================\r\n    const onSettingsClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event)\r\n    };\r\n    const onLogoutClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event);\r\n        dispatch(logout());\r\n    }\r\n    //==================================================================================\r\n\r\n\r\n    return (\r\n        <AppBar\r\n            position=\"fixed\"\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: sidebarIsOpen,\r\n            })}\r\n        >\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={handleDrawerOpen}\r\n                    edge=\"start\"\r\n                    className={clsx(classes.menuButton, sidebarIsOpen && classes.hide)}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" noWrap className={classes.logo}>\r\n                    Social Network\r\n                </Typography>\r\n\r\n                {\r\n                    isAuth\r\n                        ? <>\r\n                            <Button\r\n                                ref={anchorRef}\r\n                                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleToggle}\r\n                                classes={{\r\n                                    root: classes.button,\r\n                                    label: classes.label\r\n                                }}\r\n                                color=\"inherit\">\r\n                                <Typography variant=\"subtitle1\" noWrap className={classes.login}>\r\n                                    {login}\r\n                                </Typography>\r\n                                {profile && profile.photos.small\r\n                                    ? <Avatar src={profile.photos.small} className={classes.avatar}/>\r\n                                    : <Avatar className={classes.avatar}/>}\r\n                                <ExpandMoreIcon/>\r\n                            </Button>\r\n                            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n                                {({TransitionProps, placement}) => (\r\n                                    <Grow\r\n                                        {...TransitionProps}\r\n                                        style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                    >\r\n                                        <Paper>\r\n                                            <ClickAwayListener onClickAway={handleClose}>\r\n\r\n                                                <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                          onKeyDown={handleListKeyDown}>\r\n                                                    <MenuItem onClick={onSettingsClick}>\r\n                                                        <ListItemIcon>\r\n                                                            <SettingsIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary=\"Settings\"/>\r\n                                                    </MenuItem>\r\n                                                    <MenuItem onClick={onLogoutClick}>\r\n                                                        <ListItemIcon>\r\n                                                            <ExitToAppIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary=\"Logout\"/>\r\n                                                    </MenuItem>\r\n                                                </MenuList>\r\n                                            </ClickAwayListener>\r\n                                        </Paper>\r\n                                    </Grow>\r\n                                )}\r\n                            </Popper>\r\n                        </>\r\n                        : <Button color=\"inherit\" component={RouterLink} to='/login'>\r\n                            Войти\r\n                        </Button>\r\n                }\r\n\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","export const drawerWidth = 180;","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {profileAC} from \"../../redux/profile-reducer\";\r\nimport {usersAC} from \"../../redux/users-reduser\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\nimport {getCurrentSidebarItem} from \"../../redux/sidebar-selectors\";\r\n\r\nconst SidebarItem: React.FC<PropsTypes> = (props) => {\r\n    const {to, primary, icon, ownIndex} = props;\r\n    const classes = useStyles();\r\n    const currentSidebarItem = useSelector(getCurrentSidebarItem)\r\n    const dispatch = useDispatch();\r\n\r\n    const onClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(ownIndex));\r\n        dispatch(profileAC.setEditMode(false));\r\n        dispatch(usersAC.setShowUsersFrom('all'));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n    }\r\n\r\n    return (\r\n        <li>\r\n        <ListItem\r\n            onClick={onClick}\r\n            selected={ownIndex === currentSidebarItem}\r\n            button\r\n            component={RouterLink}\r\n            to={to}>\r\n            {icon ? <ListItemIcon className={clsx(ownIndex === currentSidebarItem && classes.icon)}>\r\n                {icon}\r\n            </ListItemIcon> : null}\r\n            <ListItemText primary={primary}/>\r\n        </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;\r\n\r\n//============================== TYPES ==================================\r\ntype PropsTypes = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\n//============================== STYLES ===================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    icon: {\r\n        color: indigo[500]\r\n    }\r\n}));","import React from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SupervisedUserCircleIcon from '@material-ui/icons/SupervisedUserCircle';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {drawerWidth} from \"../../const/const\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getSidebarIsOpen} from \"../../redux/sidebar-selectors\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nconst Sidebar: React.FC = () => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const sidebarIsOpen = useSelector(getSidebarIsOpen);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDrawerClose = () => {\r\n        dispatch(sidebarAC.setSidebarIsOpen(false));\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            classes={{\r\n                root: classes.root,\r\n                paperAnchorDockedLeft: classes.paperAnchorDockedLeft,\r\n                paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={sidebarIsOpen}\r\n        >\r\n            <div className={classes.drawerHeader}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                    {theme.direction === 'ltr' ? <ChevronLeftIcon/> : <ChevronRightIcon/>}\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <List>\r\n                <SidebarItem ownIndex={1} to={\"/profile\"} primary={'My profile'} icon={<HomeIcon/>}/>\r\n                <SidebarItem ownIndex={2} to={\"/dialogs\"} primary={'Dialogs'} icon={<ChatIcon/>}/>\r\n                <SidebarItem ownIndex={3} to={\"/users\"} primary={'Users'} icon={<SupervisedUserCircleIcon/>}/>\r\n                <SidebarItem ownIndex={4} to={\"/friends\"} primary={'Friends'} icon={<AccountCircleIcon/>}/>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        backgroundColor: indigo[50],\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    paperAnchorDockedLeft: {\r\n        border: 0\r\n    }\r\n}));","import React, {ChangeEvent, SyntheticEvent, useState} from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst RenderPasswordField: React.FC<PropsType> = (props) => {\r\n    const {label, input, placeholder, meta, disabled} = props;\r\n    const classes = useStyles();\r\n\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [password, setPassword] = useState('')\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value);\r\n    };\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LockIcon className={classes.iconLeft}/>\r\n\r\n            <FormControl className={classes.textField}\r\n                         variant=\"outlined\">\r\n\r\n                <InputLabel htmlFor=\"outlined-adornment-password\" classes={{\r\n                    outlined: classes.outlined\r\n                }}>{label}</InputLabel>\r\n\r\n                <OutlinedInput\r\n                    //className={classes.input}\r\n                    classes={{\r\n                        root: classes.outlinedInputRoot,\r\n                        input: classes.outlinedInputInput\r\n                    }}\r\n                    disabled={disabled}\r\n                    id=\"outlined-adornment-password\"\r\n                    placeholder={placeholder}\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    value={password}\r\n                    error={meta.touched && meta.invalid}\r\n                    onChange={handleChange}\r\n\r\n                    {...input}\r\n\r\n\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={handleClickShowPassword}\r\n                                onMouseDown={handleMouseDownPassword}\r\n                                edge=\"end\"\r\n                                className={classes.iconButton}\r\n                            >\r\n                                {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                    labelWidth={73}\r\n                />\r\n\r\n                {meta.touched && meta.invalid && <Typography color='error' variant='caption' className={classes.error}>\r\n                    {meta.error}\r\n                </Typography>}\r\n\r\n            </FormControl>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RenderPasswordField;\r\n\r\n//=============================== TYPES =================================\r\ntype PropsType = {\r\n    label: string\r\n    input: any\r\n    placeholder: string\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    disabled: boolean\r\n}\r\n\r\n//=============================== STYLES ================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        width: '100%'\r\n    },\r\n    iconLeft: {\r\n        position: 'absolute',\r\n        left: -5,\r\n        top: '50%',\r\n        transform: 'translate(-100%, -50%)'\r\n    },\r\n    textField: {\r\n        width: '100%'\r\n    },\r\n    error: {\r\n        paddingLeft: 14,\r\n        paddingTop: 2\r\n    },\r\n    outlinedInputRoot: {\r\n        //height: 40,\r\n        width: '100%'\r\n    },\r\n    outlinedInputInput: {\r\n        height: 40,\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    outlined: {\r\n        transform: 'translate(14px, 12px) scale(1)'\r\n    },\r\n    iconButton: {\r\n        padding: 8\r\n    }\r\n\r\n});","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required, shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getCaptchaSelector, getIsAuth} from \"../../redux/auth-selectors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport RenderTextField from \"../common/RenderTextField\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderPasswordField from \"../common/RenderPasswordField\";\r\nimport RenderCheckbox from \"../common/RenderCheckbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n//=================================== Form =========================================\r\nconst LoginForm: React.FC<LoginFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, error, captcha} = props;\r\n    const classes = useStyles();\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name='email'\r\n                   component={RenderTextField}\r\n                   icon={<MailOutlineIcon/>}\r\n                   className={classes.textField}\r\n                   validate={[required, shouldNotBeEmpty]}\r\n                   label='email'\r\n                   size='small'\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field\r\n                name='password'\r\n                //disabled={isLoading}\r\n                className={classes.textField}\r\n                component={RenderPasswordField}\r\n                placeholder='Enter your password'\r\n                label='Password'\r\n                validate={[required, shouldNotBeEmpty]}\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name=\"rememberMe\" component={RenderCheckbox} label=\"Remember me\"/>\r\n        </div>\r\n\r\n        {\r\n            captcha\r\n            && <>\r\n                <div className={classes.fieldWrapper}>\r\n                    <img src={captcha} alt=\"\"/>\r\n                </div>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field\r\n                        name='captcha'\r\n                        //disabled={isLoading}\r\n                        className={classes.textField}\r\n                        component={RenderTextField}\r\n                        placeholder='Enter symbols from image'\r\n                        label='Captcha'\r\n                        validate={[required, shouldNotBeEmpty]}\r\n                        size='small'\r\n                    />\r\n                </div>\r\n            </>\r\n        }\r\n\r\n        {error && !pristine &&\r\n        <Typography color='error' variant='h6' className={classes.fieldWrapper}>\r\n            {error}\r\n        </Typography>}\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Button type=\"submit\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    fullWidth={true}\r\n                    size='large'\r\n                    className={classes.button}\r\n                    disabled={submitting || pristine}>\r\n                Enter\r\n            </Button>\r\n        </div>\r\n\r\n    </form>\r\n};\r\n\r\n/////////////////////-ReduxLoginForm-////////////////////////////////////////\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n\r\n//========================= COMPONENT =============================================================\r\nconst Login: React.FC = () => {\r\n    const classes = useStyles();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const captcha = useSelector(getCaptchaSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (values: LoginFormValuesType) => {\r\n        dispatch(login(values.email, values.password, values.rememberMe, values.captcha));\r\n    };\r\n    if (isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.card} elevation={6}>\r\n                <Typography\r\n                    className={classes.title}\r\n                    align='center'\r\n                    color='primary'\r\n                    variant='h5'\r\n                >\r\n                    Enter in your profile\r\n                </Typography>\r\n\r\n                <ReduxLoginForm onSubmit={onSubmit}\r\n                                captcha={captcha}/>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Login;\r\n\r\n//========================== TYPES ===============================\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\ntype LoginFormPropsType = InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps;\r\n\r\n//========================== STYLES ==============================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        width: 500,\r\n        padding: '15px 30px 15px 10px',\r\n        borderRadius: 10\r\n    },\r\n    error: {\r\n        width: 300,\r\n        marginBottom: 10,\r\n    },\r\n    textField: {\r\n\r\n        width: '100%',\r\n    },\r\n    fieldWrapper: {\r\n        marginLeft: 35,\r\n        marginBottom: 10\r\n    },\r\n    button: {\r\n        //marginBottom: 10,\r\n    },\r\n    title: {\r\n        marginBottom: 20\r\n    }\r\n});\r\n\r\n\r\n","import React from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\n\r\nconst User: React.FC<PropType> = (props) => {\r\n    const {user} = props;\r\n    const classes = useStyles();\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const dispatch = useDispatch();\r\n    const src = user.photos.small;\r\n\r\n    const onFollowUnfollowClick = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n    const buttonLabel = user.followed ? 'UnFollow' : 'Follow';\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root}>\r\n                <CardActionArea component={RouterLink}\r\n                                to={`/users/${user.id}`}>\r\n                    <Avatar className={classes.avatar}\r\n                            src={src ? src : undefined}\r\n                            variant=\"rounded\"/>\r\n                </CardActionArea>\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography color='primary'\r\n                                variant='subtitle2'\r\n                                align='center'>\r\n                        {user.name}\r\n                    </Typography>\r\n                    <Typography //color='primary'\r\n                        variant='body2'\r\n                        align='center'>\r\n                        {user.status}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions disableSpacing className={classes.cardActions}>\r\n                    <Button className={classes.button}\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size='small'\r\n                            fullWidth\r\n                            disabled={followingInProgress.some(item => item === user.id)}\r\n                            onClick={onFollowUnfollowClick}\r\n                            startIcon={startIcon}\r\n                    >\r\n                        {buttonLabel}\r\n                    </Button>\r\n                    {\r\n                        isFollowing\r\n                        && followingInProgress.some(item => item === user.id)\r\n                        &&\r\n                        <CircularPreloader size={20} style={'absolute'}/>\r\n                    }\r\n                </CardActions>\r\n\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default User;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n        padding: 10\r\n    },\r\n    media: {\r\n        height: 150,\r\n        borderRadius: 5\r\n    },\r\n    avatar: {\r\n        width: 150,\r\n        height: 150,\r\n    },\r\n    cardContent: {\r\n        padding: 5\r\n    },\r\n    cardActions: {\r\n        padding: 0,\r\n        position: 'relative'\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    }\r\n});","import React, {useState} from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    const classes = useStyles();\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);// число страниц\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i < pagesCount + 1; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize); // число порций (блоков) страниц\r\n    let [portionNumber, setPortionNumber] = useState(1);// текущий номер порции (начинается с 1)\r\n    let startPortionNumber = (portionNumber - 1) * portionSize + 1; // номер первого элемента в порции\r\n    let endPortionNumber = portionNumber * portionSize; // номер последнего элемента в порции\r\n\r\n    const setPrevPortion = () => {\r\n        setPortionNumber(portionNumber - 1);\r\n        onPageChanged((portionNumber - 2) * portionSize + 1);\r\n    };\r\n\r\n    const setNextPortion = () => {\r\n        setPortionNumber(portionNumber + 1);\r\n        onPageChanged((portionNumber) * portionSize + 1);\r\n    };\r\n\r\n    const setFirstPortion = () => {\r\n        setPortionNumber(1);\r\n        onPageChanged(1);\r\n    };\r\n\r\n    const setLastPortion = () => {\r\n        setPortionNumber(portionCount);\r\n        //onPageChanged((portionCount - 1) * portionSize + 1);\r\n        onPageChanged(pagesCount);\r\n    };\r\n\r\n    const elements = pages\r\n        .filter(p => p >= startPortionNumber && p <= endPortionNumber)\r\n        .map(p => (\r\n                <Button\r\n                    className={classes.buttonRoot}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p)\r\n                    }}\r\n                    size='small'\r\n                    color='primary'\r\n                    disableElevation\r\n                    variant={p === currentPage ? 'contained' : \"outlined\"}\r\n                >\r\n                    {p}\r\n                </Button>\r\n            )\r\n        );\r\n\r\n    const prevPortionLabelStart = (portionNumber - 2) * pageSize + 1;\r\n    const prevPortionLabelEnd = (portionNumber - 1) * pageSize;\r\n    const prevPortionLabel = `${prevPortionLabelStart}...${prevPortionLabelEnd}`;\r\n\r\n    const nextPortionLabelStart = portionNumber * pageSize + 1;\r\n    const nextPortionLabelEnd = (portionNumber < portionCount - 1) ? (portionNumber + 1) * pageSize : pagesCount;\r\n    const nextPortionLabel = `${nextPortionLabelStart}...${nextPortionLabelEnd}`;\r\n\r\n    return (\r\n        <div className={classes.paginator}>\r\n\r\n            {portionNumber > 1 &&\r\n            <IconButton onClick={setFirstPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <FirstPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n            {portionNumber > 1 && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setPrevPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {prevPortionLabel}\r\n            </Button>}\r\n\r\n            {elements}\r\n\r\n            {portionNumber < portionCount && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setNextPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {nextPortionLabel}\r\n            </Button>}\r\n\r\n            {portionNumber < portionCount &&\r\n            <IconButton onClick={setLastPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <LastPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n        </div>)\r\n};\r\n\r\nexport default Paginator;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    paginator: {\r\n        marginBottom: 10,\r\n    },\r\n    buttonRoot: {\r\n        marginRight: 5,\r\n        paddingLeft: 3,\r\n        paddingRight: 3,\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        minWidth: 24\r\n    },\r\n    iconButtonRoot: {\r\n        borderRadius: 4,\r\n        border: '1px solid rgba(63, 81, 181, 0.5)',\r\n        marginRight: 5,\r\n        padding: 0,\r\n        color: indigo[500]\r\n    },\r\n    icon: {\r\n        width: 22.4,\r\n        height: 22.4\r\n    }\r\n})\r\n","import {FormControl} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\n\r\nconst RenderRadioButton: React.FC<PropsType> = (props) => {\r\n    const {labels, value, input, classes, label, ...rest} = props;\r\n    const formControlLabelElements = labels\r\n        .map((el, i) => <FormControlLabel value={el.value}\r\n                                     key={i}\r\n                                     className={classes.formControlLabel}\r\n                                     control={<Radio/>}\r\n                                     label={el.label}/>)\r\n\r\n    return (\r\n        <FormControl >\r\n            <FormLabel component=\"legend\" className={classes.formLabel}>\r\n                {label}\r\n            </FormLabel>\r\n            <RadioGroup value=\"all\" className={classes.radioGroup}  {...input} {...rest}>\r\n                {formControlLabelElements}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default RenderRadioButton;\r\n\r\n//======================= TYPES ======================================================\r\ntype labelsItemType = {\r\n    value: string\r\n    label: string\r\n}\r\ntype PropsType = {\r\n    value: string\r\n    labels: Array<labelsItemType>\r\n    input: any\r\n    classes: any\r\n    label: string\r\n}","import React, {useRef} from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, submit} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {Button, Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderRadioButton from \"../../common/RenderRadioButton\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {searchUsers, usersAC} from \"../../../redux/users-reduser\";\r\nimport {SearchUsersParamsType} from \"../../../types/types\";\r\n\r\n//========================== FORM =======================================\r\nconst SearchUsersForm: React.FC<SearchUsersFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    const classes = useStyles();\r\n    const classesRadioButton = useStylesRadioButton();\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <Field name='term'\r\n                   component={RenderTextField}\r\n                   fullWidth\r\n                   validate={[shouldNotBeEmpty]}\r\n                   label='User name'\r\n                   size='small'\r\n                   onChange={() => dispatch(submit('searchUsers'))}\r\n            />\r\n\r\n            <Field name='friend'\r\n                   label='User are friend or not'\r\n                   component={RenderRadioButton}\r\n                   classes={classesRadioButton}\r\n                   labels={[\r\n                       {value: \"all\", label: 'All'},\r\n                       {value: \"true\", label: 'Friend'},\r\n                       {value: \"false\", label: 'Not friend'}\r\n                   ]}\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SearchIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    Search\r\n                </Button>\r\n            </div>\r\n\r\n\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst SearchUsersReduxForm = reduxForm<SearchUsersParamsType, SearchUsersFormOwnPropsType>({\r\n    form: 'searchUsers',\r\n    //validate\r\n})(SearchUsersForm);\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst SearchUsers = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: SearchUsersParamsType) => {\r\n        console.log(formValue)\r\n        dispatch(usersAC.setSearchUsersParams(formValue));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n        dispatch(usersAC.setShowUsersFrom('search'));\r\n    };\r\n\r\n    const initialValues = {term: '', friend: 'all'} as SearchUsersParamsType;\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6'\r\n                        color='primary'\r\n                        classes={{\r\n                            h6: classes.title\r\n                        }}>\r\n                Search users\r\n            </Typography>\r\n            <Divider classes={{\r\n                root: classes.divider\r\n            }}/>\r\n            <SearchUsersReduxForm onSubmit={onSubmit} initialValues={initialValues}/>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default SearchUsers;\r\n\r\n//===================================== TYPES====================================================\r\ntype SearchUsersFormPropsType =\r\n    InjectedFormProps<SearchUsersParamsType, SearchUsersFormOwnPropsType>\r\n    & SearchUsersFormOwnPropsType;\r\ntype SearchUsersFormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 10,\r\n        paddingBottom: 10,\r\n        marginBottom: 10\r\n    },\r\n    title: {\r\n        marginLeft: 10,\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    }\r\n});\r\nconst useStylesRadioButton = makeStyles({\r\n    formLabel: {\r\n        margin: '15px 10px 5px',\r\n    },\r\n    radioGroup: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        marginLeft: 10\r\n    },\r\n    formControlLabel: {},\r\n\r\n});","import React, {useEffect, useState} from 'react';\r\nimport User from \"./User\";\r\nimport CircularPreloader from '../../common/CircularPreloader';\r\nimport Paginator from '../../common/Paginator';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getSearchUsersParams, getShowUsersFrom,\r\n    getTotalUsersCount,\r\n    getUsersSelector\r\n} from \"../../../redux/users-selectors\";\r\nimport {getIsLoading} from \"../../../redux/app-selectors\";\r\nimport {getUsers, searchUsers, usersAC} from \"../../../redux/users-reduser\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport SearchUsers from \"./SearchUsers\";\r\n\r\ntype PropsType = {}\r\n\r\nlet Users: React.FC<PropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const users = useSelector(getUsersSelector);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const pageSize = useSelector(getPageSize);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const searchUsersParams = useSelector(getSearchUsersParams);\r\n    const showUsersFrom = useSelector(getShowUsersFrom);\r\n    const dispatch = useDispatch();\r\n\r\n    const [searchPanelIsOpen, setSearchPanelIsOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (showUsersFrom === 'all') {\r\n            console.log('all')\r\n            dispatch(getUsers(currentPage, pageSize));\r\n        } else if (showUsersFrom === 'search') {\r\n            console.log('search')\r\n            dispatch(searchUsers(currentPage, pageSize, searchUsersParams.term, searchUsersParams.friend));\r\n        }\r\n\r\n    }, [currentPage, pageSize, showUsersFrom, searchUsersParams.term, searchUsersParams.friend]);\r\n\r\n    let usersElements = users && users.map(user => <User\r\n        user={user}\r\n        key={user.id}\r\n    />);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentPage(pageNumber));\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setSearchPanelIsOpen(!searchPanelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        dispatch(usersAC.setShowUsersFrom('all'));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n    };\r\n\r\n    const countTitle = showUsersFrom === 'all' ? 'Total all users count:' : 'Total users count from search:'\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Collapse in={searchPanelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <SearchUsers/>\r\n            </Collapse>\r\n\r\n            <div className={classes.count}>\r\n                <Button onClick={onSearchCharactersClick}\r\n                        size='small'\r\n                        className={classes.button}\r\n                        color='primary'\r\n                        startIcon={searchPanelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {searchPanelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        size='small'\r\n                        color='primary'\r\n                        disabled={showUsersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                <Typography color='primary'\r\n                            variant='subtitle2'\r\n                            className={classes.countTitle}\r\n                >\r\n                    {countTitle}\r\n                </Typography>\r\n\r\n                <Badge badgeContent={totalUsersCount} color=\"primary\" max={99999} showZero>\r\n                    <PeopleIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n\r\n            {\r\n                totalUsersCount !==0 && totalUsersCount && pageSize && currentPage &&\r\n                <Paginator totalItemsCount={totalUsersCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentPage}\r\n                           onPageChanged={onPageChanged}\r\n                />\r\n            }\r\n\r\n            {isLoading || !users\r\n                ? <CircularPreloader/>\r\n                : <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                    {usersElements}\r\n                </Grid>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Users);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        //padding: 15,\r\n        minHeight: '100vh'\r\n    },\r\n    count: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    },\r\n    countTitle: {\r\n        marginRight: 10\r\n    },\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    }\r\n});\r\n\r\n","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\n\r\nconst FriendsListItem: React.FC<PropsTypes> = (props) => {\r\n    const {friend} = props;\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n\r\n    const onListItemClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(3));\r\n    };\r\n\r\n    //========================= popper ========================================\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    const handleRemove = (event: React.MouseEvent<EventTarget>) => {\r\n        dispatch(usersAC.setNeedToChangeListOfFriends(true, friend.id))\r\n        handleClose(event);\r\n    }\r\n\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //=========================================================\r\n    //disabled={followingInProgress.some(item => item === friend.id)}\r\n\r\n\r\n    return (\r\n        <>\r\n            <Divider className={classes.divider}/>\r\n            <ListItem //disabled={followingInProgress.some(item => item === friend.id)}\r\n                      className={classes.listItem}\r\n            >\r\n\r\n                <div className={classes.listItemInner}>\r\n                    <div className={classes.listItemInnerleft}>\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={friend.photos.large ? friend.photos.large : undefined}\r\n                            />\r\n                        </ListItemAvatar>\r\n                        <Link component={RouterLink} to={`/users/${friend.id}`} onClick={onListItemClick}>\r\n                            {friend.name}\r\n                        </Link>\r\n                    </div>\r\n                    <div>\r\n                        <IconButton ref={anchorRef}\r\n                                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleToggle}\r\n                                    edge=\"end\"\r\n                                    aria-label=\"delete\"\r\n                                    className={classes.iconButton}>\r\n                            <MoreVertIcon/>\r\n                        </IconButton>\r\n                        <Popper className={classes.popper}\r\n                                open={open}\r\n                                anchorEl={anchorRef.current}\r\n                                role={undefined}\r\n                                transition\r\n                                placement='bottom-end'\r\n                                disablePortal>\r\n                            {({TransitionProps, placement}) => (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                      onKeyDown={handleListKeyDown}>\r\n                                                <MenuItem onClick={handleRemove}>Delete from friends</MenuItem>\r\n                                                <MenuItem onClick={handleClose}>Something else</MenuItem>\r\n                                                <MenuItem onClick={handleClose}>Something else</MenuItem>\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            )}\r\n                        </Popper>\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    isFollowing && followingInProgress.some(item => item === friend.id)\r\n                    && <CircularPreloader size={80} style={'absolute'}/>\r\n                }\r\n\r\n            </ListItem>\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default FriendsListItem;\r\n\r\n//========================== TYPES =============================================\r\ntype PropsTypes = {\r\n    friend: UserType\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    popper: {\r\n        zIndex: 1000\r\n    },\r\n    listItemInner: {\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    listItemInnerleft: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexGrow: 1\r\n    },\r\n    listItem: {\r\n        position: 'relative'\r\n    }\r\n\r\n});","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage, getFriendIdToRemove,\r\n    getFriendsSelector,\r\n    getNeedToChangeListOfFriends,\r\n    getPageSize\r\n} from \"../../../redux/users-selectors\";\r\nimport FriendsListItem from \"./FriendsListItem\";\r\nimport React, {useEffect} from \"react\";\r\nimport {getFriends, removeAndUpdateFriends} from \"../../../redux/users-reduser\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\n\r\nconst FriendsList: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    const friends = useSelector(getFriendsSelector);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const needToChangeListOfFriends = useSelector(getNeedToChangeListOfFriends);\r\n    const friendIdToRemove = useSelector(getFriendIdToRemove);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const FriendsListElements = friends\r\n        && friends.map(el => <FriendsListItem key={el.id} friend={el}/>);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getFriends(currentPage, pageSize));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (needToChangeListOfFriends && friendIdToRemove) {\r\n            dispatch(removeAndUpdateFriends(currentPage, pageSize, friendIdToRemove))\r\n        }\r\n    }, [needToChangeListOfFriends])\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <List>\r\n                {FriendsListElements}\r\n            </List>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsList;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n});","import React, {useEffect} from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\n\r\n\r\nconst FriendsSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(newValue));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Tabs\r\n                classes={{\r\n                    indicator: classes.indicator\r\n                }}\r\n                orientation=\"vertical\"\r\n                value={currentFriendsSidebarItem}\r\n                onChange={handleChange}\r\n                className={classes.tabs}\r\n            >\r\n\r\n                <Tab label=\"All friends\" icon={<GroupIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label=\"Search friends\" icon={<SearchIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n\r\n            </Tabs>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid #ccc`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none'\r\n    },\r\n    icon: {\r\n        marginRight: 15,\r\n        marginLeft: 15\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsList from \"./FriendsList\";\r\nimport FriendsSidebar from \"./FriendsSidebar\";\r\n\r\n\r\nconst Friends = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.leftColumn}>\r\n                <FriendsList/>\r\n            </div>\r\n            <div className={classes.rightColumn}>\r\n                <FriendsSidebar/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Friends);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        display: \"flex\"\r\n    },\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    leftColumn: {\r\n        flexGrow: 1,\r\n        marginRight: 15,\r\n    },\r\n    rightColumn: {\r\n        flexBasis: 160,\r\n    }\r\n});","import React, {Suspense} from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport CircularPreloader from \"../common/CircularPreloader\";\nimport Login from \"../Login/Login\";\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {drawerWidth} from \"../../const/const\";\nimport clsx from \"clsx\";\nimport {useSelector} from \"react-redux\";\nimport {getInitialized} from \"../../redux/app-selectors\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport Users from \"./Users/Users\";\nimport {getSidebarIsOpen} from \"../../redux/sidebar-selectors\";\nimport Friends from \"./Friends/Friends\";\n\nconst DialogsContainer = React.lazy(() => import('./Dialogs/DialogsContainer'));\nconst Profile = React.lazy(() => import('./Profile/Profile'));\n\nconst Main: React.FC = () => {\n\n    const classes = useStyles();\n\n    const initialized = useSelector(getInitialized);\n    const sidebarIsOpen = useSelector(getSidebarIsOpen);\n\n    if (!initialized) {\n        return <CircularPreloader/>\n    }\n\n    return (\n        <main className={clsx(classes.content, {\n            [classes.contentShift]: sidebarIsOpen,\n        })}>\n            <div className={classes.drawerHeader}/>\n            <Suspense fallback={<CircularPreloader/>}>\n                <Switch>\n                    <Route exact path='/' render={() => <Profile/>}/>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/profile/:userId?' render={() => <Profile/>}/>\n                    <Route exact path='/users' render={() => <Users/>}/>\n                    <Route path='/users/:userId' render={() => <Profile/>}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='*' render={() => <div>404 Page not found</div>}/>\n                </Switch>\n            </Suspense>\n        </main>\n    );\n};\n\nexport default Main;\n\n//========================== STYLES ================================================\nconst useStyles = makeStyles((theme: Theme) => ({\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-end',\n    },\n    content: {\n        backgroundColor: indigo[50],\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginLeft: -drawerWidth,\n        minHeight: '100vh',\n        padding: 15\n    },\n    contentShift: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginLeft: 0,\n    },\n}));\n","import React, {useEffect} from 'react';\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {AppPropsType} from \"./AppContainer\";\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\nimport {Container} from \"@material-ui/core\";\n\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: 'flex',\n        }\n    }),\n);\n\nconst App: React.FC<AppPropsType> = (props) => {\n    const {initializeApp} = props;\n\n    const classes = useStyles();\n\n    const catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(e);\n    };\n\n    useEffect(() => {\n        initializeApp();\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors);\n        return () => {\n            window.removeEventListener('unhandledrejection', catchAllUnhandledErrors);\n        }\n    }, [])\n\n    return (\n        <div className={classes.root}>\n            <Header/>\n            <Sidebar/>\n            <Main/>\n        </div>\n    );\n};\n\nexport default App;\n\n","import {connect, Provider} from \"react-redux\";\r\nimport store, {StateType} from \"./redux/redux-store\";\r\nimport {getInitialized} from \"./redux/app-reducer\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport App from \"./App\";\r\n\r\nconst mapStateToProps = (state: StateType) => ({});\r\n\r\nconst AppContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {initializeApp: getInitialized})(App)\r\n\r\ntype MapStatePropsType = {};\r\n\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n};\r\n\r\nexport type AppPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst AppGlobal = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default AppGlobal;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppGlobal from \"./AppContainer\";\n\nReactDOM.render(\n    <AppGlobal/>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n\n","import {GetActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    sidebarIsOpen: true,\r\n    currentSidebarItem: null as null | number\r\n}\r\n\r\ntype initialStateType = typeof initialState;\r\nexport type SidebarActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: SidebarActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SIDEBAR/SET_SIDEBAR_IS_OPEN': {\r\n            return {...state, sidebarIsOpen: action.sidebarIsOpen}\r\n        }\r\n        case 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM': {\r\n            return {...state, currentSidebarItem: action.currentSidebarItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const sidebarAC = {\r\n    setSidebarIsOpen: (sidebarIsOpen: boolean) => ({type: 'SIDEBAR/SET_SIDEBAR_IS_OPEN', sidebarIsOpen} as const),\r\n    setCurrentSidebarItem: (currentSidebarItem: null | number) => ({type: 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM', currentSidebarItem} as const)\r\n};\r\n\r\nexport default sidebarReducer;","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst CircularPreloader: React.FC<PropsType> = (props) => {\r\n    const {size = 100, style = 'static-center'} = props;\r\n    const classesAbsolute = useStylesAbsolute();\r\n    const classesStaticCenter = useStylesStaticCenter();\r\n    const classesStaticTop = useStylesStaticTop();\r\n    let classes = classesStaticCenter;\r\n    if (style === 'absolute') {\r\n        classes = classesAbsolute;\r\n    }\r\n    if (style === 'static-top') {\r\n        classes = classesStaticTop;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={size} color={'secondary'} className={classes.circular}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CircularPreloader;\r\n\r\n//============================ TYPES ==================================================\r\ntype PropsType = {\r\n    size?: number | undefined\r\n    style?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\n//============================ STYLES =======================================================\r\nconst useStylesAbsolute = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    },\r\n    circular: {}\r\n});\r\nconst useStylesStaticCenter = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    circular: {\r\n\r\n    }\r\n});\r\nconst useStylesStaticTop = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start'\r\n    },\r\n    circular: {\r\n\r\n    }\r\n});\r\n","export const required: FieldValidatorType = (value) =>\r\n    value ? undefined : 'Field is required';\r\n\r\nexport const maxLength = (max: number): FieldValidatorType => (value) =>\r\n    value && value.length > max\r\n        ? `Number of letters is more than ${max}`\r\n        : undefined;\r\nexport const maxLength10 = maxLength(10);\r\nexport const maxLength30 = maxLength(30);\r\nexport const maxLength100 = maxLength(100);\r\n\r\nexport const empty: EmptyType = (str) => /^\\s+$/.test(str);\r\n\r\nexport const shouldNotBeEmpty: FieldValidatorType = (value) =>\r\n    empty(value) && value !== ''\r\n        ? 'Field should not be empty'\r\n        : undefined;\r\n\r\n//=========================== TYPES =====================================\r\ntype EmptyType = (str: string) => boolean\r\nexport type FieldValidatorType = (value: string) => string | undefined","import {instance, ResponseTypeAPI, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\n// type AuthResponseType = {\r\n//     data: {\r\n//         id: number\r\n//         email: string\r\n//         login: string\r\n//     }\r\n//     resultCode: ResultCodesEnum\r\n//     messages: Array<string>\r\n// }\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype AuthResponseType = ResponseTypeAPI<AuthResponseDataType>\r\n\r\n// type LoginResponseType = {\r\n//     data: {\r\n//         userId: number\r\n//     }\r\n//     resultCode: ResultCodesEnum | ResultCodeForCaptchaEnum\r\n//     messages: Array<string>\r\n// }\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LoginResponseType = ResponseTypeAPI<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>\r\n\r\nexport const authAPI = {\r\n    async auth() {\r\n        let response = await instance.get<AuthResponseType>(`auth/me`)\r\n        return response.data;\r\n    },\r\n    async login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        let response = await instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n        return response.data;\r\n    },\r\n    async logout() {\r\n        let response = await instance.delete(`auth/login`)\r\n        return response.data;\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    async getCaptcha() {\r\n        let response = await instance.get<getCaptchaResponseType>(`security/get-captcha-url`);\r\n        return response.data;\r\n    }\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {sidebarAC, SidebarActionsType} from \"./sidebar-reducer\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as null | string\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype AuthActionsType = GetActionsType<typeof authAC>\r\ntype ThunkType = BaseThunkType<AuthActionsType | FormAction | AppActionsType | SidebarActionsType>\r\n\r\nconst authReducer = (state = initialState, action: AuthActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_AUTH_USER_DATA': {\r\n            return {...state, ...action.data,}\r\n        }\r\n        case 'AUTH/SET_CAPTCHA':\r\n            return {...state, captcha: action.captcha}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const authAC = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH/SET_AUTH_USER_DATA',\r\n        data: {id, email, login, isAuth}\r\n    } as const),\r\n    setCaptchaUrl: (captcha: string) => ({type: 'AUTH/SET_CAPTCHA', captcha} as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.auth();\r\n        //если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            let {id, login, email} = data.data;\r\n            dispatch(authAC.setAuthUserData(id, email, login, true));\r\n        }\r\n        dispatch(appAC.toggleLoading(false));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.login(email, password, rememberMe, captcha);\r\n        // если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n            dispatch(sidebarAC.setCurrentSidebarItem(1))\r\n        } else { // неправильный логин и(или) пароль\r\n            if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) { // необходима каптча\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await securityAPI.getCaptcha();\r\n        dispatch(authAC.setCaptchaUrl(data.url));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.logout();\r\n        // если вылогинись\r\n        if (data.resultCode === 0) {\r\n            dispatch(authAC.setAuthUserData(null, null, null, false));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getId = (state: StateType) => state.auth.id;\r\nexport const getEmail = (state: StateType) => state.auth.email;\r\nexport const getLogin = (state: StateType) => state.auth.login;\r\nexport const getIsAuth = (state: StateType) => state.auth.isAuth;\r\nexport const getCaptchaSelector = (state: StateType) => state.auth.captcha;\r\n"],"sourceRoot":""}