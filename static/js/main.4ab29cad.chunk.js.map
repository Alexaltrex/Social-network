{"version":3,"sources":["Components/common/RenderTextField.tsx","DAL/profile-api.ts","redux/profile-reducer.ts","types/types.ts","Components/common/SendMessageForm.tsx","redux/app-reducer.ts","utilities/objects-helpers.js","DAL/users-api.ts","redux/users-reduser.ts","hooks/useAuthRedirect.ts","DAL/api.ts","redux/app-selectors.ts","redux/users-selectors.ts","redux/profile-selectors.ts","Components/common/RenderTextareaField.tsx","Components/common/RenderNakedTextareaField.tsx","Components/common/RenderCheckbox.tsx","utilities/validators/validators.ts","Components/common/CircularPreloader.tsx","serviceWorker.js","redux/settings-reducer.ts","redux/redux-store.ts","Components/Header/HeaderSearch.tsx","redux/settings-selectors.ts","Components/Header/HeaderLang.tsx","Components/Header/Header.tsx","redux/sidebar-selectors.ts","Components/Sidebar/SidebarItem.tsx","Components/Sidebar/Sidebar.tsx","Components/common/RenderPasswordField.tsx","Components/Login/Login.tsx","Components/common/Paginator.tsx","Components/common/RenderRadioButton.tsx","Components/Main/Users/UsersSearch.tsx","Components/common/ViewSwitcher.tsx","Components/Main/Users/UserBlockItem.tsx","Components/Main/Users/UserListItem.tsx","Components/Main/Users/UsersList.tsx","Components/Main/Users/Users.tsx","Components/Main/Friends/FriendsListItem.tsx","Components/Main/Friends/FriendsSearch.tsx","Components/Main/Friends/FriendsList.tsx","Components/Main/Friends/FriendsSidebar.tsx","Components/Main/Friends/FriendsSomethingElse.tsx","Components/Main/Friends/Friends.tsx","Components/Main/Settings/SettingsRow.tsx","const/const.js","Components/Main/Settings/Settings.tsx","Components/common/PageNotFound.tsx","Components/Main/Main.tsx","App.tsx","Components/common/ErrorBoundary.tsx","AppContainer.tsx","index.js","redux/sidebar-reducer.ts","redux/auth-selectors.ts","DAL/dialogs-api.ts","redux/dialogs-reducer.ts","const/lang.ts","DAL/auth-api.ts","DAL/security-api.ts","redux/auth-reducer.ts","redux/dialogs-selectors.ts"],"names":["RenderTextField","props","icon","label","input","meta","touched","invalid","error","classes","custom","styles","useStyles","className","root","iconLeft","InputProps","variant","placeholder","helperText","makeStyles","position","width","left","top","transform","profileAPI","id","instance","get","response","data","status","put","photo","formData","FormData","append","values","userId","initialState","posts","message","likeCount","likeMe","time","Date","profile","currentUserProfile","avatarIsLoading","statusIsLoading","editMode","currentInfoFormSidebarItem","followed","editingPost","profileAC","toggleLikeMe","postId","type","setEditingPost","setCurrentUserProfile","setFollowed","setCurrentInfoFormSidebarItem","addPost","post","lang","deletePost","setUserProfile","setStatus","setPhotos","photos","toggleAvatarLoading","toggleStatusLoading","setEditMode","getProfile","dispatch","a","appAC","toggleLoading","setLanError","getCurrentUserProfile","getFollowed","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","errorFields","messages","key","slice","length","toLowerCase","stopSubmit","Promise","reject","profileReducer","state","action","map","el","filter","DialogsSidebarItemEnum","ProfileSidebarItemEnum","SidebarItemEnum","ReduxForm","reduxForm","form","handleSubmit","submitting","pristine","useSelector","getLang","classesField","useStylesField","translate","buttonLabel","useForm","onSubmit","name","component","RenderTextAreaField","validate","shouldNotBeEmpty","autoFocus","textArea","size","color","startIcon","disabled","button","SendMessageForm","open","onClose","src","dialogs","useDispatch","onFormCloseHandle","formValue","sendMessage","dialogIsExist","some","newMessageLabel","goToDialogWithLabel","useSendMessageForm","paper","titleWrapper","title","RouterLink","to","titleLink","titleIcon","onClick","content","friendInfo","avatar","display","alignItems","backgroundColor","indigo","padding","flexGrow","marginLeft","marginRight","paddingBottom","marginTop","isInitialized","globalError","isLoading","lanError","setIsInitialized","setLang","getIsInitialized","promise","getAuthUserData","all","then","e","appReducer","console","log","updateObjectInArray","items","itemId","objPropName","newObjProps","item","usersAPI","getUsers","currentPage","pageSize","searchUsers","term","friend","url","friendUrl","followUser","unfollowUser","delete","users","pageFriendsSize","totalUsersCount","totalFriendsCount","currentFriendsPage","isFollowing","followingInProgress","friends","searchUsersParams","searchFriendsParams","isFriendsSearching","showUsersFrom","currentFriendsSidebarItem","needToChangeListOfFriends","friendIdToRemove","valueFromHeaderSearch","portionNumber","usersAC","setPortionNumber","setValueFromHeaderSearch","toggleIsFriendsSearching","setNeedToChangeListOfFriends","setCurrentFriendsSidebarItem","setFriends","setSearchFriendsParams","setSearchUsersParams","setFollow","setUnfollow","setUsers","setCurrentPage","setCurrentFriendsPage","setTotalUsersCount","setTotalFriendsCount","toggleFollowing","toggleFollowingProgress","setShowUsersFrom","totalCount","searchFriends","removeAndUpdateFriends","_followUnfollowFlow","apiMethod","actionCreator","getFollow","bind","getUnfollow","usersReducer","useAuthRedirect","isAuth","getIsAuth","history","useHistory","push","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","baseURL","withCredentials","headers","getIsInitializedSelector","app","getIsLoading","getUsersSelector","getFriendsSelector","getPageSize","getCurrentPage","getCurrentFriendsPage","getFollowingInProgress","getTotalUsersCount","getTotalFriendsCount","getIsFollowing","getSearchUsersParams","getSearchFriendsParams","getShowUsersFrom","getCurrentFriendsSidebarItem","getNeedToChangeListOfFriends","getFriendIdToRemove","getIsFriendsSearching","getValueFromHeaderSearch","getPortionNumber","getPosts","getProfileSelector","getCurrentUserProfileSelector","getStatusSelector","getAvatarIsLoading","getStatusIsLoading","getEditMode","getCurrentInfoFormSidebarItem","getFollowedSelector","getEditingPost","rows","multiline","RenderNakedTextAreaField","RenderCheckbox","control","checked","value","onChange","max","required","undefined","maxLength30","empty","str","test","CircularPreloader","styleType","classesAbsolute","useStylesAbsolute","classesStaticCenter","useStylesStaticCenter","classesStaticTop","useStylesStaticTop","useCircularPreloader","circularWrapper","bottom","right","justifyContent","zIndex","Boolean","window","location","hostname","match","theme","menuBackgroundColor","displayBackgroundColor","settingsAC","settingsReducer","rootReducer","combineReducers","dialogsReducer","sidebar","sidebarReducer","auth","authReducer","settings","formReducer","middleware","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","onSubmitSuccess","result","reset","Lang","rus","eng","fieldWrapper","Field","field","HeaderSearch","useHeaderSearch","height","borderRadius","paddingRight","createStyles","transition","transitions","getTheme","HeaderLang","React","useState","anchorEl","setAnchorEl","englishLabel","handleClick","event","currentTarget","handleClose","handleCloseRus","handleCloseEng","useHeaderLang","Tooltip","placement","Button","endIcon","aria-controls","aria-haspopup","Menu","keepMounted","MenuItem","selected","textTransform","Header","login","getLogin","getId","useEffect","setOpen","anchorRef","useRef","current","contains","target","prevOpen","focus","classesSettings","wrapper","useStylesSettings","logo","settingsLabel","logoutLabel","loginLabel","handleToggle","handleListKeyDown","preventDefault","onSettingsClick","onLogoutClick","logout","useHeader","Toolbar","toolBar","Typography","noWrap","ref","small","Avatar","Popper","popper","role","disablePortal","TransitionProps","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","ListItemIcon","ListItemText","primary","maxWidth","margin","boxSizing","minHeight","paddingTop","boxShadow","getCurrentSidebarItem","currentSidebarItem","SidebarItem","ownIndex","sidebarAC","setCurrentSidebarItem","useSidebarItem","ListItem","listItem","clsx","iconSelected","text","minWidth","fontWeight","Sidebar","profileLabel","profileDialogs","profileUsers","profileFriends","profileSettings","useSidebar","List","list","flexBasis","flexShrink","RenderPasswordField","showPassword","setShowPassword","password","setPassword","handleChange","handleClickShowPassword","handleMouseDownPassword","useRenderPasswordField","FormControl","textField","InputLabel","htmlFor","outlined","OutlinedInput","outlinedInputRoot","outlinedInputInput","endAdornment","InputAdornment","IconButton","aria-label","onMouseDown","edge","iconButton","labelWidth","paddingLeft","ReduxLoginForm","captcha","emailLabel","passwordLabel","rememberMeLabel","captchaLabel","captchaText","useLoginForm","alt","fullWidth","Login","getCaptchaSelector","email","rememberMe","useLogin","Card","card","elevation","align","marginBottom","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","startPortionNumber","endPortionNumber","elements","p","buttonRoot","disableElevation","prevPortionLabelEnd","prevPortionLabel","nextPortionLabelEnd","nextPortionLabel","setPrevPortion","setNextPortion","setFirstPortion","setLastPortion","usePaginator","iconButtonRoot","border","RenderRadioButton","labels","rest","formControlLabelElements","FormControlLabel","formControlLabel","Radio","useRenderRadioButton","FormLabel","formLabel","RadioGroup","radioGroup","SearchUsersReduxForm","classesRadioButton","useStylesRadioButton","nameLabel","userAreFriendOrNotLabel","allLabel","friendLabel","notFriendLabel","searchLabel","useSearchUsersForm","UsersSearch","initialValues","submit","useUsersSearch","h6","Divider","divider","flexDirection","ViewSwitcher","view","onChangeHandle","setView","newView","useViewSwitcher","ToggleButtonGroup","exclusive","ToggleButton","fontSize","UserBlockItem","user","openSendMessageForm","setOpenSendMessageForm","sendMessageLabel","onFollowUnfollowClick","onOpenSendMessageFormHandle","useUserBlockItem","Grid","CardActionArea","CardContent","cardContent","CardActions","disableSpacing","cardActions","buttons","buttonWrapper","media","UserListItem","followLabel","followUnfollowHandle","goToUserHandle","useUserListItem","Link","UsersList","usersBlockItems","usersListItems","allIsLoaded","skeletonBlockItems","Skeleton","skeletonBlockItem","skeletonListItems","skeletonListItem","useUsersList","container","alignContent","justify","wrap","spacing","disablePadding","Users","getDialogsSelector","searchPanelIsOpen","setSearchPanelIsOpen","getDialogs","countTitle","closeSearchLabel","openSearchLabel","showAllLabel","pageNumber","onSearchCharactersClick","onShowAllClick","useUsers","Collapse","in","timeout","unmountOnExit","topPanel","Badge","badgeContent","showZero","paginatorTopWrapper","paginator","paginatorBottomWrapper","FriendsListItem","somethingElseHandle","callbacks","menuItemsElements","onListItemClick","useFriendsListItem","listItemInner","listItemInnerleft","large","onChangeHandler","setTimeout","nameOfTheFriendLabel","FriendsSearch","onClickHandler","useFriendsSearch","search","FriendsList","FriendsListElements","useFriendsList","titleLeft","paginatorTop","paginatorBottom","FriendsSidebar","newValue","friendsLabel","somethingElseLabel","useFriendsSidebar","Tabs","indicator","orientation","tabs","Tab","tabRoot","labelIcon","borderLeft","FriendsSomethingElse","Friends","leftColumn","rightColumn","SettingsRow","resetToDefaultHandle","probeBackgroundColor","defaultColor","probe","default","useSettingsRow","row","defaultValue","defaultTheme","Settings","onMenuBCChangeHandler","onDisplayBCChangeHandler","resetMenuBCToDefaultHandle","resetDisplayBCToDefaultHandle","useSettings","PageNotFound","pageNotFoundLabel","usePageNotFound","Dialogs","lazy","Profile","Main","main","fallback","exact","path","render","withRouter","messageIsSending","getMessageIsSending","recipientName","getRecipientName","showAlert","setShowAlert","catchAllUnhandledErrors","alert","addEventListener","removeEventListener","reason","useApp","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","severity","ErrorBoundary","errorInfo","this","setState","whiteSpace","toString","children","AppGlobal","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","dialogsAPI","body","messageId","selectedMessages","selectedDeletedMessages","selectedSpamMessages","dialogsIsLoading","messagesIsLoading","messagesIsDeleting","currentDialogsSidebarItem","deletedMessages","spamMessages","dialogsAC","removeFromDeletedMessages","removeFromSpamMessages","addToDeletedMessages","dialog","addToSpamMessages","setCurrentDialogsSidebarItem","setMessagesIsDeleting","setMessagesIsLoading","setRecipientName","setMessageIsSending","toggleDialogsIsLoading","cleanSelectedMessages","cleanSelectedDeletedMessages","addToSelectedMessages","addToSelectedDeletedMessages","removeFromSelectedMessages","removeFromSelectedDeletedMessages","setMessages","setDialogs","dataSend","Success","getMessages","signMessageAsSpam","arrayOfRequests","results","resultCodeFinally","Error","deleteMessages","restoreMessages","j","index","findIndex","phrase","authAPI","securityAPI","authAC","myProfile","CaptchaIsRequired","getCaptchaUrl","_error","getMessagesSelector","getSelectedMessages","getSelectedDeletedMessages","getDialogsIsLoading","getMessagesIsLoading","getMessagesIsDeleting","getCurrentDialogsSidebarItem","getLoading","getDeletedMessages","getSpamMessages"],"mappings":"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","file":"static/js/main.4ab29cad.chunk.js","sourcesContent":["import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, input, meta: {touched, invalid, error}, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon &&\r\n            <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={label}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n            width: '100%'\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, ResponseTypeAPI} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    async getProfile(id: number) {\r\n        let response = await instance.get<ProfileType>(`profile/${id}`)\r\n        return response.data;\r\n    },\r\n    async getStatus(id: number) {\r\n        let response = await instance.get<string>(`profile/status/${id}`)\r\n        return response.data;\r\n    },\r\n    async updateStatus(status: string) {\r\n        let response = await instance.put<ResponseTypeAPI>(`profile/status`, {status: status})\r\n        return response.data;\r\n    },\r\n    async savePhoto(photo: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photo);\r\n        let response = await instance.put('profile/photo', formData);\r\n        return response.data;\r\n    },\r\n    async saveProfile(values: ProfileType) {\r\n        let response = await instance.put<ResponseTypeAPI<SavePhotoResponseDataType>>(`profile`, values)\r\n        return response.data;\r\n    },\r\n    async getFollowed(userId: number) {\r\n        let response = await instance.get<boolean>(`follow/${userId}`)\r\n        return response.data;\r\n    },\r\n};","import {FormAction, stopSubmit} from 'redux-form';\r\nimport {LangType, PhotosType, PostType, ProfileSidebarItemEnum, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../DAL/profile-api\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hello, world', likeCount: 4, likeMe: false, time: new Date(2020, 8, 25,10, 19)},\r\n    ] as Array<PostType>, // массив постов\r\n    profile: null as null | ProfileType, // прифиль инициализированного пользователя\r\n    currentUserProfile: null as null | ProfileType, // профиль текущего просматриваемого пользователя\r\n    status: null as null | string, // статус\r\n    avatarIsLoading: false, // аватар загружается?\r\n    statusIsLoading: false, //  статус загружается?\r\n    editMode: false, // вкл./выкл. режим редактирования статуса\r\n    currentInfoFormSidebarItem: 0 as ProfileSidebarItemEnum, // текущий элемент бокового меню (все, удаленные, спам)\r\n    followed: null as null | boolean, // пользователь - друг?\r\n    editingPost: false // режим ввода нового поста (false - надпись, true - форма ввода)\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = GetActionsType<typeof profileAC>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction | AppActionsType>\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profile/TOGGLE_LIKE_ME': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(el => {\r\n                    if (el.id === action.postId) {\r\n                        return {...el, likeCount: el.likeMe ? el.likeCount - 1 : el.likeCount + 1, likeMe: !el.likeMe}\r\n                    } else {\r\n                        return el\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case 'profile/SET_EDITING_POST': {\r\n            return {...state, editingPost: action.editingPost}\r\n        }\r\n        case 'profile/SET_CURRENT_USER_PROFILE': {\r\n            return {...state, currentUserProfile: action.currentUserProfile}\r\n        }\r\n        case 'profile/SET_FOLLOWED': {\r\n            return {...state, followed: action.followed}\r\n        }\r\n        case 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM': {\r\n            return {...state, currentInfoFormSidebarItem: action.currentInfoFormSidebarItem}\r\n        }\r\n        case 'profile/SET_EDIT_MODE': {\r\n            return {...state, editMode: action.editMode}\r\n        }\r\n        case 'profile/AVATAR_IS_LOADING': {\r\n            return {...state, avatarIsLoading: action.avatarIsLoading}\r\n        }\r\n        case 'profile/STATUS_IS_LOADING': {\r\n            return {...state, statusIsLoading: action.statusIsLoading}\r\n        }\r\n        case 'profile/ADD_POST': {\r\n            let id = state.posts.length ? state.posts[state.posts.length - 1].id + 1 : 1;\r\n            return {\r\n                ...state,\r\n                posts: [\r\n                    ...state.posts,\r\n                    {\r\n                        id: id,\r\n                        message: action.post,\r\n                        likeMe: false,\r\n                        likeCount: 0,\r\n                        time: action.time\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        case 'profile/DELETE_POST': {\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.id)}\r\n        }\r\n        case 'profile/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'profile/SET_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'profile/SET_PHOTOS': {\r\n            if (state.profile) {\r\n                return {\r\n                    ...state, profile: {...state.profile, photos: action.photos}\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const profileAC = {\r\n    toggleLikeMe: (postId: number) => ({type: 'profile/TOGGLE_LIKE_ME', postId} as const),\r\n    setEditingPost: (editingPost: boolean) => ({type: 'profile/SET_EDITING_POST', editingPost} as const),\r\n    setCurrentUserProfile: (currentUserProfile: ProfileType) => ({\r\n        type: 'profile/SET_CURRENT_USER_PROFILE',\r\n        currentUserProfile\r\n    } as const),\r\n    setFollowed: (followed: null | boolean) => ({type: 'profile/SET_FOLLOWED', followed} as const),\r\n    setCurrentInfoFormSidebarItem: (currentInfoFormSidebarItem: number) => ({\r\n        type: 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM',\r\n        currentInfoFormSidebarItem\r\n    } as const),\r\n    addPost: (post: string, lang: LangType) => ({\r\n        type: 'profile/ADD_POST',\r\n        post,\r\n        time: new Date()\r\n    } as const),\r\n    deletePost: (id: number) => ({type: 'profile/DELETE_POST', id} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'profile/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\r\n    setPhotos: (photos: PhotosType) => ({type: 'profile/SET_PHOTOS', photos} as const),\r\n    toggleAvatarLoading: (avatarIsLoading: boolean) => ({type: 'profile/AVATAR_IS_LOADING', avatarIsLoading} as const),\r\n    toggleStatusLoading: (statusIsLoading: boolean) => ({type: 'profile/STATUS_IS_LOADING', statusIsLoading} as const),\r\n    setEditMode: (editMode: boolean) => ({type: 'profile/SET_EDIT_MODE', editMode} as const),\r\n};\r\n\r\n\r\nexport const getProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentUserProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setCurrentUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\n// определение явдяется ли другом пользователь\r\nexport const getFollowed = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getFollowed(userId);\r\n        dispatch(profileAC.setFollowed(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.getStatus(id);\r\n        dispatch(profileAC.setStatus(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setStatus(status));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: File): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleAvatarLoading(true));\r\n        const data = await profileAPI.savePhoto(photo);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setPhotos(data.data.photos));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleAvatarLoading(false));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (values: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await profileAPI.saveProfile(values)\r\n        //const id = getState().auth.id;\r\n        const id = values.userId\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(getProfile(id));\r\n        } else {\r\n            //data.messages[0]\r\n            let errorFields = {} as any;\r\n            for (let message of data.messages) {\r\n                let key = message.slice(30, message.length - 1).toLowerCase();\r\n                errorFields[key] = 'Invalid url format';\r\n            }\r\n            //dispatch(stopSubmit('profileAboutMeForm', {_error: 'error'}));\r\n            dispatch(stopSubmit('profileAboutMeForm', {'contacts': errorFields}));\r\n            return Promise.reject(data.messages[0]);\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport default profileReducer;","import {DialogType, MessageType} from \"../DAL/dialogs-api\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n    likeMe: boolean\r\n    time: Date\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n}\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n}\r\n\r\nexport type FriendsValuesType = 'all' | 'true' | 'false';\r\n\r\nexport type SearchUsersParamsType = {\r\n    term: string\r\n    friend: FriendsValuesType\r\n}\r\n\r\nexport type SearchFriendsParamsType = {\r\n    term: string\r\n}\r\n\r\nexport type ViewType = 'list' | 'block'\r\n\r\nexport type DeletedMessagesType = Array<DeletedMessagesItem>\r\n\r\nexport type DeletedMessagesItem = {\r\n    dialog: DialogType\r\n    messages: Array<MessageType>\r\n}\r\n\r\nexport enum DialogsSidebarItemEnum {\r\n    all = 0,\r\n    deleted = 1,\r\n    spam = 2\r\n}\r\n\r\nexport enum ProfileSidebarItemEnum {\r\n    main = 0,\r\n    job = 1,\r\n    contacts = 2\r\n}\r\n\r\nexport enum SidebarItemEnum {\r\n    myProfile = 1,\r\n    dialogs = 2,\r\n    users = 3,\r\n    friends = 4,\r\n    settings = 5\r\n}\r\n\r\nexport type LangType = 'eng' | 'rus'\r\n\r\nexport type UseParamsType = {\r\n    userId: string | undefined\r\n}","import React from \"react\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport RenderTextAreaField from \"./RenderTextareaField\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage} from \"../../redux/dialogs-reducer\";\r\nimport {DialogType} from \"../../DAL/dialogs-api\";\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useForm = () => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const classesField = useStylesField();\r\n    const label = translate(lang, 'Enter your message');\r\n    const buttonLabel = translate(lang, 'Send message');\r\n    return {classes, classesField, label, buttonLabel}\r\n};\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine} = props;\r\n    const {classes, classesField, label, buttonLabel} = useForm();\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field name='message'\r\n                   component={RenderTextAreaField}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   autoFocus={true}\r\n                   className={classes.textArea}\r\n                   classes={classesField}\r\n                   label={label}\r\n                   placeholder={label}\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SendIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    {buttonLabel}\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'send-message',\r\n})(Form);\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useSendMessageForm = ({onClose, id, dialogs}: UseSendMessageFormType) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector(getLang);\r\n    const onFormCloseHandle = () => {\r\n        onClose(false);\r\n    };\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(sendMessage(id, formValue.message));\r\n        onClose(false);\r\n    };\r\n    const dialogIsExist = dialogs && dialogs.some(el => el.id === id);\r\n    const newMessageLabel = translate(lang, 'New message');\r\n    const goToDialogWithLabel = translate(lang, 'Go to dialog with');\r\n    return {\r\n        classes, onFormCloseHandle, onSubmit, dialogIsExist,\r\n        newMessageLabel, goToDialogWithLabel\r\n    }\r\n};\r\n\r\n//================ COMPONENT =========================================\r\nconst SendMessageForm: React.FC<ComponentPropsType> = ({open, onClose, id, name, src, dialogs}) => {\r\n    const {\r\n        classes, onFormCloseHandle, onSubmit, dialogIsExist,\r\n        newMessageLabel, goToDialogWithLabel\r\n    } = useSendMessageForm({onClose, id, dialogs});\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dialogs &&\r\n                <Dialog open={open}\r\n                        classes={{\r\n                            paper: classes.paper\r\n                        }}\r\n                >\r\n                    <div className={classes.titleWrapper}>\r\n                        <Typography className={classes.title}>\r\n                            {newMessageLabel}\r\n                        </Typography>\r\n\r\n                        {\r\n                            dialogIsExist &&\r\n                            <Link component={RouterLink}\r\n                                  to={`/dialogs/${id}`}\r\n                                  variant='body2'\r\n                                  className={classes.titleLink}\r\n                            >\r\n                                {`${goToDialogWithLabel} ${name}`}\r\n                            </Link>\r\n                        }\r\n\r\n                        <IconButton className={classes.titleIcon}\r\n                                    onClick={onFormCloseHandle}\r\n                        >\r\n                            <HighlightOffIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n\r\n                    <DialogContent className={classes.content}>\r\n                        <div className={classes.friendInfo}>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={src}\r\n                            />\r\n                            <Link component={RouterLink}\r\n                                  to={`/users/${id}`}\r\n                                  variant='subtitle2'\r\n                            >\r\n                                {name}\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <ReduxForm onSubmit={onSubmit}/>\r\n\r\n                    </DialogContent>\r\n\r\n                </Dialog>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SendMessageForm;\r\n\r\n//=========================== TYPE =======================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    message: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\ntype ComponentPropsType = {\r\n    open: boolean\r\n    onClose: (openForm: boolean) => void\r\n    id: number\r\n    name: string\r\n    src: string | undefined\r\n    dialogs: Array<DialogType> | null\r\n}\r\ntype UseSendMessageFormType = {\r\n    onClose: (openForm: boolean) => void\r\n    id: number\r\n    dialogs: Array<DialogType> | null\r\n}\r\n//========================== STYLES ======================\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        width: 500\r\n    },\r\n    titleWrapper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: indigo[500],\r\n        color: 'white',\r\n        padding: '5px 5px 5px 15px',\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    titleLink: {\r\n        color: 'white',\r\n    },\r\n    titleIcon: {\r\n        color: 'white',\r\n        marginLeft: 10\r\n    },\r\n    friendInfo: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '10px 0 15px 0'\r\n    },\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    content: {\r\n        backgroundColor: indigo[50],\r\n        paddingBottom: 15\r\n    },\r\n    textArea: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        marginTop: 15\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles({\r\n    root: {\r\n        backgroundColor: 'white'\r\n    },\r\n})","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {LangType} from \"../types/types\";\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>;\r\ntype ThunkType = BaseThunkType<AppActionsType>\r\n\r\nlet initialState = {\r\n    isInitialized: false, // приложение проинициализировано (получены инициализационные данные)?\r\n    globalError: null,\r\n    isLoading: false, // загрузка происходит?\r\n    lanError: false, // ошибка сети\r\n    lang: 'eng' as LangType // язык приложения\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_LANG':\r\n            console.log('APP/SET_LANG')\r\n            return {...state, lang: action.lang}\r\n        case 'APP/SET_IS_INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setIsInitialized: (isInitialized: boolean) => ({type: 'APP/SET_IS_INITIALIZED', isInitialized} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n    setLang: (lang: LangType) => ({type: 'APP/SET_LANG', lang} as const),\r\n};\r\n\r\nexport const getIsInitialized = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let promise = dispatch(getAuthUserData());\r\n        // dispatch(somethingElse());\r\n        // dispatch(somethingElse());\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(appAC.setIsInitialized(true));\r\n            })\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport default appReducer;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(item => {\r\n        if (item[objPropName] === itemId) {\r\n            return {...item, ...newObjProps}\r\n        }\r\n        return item;\r\n    })\r\n};","import {GetItemsType, instance, ResponseTypeAPI} from \"./api\";\r\nimport {FriendsValuesType} from \"../types/types\";\r\n\r\nexport const usersAPI = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        let response = await instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`);\r\n        return response.data;\r\n    },\r\n\r\n    async searchUsers(currentPage = 1, pageSize = 10, term: string, friend: FriendsValuesType) {\r\n        let url = `users?page=${currentPage}&count=${pageSize}`;\r\n        if (term) url = url + `&term=${term}`;\r\n        let friendUrl;\r\n        if (friend === 'all') {\r\n            friendUrl = ''\r\n        } else {\r\n            friendUrl = `&friend=${friend}`\r\n        }\r\n        url = url + friendUrl;\r\n        let response = await instance.get<GetItemsType>(url);\r\n        return response.data;\r\n    },\r\n\r\n    async followUser(id: number) {\r\n        let response = await instance.post<ResponseTypeAPI>(`follow/${id}`)\r\n        return response.data;\r\n    },\r\n\r\n    async unfollowUser(id: number) {\r\n        let response = await instance.delete(`follow/${id}`) //as AxiosResponse<any>\r\n                return response.data as Promise<ResponseTypeAPI>;\r\n      },\r\n    };\r\n\r\n","import {updateObjectInArray} from \"../utilities/objects-helpers\";\r\nimport {\r\n    FriendsValuesType, SearchFriendsParamsType,\r\n    SearchUsersParamsType,\r\n    UserType\r\n} from \"../types/types\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../DAL/users-api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    users: null as null | Array<UserType>, // массив пользователей\r\n    pageSize: 10, // количество пользователей на одной странице\r\n    pageFriendsSize: 10, // количество друзей на одной странице\r\n    totalUsersCount: 0, // общее число пользователей\r\n    totalFriendsCount: 0, // общее число друзей\r\n    currentPage: 1, // номер текущей страницы пользователей\r\n    currentFriendsPage: 1, // номер текущей страницы друзей\r\n    isLoading: false, // загрузка происходит?\r\n    isFollowing: false, // отписка/подписка происходит?\r\n    followingInProgress: [] as Array<number>, // массив пользователей, для которых послан запрос на подписку/отписку\r\n    friends: null as null | Array<UserType>, // массив друзей\r\n    searchUsersParams: {term: '', friend: 'all'} as SearchUsersParamsType, // параметры поиска пользователей\r\n    searchFriendsParams: {term: ''} as SearchFriendsParamsType, // параметры поиска друзей\r\n    isFriendsSearching: false, // поиск друзей происходит?\r\n    showUsersFrom: 'all' as 'all' | 'search', // откуда показывать пользователей - всех или из поиска\r\n    currentFriendsSidebarItem: 0, // номер элемента бокового меню\r\n    needToChangeListOfFriends: false, // список друзей нужно изменить (используется для обновления после удаления)?\r\n    friendIdToRemove: null as null | number, // id друга, которого удаляем\r\n    valueFromHeaderSearch: null as null | string, // страка поиска пользователя из header\r\n    portionNumber: 1 // текущий номер порции страниц пользователей (начинается с 1)\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'USERS/SET_PORTION_NUMBER': {\r\n            return {...state, portionNumber: action.portionNumber}\r\n        }\r\n        case 'USERS/SET_VALUE_FROM_HEADER_SEARCH': {\r\n            return {...state, valueFromHeaderSearch: action.valueFromHeaderSearch}\r\n        }\r\n        case 'USERS/TOGGLE_IS_FRIENDS_SEARCHING': {\r\n            return {...state, isFriendsSearching: action.isFriendsSearching}\r\n        }\r\n        case 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS': {\r\n            return {...state,\r\n                needToChangeListOfFriends: action.needToChangeListOfFriends,\r\n                friendIdToRemove: action.friendIdToRemove\r\n            }\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM': {\r\n            return {...state, currentFriendsSidebarItem: action.currentFriendsSidebarItem}\r\n        }\r\n        case 'USERS/SET_FRIENDS': {\r\n            return {...state, friends: action.friends}\r\n        }\r\n        case 'USERS/SET_SHOW_USERS_FROM': {\r\n            return {...state, showUsersFrom: action.showUsersFrom}\r\n        }\r\n        case 'USERS/SET_SEARCH_FRIENDS_PARAMS': {\r\n            return {...state, searchFriendsParams: action.searchFriendsParams}\r\n        }\r\n        case 'USERS/SET_SEARCH_USERS_PARAMS': {\r\n            return {...state, searchUsersParams: action.searchUsersParams}\r\n        }\r\n        case 'USERS/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        }\r\n        case 'USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        }\r\n        case 'USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage};\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_PAGE': {\r\n            return {...state, currentFriendsPage: action.currentFriendsPage};\r\n        }\r\n        case 'USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        }\r\n        case 'USERS/SET_TOTAL_FRIENDS_COUNT': {\r\n            return {...state, totalFriendsCount: action.totalFriendsCount};\r\n        }\r\n        case 'USERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING': {\r\n            return {...state, isFollowing: action.isFollowing}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                // если запрос на подписку-отписку послан - добавить в массив, иначе удалить из массива\r\n                followingInProgress:\r\n                    action.followingInProgress\r\n                        ? [...state.followingInProgress, action.id]\r\n                        : state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const usersAC = {\r\n    setPortionNumber: (portionNumber: number) => ({type: 'USERS/SET_PORTION_NUMBER', portionNumber} as const),\r\n    setValueFromHeaderSearch: (valueFromHeaderSearch: string | null) => ({type: 'USERS/SET_VALUE_FROM_HEADER_SEARCH', valueFromHeaderSearch} as const),\r\n    toggleIsFriendsSearching: (isFriendsSearching: boolean) => ({type: 'USERS/TOGGLE_IS_FRIENDS_SEARCHING', isFriendsSearching} as const),\r\n    setNeedToChangeListOfFriends: (needToChangeListOfFriends: boolean, friendIdToRemove: number | null) => ({\r\n        type: 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS',\r\n        needToChangeListOfFriends,\r\n        friendIdToRemove\r\n    } as const),\r\n    setCurrentFriendsSidebarItem: (currentFriendsSidebarItem: number) => ({\r\n        type: 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM',\r\n        currentFriendsSidebarItem\r\n    } as const),\r\n    setFriends: (friends: Array<UserType>) => ({type: 'USERS/SET_FRIENDS', friends} as const),\r\n    setSearchFriendsParams: (searchFriendsParams: SearchFriendsParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_FRIENDS_PARAMS',\r\n        searchFriendsParams\r\n    } as const),\r\n    setSearchUsersParams: (searchUsersParams: SearchUsersParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_USERS_PARAMS',\r\n        searchUsersParams\r\n    } as const),\r\n    setFollow: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    setUnfollow: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setCurrentFriendsPage: (currentFriendsPage: number) => ({type: 'USERS/SET_CURRENT_FRIENDS_PAGE', currentFriendsPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'USERS/SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n    setTotalFriendsCount: (totalFriendsCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_FRIENDS_COUNT',\r\n        totalFriendsCount\r\n    } as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'USERS/TOGGLE_LOADING', isLoading} as const),\r\n    toggleFollowing: (isFollowing: boolean) => ({type: 'USERS/TOGGLE_FOLLOWING', isFollowing} as const),\r\n    toggleFollowingProgress: (followingInProgress: boolean, id: number) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        followingInProgress,\r\n        id\r\n    } as const),\r\n    setShowUsersFrom: (showUsersFrom: 'all' | 'search') => ({type: 'USERS/SET_SHOW_USERS_FROM', showUsersFrom} as const),\r\n    };\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize);\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchUsers = (currentPage: number, pageSize: number, term: string, friend: FriendsValuesType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, friend);\r\n        console.log('searchUsers')\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchFriends = (currentPage: number, pageSize: number, term: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleIsFriendsSearching(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, 'true');\r\n        dispatch(usersAC.setFriends(data.items));\r\n        dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleIsFriendsSearching(false));\r\n    }\r\n};\r\n\r\nexport const removeAndUpdateFriends = (currentPage: number, pageSize: number, id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(true, id));\r\n        let dataFromUnfollow = await usersAPI.unfollowUser(id);\r\n        if (dataFromUnfollow.resultCode === 0) {\r\n            let data = await usersAPI.searchUsers(currentPage, pageSize, '', 'true');\r\n            dispatch(usersAC.setFriends(data.items));\r\n            dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n            dispatch(usersAC.setNeedToChangeListOfFriends(false, null));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(false, id));\r\n    }\r\n};\r\n\r\ntype FollowUnfollwType = UsersActionsType;//followType | unfollowType\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   id: number,\r\n                                   apiMethod: any,\r\n                                   actionCreator: (id: number) => FollowUnfollwType) => {\r\n    dispatch(usersAC.toggleFollowing(true));\r\n    dispatch(usersAC.toggleFollowingProgress(true, id));\r\n    let data = await apiMethod(id)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(usersAC.toggleFollowingProgress(false, id));\r\n};\r\n\r\nexport const getFollow = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        await _followUnfollowFlow(dispatch, id, usersAPI.followUser.bind(id), usersAC.setFollow);\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(false));\r\n    }\r\n\r\n};\r\n\r\nexport const getUnfollow = (id: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, id, usersAPI.unfollowUser.bind(id), usersAC.setUnfollow);\r\n};\r\n\r\nexport default usersReducer;\r\n\r\n//============================ TYPES ==============================================\r\nexport type initialStateType = typeof initialState;\r\ntype UsersActionsType = GetActionsType<typeof usersAC>\r\ntype DispatchType = Dispatch<UsersActionsType>\r\ntype ThunkType = BaseThunkType<UsersActionsType | AppActionsType>","import {useSelector} from \"react-redux\";\r\nimport {getIsAuth} from \"../redux/auth-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useAuthRedirect = () => {\r\n    const isAuth = useSelector(getIsAuth);\r\n    let history = useHistory();\r\n    if (!isAuth) {\r\n        history.push(\"/login\");\r\n    }\r\n};\r\n\r\nexport default useAuthRedirect;","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8a976e99-9307-4ed5-baf7-6ba5cd0f4798'\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseTypeAPI<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","import {StateType} from \"./redux-store\";\r\n\r\nexport const getIsInitializedSelector = (state: StateType) => state.app.isInitialized;\r\nexport const getIsLoading = (state: StateType) => state.app.isLoading;\r\nexport const getLanError = (state: StateType) => state.app.lanError;\r\nexport const getLang = (state: StateType) => state.app.lang;\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: StateType) => state.users.users;\r\nexport const getFriendsSelector = (state: StateType) => state.users.friends;\r\nexport const getPageSize = (state: StateType) => state.users.pageSize;\r\nexport const getCurrentPage = (state: StateType) => state.users.currentPage;\r\nexport const getCurrentFriendsPage = (state: StateType) => state.users.currentFriendsPage;\r\nexport const getFollowingInProgress = (state: StateType) => state.users.followingInProgress;\r\nexport const getTotalUsersCount = (state: StateType) => state.users.totalUsersCount;\r\nexport const getTotalFriendsCount = (state: StateType) => state.users.totalFriendsCount;\r\nexport const getIsLoading = (state: StateType) => state.users.isLoading;\r\nexport const getIsFollowing = (state: StateType) => state.users.isFollowing;\r\nexport const getSearchUsersParams = (state: StateType) => state.users.searchUsersParams;\r\nexport const getSearchFriendsParams = (state: StateType) => state.users.searchFriendsParams;\r\nexport const getShowUsersFrom = (state: StateType) => state.users.showUsersFrom;\r\nexport const getCurrentFriendsSidebarItem = (state: StateType) => state.users.currentFriendsSidebarItem;\r\nexport const getNeedToChangeListOfFriends = (state: StateType) => state.users.needToChangeListOfFriends;\r\nexport const getFriendIdToRemove = (state: StateType) => state.users.friendIdToRemove;\r\nexport const getIsFriendsSearching = (state: StateType) => state.users.isFriendsSearching;\r\nexport const getValueFromHeaderSearch = (state: StateType) => state.users.valueFromHeaderSearch;\r\nexport const getPortionNumber = (state: StateType) => state.users.portionNumber;\r\n\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getPosts = (state: StateType) => state.profile.posts;\r\nexport const getProfileSelector = (state: StateType) => state.profile.profile;\r\nexport const getCurrentUserProfileSelector = (state: StateType) => state.profile.currentUserProfile;\r\nexport const getStatusSelector = (state: StateType) => state.profile.status;\r\nexport const getAvatarIsLoading = (state: StateType) => state.profile.avatarIsLoading;\r\nexport const getStatusIsLoading = (state: StateType) => state.profile.statusIsLoading;\r\nexport const getEditMode = (state: StateType) => state.profile.editMode;\r\nexport const getCurrentInfoFormSidebarItem = (state: StateType) => state.profile.currentInfoFormSidebarItem;\r\nexport const getFollowedSelector = (state: StateType) => state.profile.followed;\r\nexport const getEditingPost = (state: StateType) => state.profile.editingPost;\r\n\r\n\r\n\r\n\r\n","import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextAreaField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid, error}, classes, rows = 4, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                multiline\r\n                variant=\"outlined\"\r\n                label={label}\r\n                rows={rows}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n    rows?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst RenderNakedTextAreaField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid}, rows = 4, multiline = true, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <InputBase\r\n                classes={classes ? classes : null}\r\n                multiline={multiline}\r\n                rows={rows}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderNakedTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n    },\r\n    rows?: number\r\n    multiline?: boolean\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import {FormControlLabel} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderCheckbox: React.FC<PropsType> = (props) => {\r\n    const {input, label, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {icon && <div className={classes.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={input.value ? true : false}\r\n                        color=\"primary\"\r\n                        onChange={input.onChange}\r\n                    />\r\n                }\r\n                label={label}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RenderCheckbox\r\n\r\n//======================== TYPES ============================\r\ntype PropsType = {\r\n    icon?: React.ReactElement\r\n    label: string\r\n    input: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);","export const required: FieldValidatorType = (value) =>\r\n    value ? undefined : 'Field is required';\r\n\r\nexport const maxLength = (max: number) => (value: string) =>\r\n    value && value.length > max\r\n        ? `Number of letters is more than ${max}`\r\n        : undefined;\r\n\r\nexport const maxLength10 = (max: number): FieldValidatorType => (value: string) =>\r\n    value && value.length > max\r\n        ? `Number of letters is more than ${max}`\r\n        : undefined;\r\n\r\nexport const maxLength30 = maxLength(30);\r\n\r\nexport const empty: EmptyType = (str: string): boolean => /^\\s+$/.test(str);\r\n\r\nexport const shouldNotBeEmpty: FieldValidatorType = (value) =>\r\n    empty(value) && value !== ''\r\n        ? 'Field should not be empty'\r\n        : undefined;\r\n\r\n//=========================== TYPES =====================================\r\ntype EmptyType = (str: string) => boolean\r\nexport type FieldValidatorType = (value: string) => string | undefined","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useCircularPreloader = ({styleType}: UseCircularPreloaderPropsType) => {\r\n    const classesAbsolute = useStylesAbsolute();\r\n    const classesStaticCenter = useStylesStaticCenter();\r\n    const classesStaticTop = useStylesStaticTop();\r\n    let classes = classesStaticCenter;\r\n    if (styleType === 'absolute') {\r\n        classes = classesAbsolute;\r\n    }\r\n    if (styleType === 'static-top') {\r\n        classes = classesStaticTop;\r\n    }\r\n    return {classes}\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst CircularPreloader: React.FC<PropsType> = (props) => {\r\n    const {size = 100, styleType = 'static-center'} = props;\r\n    const {classes} = useCircularPreloader({styleType});\r\n\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={size} color={'secondary'}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CircularPreloader;\r\n\r\n//============================ TYPES ==================================================\r\ntype PropsType = {\r\n    size?: number | undefined\r\n    styleType?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\ntype UseCircularPreloaderPropsType = {\r\n    styleType?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\n\r\n//============================ STYLES =======================================================\r\nconst useStylesAbsolute = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    }\r\n});\r\nconst useStylesStaticCenter = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n});\r\nconst useStylesStaticTop = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start'\r\n    }\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {GetActionsType} from \"./redux-store\";\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type SettingsActionsType = GetActionsType<typeof settingsAC>;\r\n\r\nlet initialState = {\r\n    theme: {\r\n        menuBackgroundColor: '#3f50b5',\r\n        displayBackgroundColor: '#e8eaf6',\r\n    }\r\n};\r\n\r\nconst settingsReducer = (state = initialState, action: SettingsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'Settings/SET_MENU_BACKGROUND_COLOR':\r\n            return {...state, theme: {...state.theme, menuBackgroundColor: action.menuBackgroundColor}};\r\n        case 'Settings/SET_DISPLAY_BACKGROUND_COLOR':\r\n            return {...state, theme: {...state.theme, displayBackgroundColor: action.displayBackgroundColor}};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const settingsAC = {\r\n    setMenuBackgroundColor: (menuBackgroundColor: string) => ({\r\n        type: 'Settings/SET_MENU_BACKGROUND_COLOR',\r\n        menuBackgroundColor\r\n    } as const),\r\n    setDisplayBackgroundColor: (displayBackgroundColor: string) => ({\r\n        type: 'Settings/SET_DISPLAY_BACKGROUND_COLOR',\r\n        displayBackgroundColor\r\n    } as const),\r\n};\r\n\r\n\r\nexport default settingsReducer;","import {Action, applyMiddleware, combineReducers, createStore, Middleware} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport settingsReducer from \"./settings-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    settings: settingsReducer,\r\n    form: formReducer\r\n});\r\nconst middleware: Array<Middleware> = [thunkMiddleware];\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n\r\n//======================== TYPE ==========================\r\nexport type StateType = ReturnType<typeof rootReducer>\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>","import React, {ReactElement} from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, reset} from \"redux-form\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderNakedTextAreaField from \"../common/RenderNakedTextareaField\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {usersAC} from \"../../redux/users-reduser\";\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {Lang} from \"../../const/lang\";\r\n\r\n//==================== CUSTOM HOOK =========================\r\nconst useForm = () => {\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    const lang = useSelector(getLang);\r\n    const placeholder = lang === 'rus' ? Lang['Search...'].rus : Lang['Search...'].eng;\r\n    return {classes, classesField, placeholder}\r\n};\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = ({handleSubmit}) => {\r\n    const {classes, classesField, placeholder} = useForm();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={classes.fieldWrapper}>\r\n                <SearchIcon className={classes.icon}/>\r\n                <Field name='name'\r\n                       component={RenderNakedTextAreaField}\r\n                       validate={[shouldNotBeEmpty]}\r\n                       multiline={false}\r\n                       className={classes.field}\r\n                       classes={classesField}\r\n                       placeholder={placeholder}\r\n                       size='small'\r\n                />\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n    dispatch(reset('header-search'));\r\n};\r\n\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'header-search',\r\n    onSubmitSuccess: afterSubmit,\r\n})(Form);\r\n\r\n//==================== CUSTOM HOOK =========================\r\nconst useHeaderSearch = () => {\r\n    const dispatch = useDispatch();\r\n    let history = useHistory();\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(usersAC.setValueFromHeaderSearch(formValue.name))\r\n        history.push('/users');\r\n    };\r\n    return {onSubmit}\r\n};\r\n\r\n//============================ COMPONENT ============================================\r\nconst HeaderSearch: React.FC<ComponentPropsType> = (): ReactElement => {\r\n    const {onSubmit} = useHeaderSearch();\r\n    return (\r\n        <div>\r\n            <ReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HeaderSearch;\r\n\r\n//=========================== TYPE =======================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    name: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {}\r\n//========================== STYLES ======================\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        color: 'white',\r\n    },\r\n    fieldWrapper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: indigo[400],\r\n        height: 40,\r\n        borderRadius: 20,\r\n        paddingRight: 20,\r\n        '&:hover': {\r\n            backgroundColor: indigo[300],\r\n        },\r\n        marginRight: 15\r\n    },\r\n    icon: {\r\n        padding: '0 10px',\r\n        color: 'white'\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        input: {\r\n            transition: theme.transitions.create('width'),\r\n            backgroundColor: 'none',\r\n            width: 200,\r\n            '&:focus': {\r\n                width: 300\r\n            }\r\n        }\r\n    })\r\n)","import {StateType} from \"./redux-store\";\r\n\r\nexport const getTheme = (state: StateType) => state.settings.theme;\r\n","import Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { appAC } from \"../../redux/app-reducer\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useHeaderLang = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector(getLang);\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleCloseRus = () => {\r\n        dispatch(appAC.setLang('rus'));\r\n        setAnchorEl(null);\r\n    };\r\n    const handleCloseEng = () => {\r\n        dispatch(appAC.setLang('eng'));\r\n        setAnchorEl(null);\r\n    };\r\n    const title = translate(lang, 'Change language');\r\n    const englishLabel = translate(lang, 'English')\r\n    return {classes, lang, anchorEl, title, englishLabel,\r\n        handleClick, handleClose, handleCloseRus,\r\n        handleCloseEng}\r\n}\r\n\r\n//======================= COMPONENT ===============================\r\nconst HeaderLang: React.FC<PropsType> = () => {\r\n    const {classes, lang, anchorEl, title, englishLabel,\r\n        handleClick, handleClose, handleCloseRus,\r\n        handleCloseEng} = useHeaderLang();\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={title} placement=\"bottom-start\">\r\n                <Button\r\n                    className={classes.button}\r\n                    startIcon={<LanguageIcon/>}\r\n                    endIcon={<ExpandMoreIcon/>}\r\n                    aria-controls=\"simple-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleClick}\r\n                >\r\n                    {englishLabel}\r\n                </Button>\r\n            </Tooltip>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={handleCloseEng}\r\n                          selected={lang === 'eng'}\r\n                >\r\n                    English\r\n                </MenuItem>\r\n                <MenuItem onClick={handleCloseRus}\r\n                          selected={lang === 'rus'}\r\n                >\r\n                    Русский\r\n                </MenuItem>\r\n            </Menu>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default HeaderLang;\r\n\r\n\r\n//========================== TYPE ========================\r\ntype PropsType = {}\r\n\r\n//================================ STYLES =======================================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        color: 'white',\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n})","import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getId, getIsAuth, getLogin} from \"../../redux/auth-selectors\";\r\nimport {getProfileSelector} from \"../../redux/profile-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {getProfile} from \"../../redux/profile-reducer\";\r\nimport HeaderSearch from \"./HeaderSearch\";\r\nimport {getTheme} from \"../../redux/settings-selectors\";\r\nimport HeaderLang from \"./HeaderLang\";\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useHeader = () => {\r\n    const classes = useStyles();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const login = useSelector(getLogin);\r\n    const profile = useSelector(getProfileSelector);\r\n    const id = useSelector(getId);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getProfile(id))\r\n        }\r\n    }, [id, dispatch]);\r\n    //===================================================================================\r\n    const [open, setOpen] = useState(false);\r\n    const icon = open ? <ExpandLessIcon className={classes.icon}/> : <ExpandMoreIcon className={classes.icon}/>\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //=========================================================================\r\n    const onSettingsClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event)\r\n    };\r\n    const onLogoutClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event);\r\n        dispatch(logout());\r\n    }\r\n    //==================================================================================\r\n    const theme = useSelector(getTheme);\r\n    const useStylesSettings = makeStyles({\r\n        wrapper: {\r\n            backgroundColor: theme.menuBackgroundColor,\r\n            position: 'fixed',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            zIndex: 10\r\n        }\r\n    });\r\n    const classesSettings = useStylesSettings();\r\n    const lang = useSelector(getLang);\r\n    const logo = translate(lang, 'Social Network');\r\n    const settingsLabel = translate(lang, 'Settings');\r\n    const logoutLabel = translate(lang, 'Logout');\r\n    const loginLabel = translate(lang, 'Login')\r\n\r\n    return {\r\n        classes, isAuth, login, profile, open, icon, anchorRef,\r\n        handleToggle, handleClose, handleListKeyDown, onSettingsClick,\r\n        onLogoutClick, classesSettings, logo, settingsLabel,\r\n        logoutLabel, loginLabel\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst Header: React.FC = () => {\r\n    const {\r\n        classes, isAuth, login, profile, open, icon, anchorRef,\r\n        handleToggle, handleClose, handleListKeyDown, onSettingsClick,\r\n        onLogoutClick, classesSettings, logo, settingsLabel,\r\n        logoutLabel, loginLabel\r\n    } = useHeader();\r\n\r\n    return (\r\n        <div className={classesSettings.wrapper}>\r\n            <Toolbar className={classes.toolBar}>\r\n                <Typography variant=\"h6\" noWrap className={classes.logo}>\r\n                    {logo}\r\n                </Typography>\r\n\r\n                <HeaderSearch/>\r\n\r\n                <HeaderLang/>\r\n\r\n                {\r\n                    isAuth\r\n                        ? <>\r\n                            <Button\r\n                                ref={anchorRef}\r\n                                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleToggle}\r\n                                classes={{\r\n                                    root: classes.button,\r\n                                    label: classes.label\r\n                                }}\r\n                                color=\"inherit\">\r\n                                <Typography variant=\"subtitle1\" noWrap className={classes.login}>\r\n                                    {login}\r\n                                </Typography>\r\n                                {profile && profile.photos.small\r\n                                    ? <Avatar src={profile.photos.small} className={classes.avatar}/>\r\n                                    : <Avatar className={classes.avatar}/>}\r\n                                {icon}\r\n                            </Button>\r\n                            <Popper open={open}\r\n                                    className={classes.popper}\r\n                                    anchorEl={anchorRef.current}\r\n                                    role={undefined}\r\n                                    transition\r\n                                    disablePortal>\r\n                                {({TransitionProps, placement}) => (\r\n                                    <Grow\r\n                                        {...TransitionProps}\r\n                                        style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                    >\r\n                                        <Paper>\r\n                                            <ClickAwayListener onClickAway={handleClose}>\r\n\r\n                                                <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                          onKeyDown={handleListKeyDown}>\r\n                                                    <MenuItem onClick={onLogoutClick}>\r\n                                                        <ListItemIcon>\r\n                                                            <ExitToAppIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary={logoutLabel}/>\r\n                                                    </MenuItem>\r\n                                                    <MenuItem onClick={onSettingsClick}\r\n                                                              component={RouterLink}\r\n                                                              to='/settings'\r\n                                                    >\r\n                                                        <ListItemIcon>\r\n                                                            <SettingsIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary={settingsLabel}/>\r\n                                                    </MenuItem>\r\n                                                </MenuList>\r\n                                            </ClickAwayListener>\r\n                                        </Paper>\r\n                                    </Grow>\r\n                                )}\r\n                            </Popper>\r\n                        </>\r\n                        : <Button color=\"inherit\"\r\n                                  className={classes.login}\r\n                                  component={RouterLink}\r\n                                  to='/login'>\r\n                            {loginLabel}\r\n                        </Button>\r\n                }\r\n\r\n            </Toolbar>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Header;\r\n\r\n//================================ STYLES =======================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {},\r\n    toolBar: {\r\n        maxWidth: 1000,\r\n        width: '100%',\r\n        margin: '0 auto',\r\n        boxSizing: 'border-box',\r\n        padding: '0 0 0 10px',\r\n    },\r\n    logo: {\r\n        flexGrow: 1,\r\n        color: 'white'\r\n    },\r\n    login: {\r\n        color: 'white'\r\n    },\r\n    button: {\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(0,0,0,0.3)',\r\n            borderRadius: 0,\r\n            minHeight: 64\r\n        },\r\n        textTransform: 'none',\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    label: {\r\n        minHeight: 64\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50,\r\n        margin: '0 10px'\r\n    },\r\n    icon: {\r\n        color: 'white'\r\n    },\r\n    popper: {\r\n        boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)'\r\n    }\r\n});\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getCurrentSidebarItem = (state: StateType) => state.sidebar.currentSidebarItem;","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {profileAC} from \"../../redux/profile-reducer\";\r\nimport {usersAC} from \"../../redux/users-reduser\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\nimport {getCurrentSidebarItem} from \"../../redux/sidebar-selectors\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useSidebarItem = (ownIndex: number) => {\r\n    const classes = useStyles();\r\n    const currentSidebarItem = useSelector(getCurrentSidebarItem)\r\n    const dispatch = useDispatch();\r\n    const onClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(ownIndex));// установить номер текущего элемнта бокового меню\r\n        dispatch(profileAC.setEditMode(false)); // выключить режим редактирования профиля\r\n        dispatch(usersAC.setShowUsersFrom('all')); // показывать всех пользователей (обнуления поиска)\r\n        dispatch(usersAC.setCurrentPage(1)); // установить текущую страницу пользователей - первую\r\n        dispatch(usersAC.setSearchFriendsParams({term: ''})); // обнуления параметров поиска друзей\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(0)); // переключение на первый элмемент бокового меню\r\n        dispatch(usersAC.setValueFromHeaderSearch('')); // обнуление строки поиска пользователей из заголовка\r\n    };\r\n    return {\r\n        classes, currentSidebarItem, onClick\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst SidebarItem: React.FC<PropsTypes> = (props) => {\r\n    const {to, primary, icon, ownIndex} = props;\r\n    const {\r\n        classes, currentSidebarItem, onClick\r\n    } = useSidebarItem(ownIndex);\r\n\r\n    return (\r\n        <li>\r\n            <ListItem\r\n                onClick={onClick}\r\n                className={classes.listItem}\r\n                selected={ownIndex === currentSidebarItem}\r\n                button\r\n                component={RouterLink}\r\n                to={to}>\r\n                {\r\n                    icon\r\n                        ? <ListItemIcon className={clsx(ownIndex === currentSidebarItem && classes.iconSelected, classes.icon)}>\r\n                            {icon}\r\n                        </ListItemIcon>\r\n                        : null\r\n                }\r\n                <ListItemText primary={primary} className={clsx(ownIndex === currentSidebarItem && classes.text)}/>\r\n            </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;\r\n\r\n//============================== TYPES ==================================\r\ntype PropsTypes = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\n//============================== STYLES ===================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    icon: {\r\n       minWidth: 'inherit',\r\n        marginRight: 10\r\n    },\r\n    iconSelected: {\r\n        color: indigo[500]\r\n    },\r\n    text: {\r\n        color: indigo[600],\r\n        fontWeight: 900\r\n    },\r\n    listItem: {\r\n        padding: '5px 5px 5px 10px'\r\n    }\r\n}));","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SupervisedUserCircleIcon from '@material-ui/icons/SupervisedUserCircle';\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport { useSelector } from 'react-redux';\r\nimport {Lang} from \"../../const/lang\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useSidebar = () => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const profileLabel = lang === 'rus' ? Lang['My profile'].rus : Lang['My profile'].eng;\r\n    const profileDialogs = lang === 'rus' ? Lang['Dialogs'].rus : Lang['Dialogs'].eng;\r\n    const profileUsers = lang === 'rus' ? Lang['Users'].rus : Lang['Users'].eng;\r\n    const profileFriends = lang === 'rus' ? Lang['Friends'].rus : Lang['Friends'].eng;\r\n    const profileSettings = lang === 'rus' ? Lang['Settings'].rus : Lang['Settings'].eng;\r\n    return {\r\n        classes, profileLabel, profileDialogs,\r\n        profileUsers, profileFriends, profileSettings\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst Sidebar: React.FC = () => {\r\n    const {\r\n        classes, profileLabel, profileDialogs,\r\n        profileUsers, profileFriends, profileSettings\r\n    } = useSidebar();\r\n\r\n    return (\r\n        <List className={classes.list}>\r\n            <SidebarItem ownIndex={1} to={\"/profile\"} primary={profileLabel} icon={<HomeIcon/>}/>\r\n            <SidebarItem ownIndex={2} to={\"/dialogs\"} primary={profileDialogs} icon={<ChatIcon/>}/>\r\n            <SidebarItem ownIndex={3} to={\"/users\"} primary={profileUsers} icon={<SupervisedUserCircleIcon/>}/>\r\n            <SidebarItem ownIndex={4} to={\"/friends\"} primary={profileFriends} icon={<AccountCircleIcon/>}/>\r\n            <SidebarItem ownIndex={5} to={\"/settings\"} primary={profileSettings} icon={<SettingsIcon/>}/>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        flexBasis: 160,\r\n        flexShrink: 0,\r\n        padding: '10px 0'\r\n    }\r\n});","import React, {ChangeEvent, useState} from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useRenderPasswordField = () => {\r\n    const classes = useStyles();\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [password, setPassword] = useState('')\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value);\r\n    };\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n    };\r\n    return {classes, showPassword, password, handleChange,\r\n        handleClickShowPassword, handleMouseDownPassword}\r\n}\r\n\r\n\r\n//======================= COMPONENT ===============================\r\nconst RenderPasswordField: React.FC<PropsType> = (props) => {\r\n    const {label, input, placeholder, meta, disabled} = props;\r\n    const {classes, showPassword, password, handleChange,\r\n        handleClickShowPassword, handleMouseDownPassword} = useRenderPasswordField();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LockIcon className={classes.iconLeft}/>\r\n\r\n            <FormControl className={classes.textField}\r\n                         variant=\"outlined\">\r\n\r\n                <InputLabel htmlFor=\"outlined-adornment-password\" classes={{\r\n                    outlined: classes.outlined\r\n                }}>{label}</InputLabel>\r\n\r\n                <OutlinedInput\r\n                    classes={{\r\n                        root: classes.outlinedInputRoot,\r\n                        input: classes.outlinedInputInput\r\n                    }}\r\n                    disabled={disabled}\r\n                    id=\"outlined-adornment-password\"\r\n                    placeholder={placeholder}\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    value={password}\r\n                    error={meta.touched && meta.invalid}\r\n                    onChange={handleChange}\r\n\r\n                    {...input}\r\n\r\n\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={handleClickShowPassword}\r\n                                onMouseDown={handleMouseDownPassword}\r\n                                edge=\"end\"\r\n                                className={classes.iconButton}\r\n                            >\r\n                                {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                    labelWidth={73}\r\n                />\r\n\r\n                {meta.touched && meta.invalid && <Typography color='error' variant='caption' className={classes.error}>\r\n                    {meta.error}\r\n                </Typography>}\r\n\r\n            </FormControl>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RenderPasswordField;\r\n\r\n//=============================== TYPES =================================\r\ntype PropsType = {\r\n    label: string\r\n    input: any\r\n    placeholder: string\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    disabled: boolean\r\n}\r\n\r\n//=============================== STYLES ================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        width: '100%'\r\n    },\r\n    iconLeft: {\r\n        position: 'absolute',\r\n        left: -5,\r\n        top: '50%',\r\n        transform: 'translate(-100%, -50%)'\r\n    },\r\n    textField: {\r\n        width: '100%'\r\n    },\r\n    error: {\r\n        paddingLeft: 14,\r\n        paddingTop: 2\r\n    },\r\n    outlinedInputRoot: {\r\n        //height: 40,\r\n        width: '100%'\r\n    },\r\n    outlinedInputInput: {\r\n        height: 40,\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    outlined: {\r\n        transform: 'translate(14px, 12px) scale(1)'\r\n    },\r\n    iconButton: {\r\n        padding: 8\r\n    }\r\n\r\n});","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required, shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {getCaptchaSelector, getIsAuth} from \"../../redux/auth-selectors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport RenderTextField from \"../common/RenderTextField\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderPasswordField from \"../common/RenderPasswordField\";\r\nimport RenderCheckbox from \"../common/RenderCheckbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {Lang} from \"../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useLoginForm = () => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const emailLabel = lang === 'rus' ? Lang['email'].rus : Lang['email'].eng;\r\n    const passwordLabel = lang === 'rus' ? Lang['password'].rus : Lang['password'].eng;\r\n    const rememberMeLabel = lang === 'rus' ? Lang['Remember me'].rus : Lang['Remember me'].eng;\r\n    const captchaLabel = lang === 'rus' ? Lang['Captcha'].rus : Lang['Captcha'].eng;\r\n    const captchaText = lang === 'rus' ? Lang['Enter symbols from image'].rus : Lang['Enter symbols from image'].eng;\r\n    const buttonLabel = lang === 'rus' ? Lang['Login'].rus : Lang['Login'].eng;\r\n    return {classes, emailLabel, passwordLabel, rememberMeLabel,\r\n        captchaLabel, captchaText, buttonLabel}\r\n}\r\n\r\n\r\n//=================================== Form =========================================\r\nconst LoginForm: React.FC<LoginFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, error, captcha} = props;\r\n    const {classes, emailLabel, passwordLabel, rememberMeLabel,\r\n        captchaLabel, captchaText, buttonLabel} = useLoginForm();\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name='email'\r\n                   component={RenderTextField}\r\n                   icon={<MailOutlineIcon/>}\r\n                   className={classes.textField}\r\n                   validate={[required, shouldNotBeEmpty]}\r\n                   label={emailLabel}\r\n                   size='small'\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field\r\n                name='password'\r\n                //disabled={isLoading}\r\n                className={classes.textField}\r\n                component={RenderPasswordField}\r\n                placeholder={passwordLabel}\r\n                label={passwordLabel}\r\n                validate={[required, shouldNotBeEmpty]}\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name=\"rememberMe\" component={RenderCheckbox} label={rememberMeLabel}/>\r\n        </div>\r\n\r\n        {\r\n            captcha\r\n            && <>\r\n                <div className={classes.fieldWrapper}>\r\n                    <img src={captcha} alt=\"\"/>\r\n                </div>\r\n                <Typography className={classes.captcha}>\r\n                    {captchaText}\r\n                </Typography>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field\r\n                        name='captcha'\r\n                        className={classes.textField}\r\n                        component={RenderTextField}\r\n                        placeholder={captchaLabel}\r\n                        label={captchaLabel}\r\n                        validate={[required, shouldNotBeEmpty]}\r\n                        size='small'\r\n                    />\r\n                </div>\r\n            </>\r\n        }\r\n\r\n        {error && !pristine &&\r\n        <Typography color='error' variant='h6' className={classes.fieldWrapper}>\r\n            {error}\r\n        </Typography>}\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Button type=\"submit\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    fullWidth={true}\r\n                    size='large'\r\n                    disabled={submitting || pristine}>\r\n                {buttonLabel}\r\n            </Button>\r\n        </div>\r\n\r\n    </form>\r\n};\r\n\r\n/////////////////////-ReduxLoginForm-////////////////////////////////////////\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useLogin = () => {\r\n    const classes = useStyles();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const captcha = useSelector(getCaptchaSelector);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const onSubmit = (values: LoginFormValuesType) => {\r\n        dispatch(login(values.email, values.password, values.rememberMe, values.captcha));\r\n    };\r\n    const title = lang === 'rus' ? Lang['Enter in your profile'].rus : Lang['Enter in your profile'].eng;\r\n    let history = useHistory();\r\n    if (isAuth) {\r\n        history.push('/profile');\r\n    }\r\n    return {classes, captcha, onSubmit, title}\r\n};\r\n\r\n//========================= COMPONENT =============================================================\r\nconst Login: React.FC = () => {\r\n    const {classes, captcha, onSubmit, title} = useLogin();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.card} elevation={6}>\r\n                <Typography\r\n                    className={classes.title}\r\n                    align='center'\r\n                    color='primary'\r\n                    variant='h5'\r\n                >\r\n                    {title}\r\n                </Typography>\r\n\r\n                <ReduxLoginForm onSubmit={onSubmit}\r\n                                captcha={captcha}/>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Login;\r\n\r\n//========================== TYPES ===============================\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\ntype LoginFormPropsType = InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps;\r\n\r\n//========================== STYLES ==============================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        width: 500,\r\n        padding: '15px 30px 15px 10px',\r\n        borderRadius: 10\r\n    },\r\n    error: {\r\n        width: 300,\r\n        marginBottom: 10,\r\n    },\r\n    textField: {\r\n\r\n        width: '100%',\r\n    },\r\n    fieldWrapper: {\r\n        marginLeft: 35,\r\n        marginBottom: 10\r\n    },\r\n    title: {\r\n        marginBottom: 20\r\n    },\r\n    captcha: {\r\n        marginLeft: 35,\r\n        marginBottom: 10\r\n    }\r\n});\r\n\r\n\r\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst usePaginator = (props: UsePaginatorType) => {\r\n    const {\r\n        totalItemsCount, pageSize, onPageChanged,\r\n        portionSize, currentPage, portionNumber,\r\n        setPortionNumber\r\n    } = props;\r\n    const classes = useStyles();\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);// число страниц\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i < pagesCount + 1; i++) {\r\n        pages.push(i);\r\n    }\r\n    const portionCount = Math.ceil(pagesCount / portionSize); // число порций (блоков) страниц\r\n    //const [portionNumber, setPortionNumber] = useState(1);// текущий номер порции (начинается с 1)\r\n    const startPortionNumber = (portionNumber - 1) * portionSize + 1; // номер первого элемента в порции\r\n    const endPortionNumber = portionNumber * portionSize; // номер последнего элемента в порции\r\n    const setPrevPortion = () => {\r\n        setPortionNumber(portionNumber - 1);\r\n        onPageChanged((portionNumber - 1) * portionSize);\r\n    };\r\n    const setNextPortion = () => {\r\n        setPortionNumber(portionNumber + 1);\r\n        onPageChanged((portionNumber) * portionSize + 1);\r\n    };\r\n    const setFirstPortion = () => {\r\n        setPortionNumber(1);\r\n        onPageChanged(1);\r\n    };\r\n    const setLastPortion = () => {\r\n        setPortionNumber(portionCount);\r\n        //onPageChanged((portionCount - 1) * portionSize + 1);\r\n        onPageChanged(pagesCount);\r\n    };\r\n    const elements = pages\r\n        .filter(p => p >= startPortionNumber && p <= endPortionNumber)\r\n        .map(p => (\r\n                <Button\r\n                    className={classes.buttonRoot}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p)\r\n                    }}\r\n                    size='small'\r\n                    color='primary'\r\n                    disableElevation\r\n                    variant={p === currentPage ? 'contained' : \"outlined\"}\r\n                >\r\n                    {p}\r\n                </Button>\r\n            )\r\n        );\r\n    const prevPortionLabelStart = (portionNumber - 2) * pageSize + 1;\r\n    const prevPortionLabelEnd = (portionNumber - 1) * pageSize;\r\n    const prevPortionLabel = `${prevPortionLabelStart}...${prevPortionLabelEnd}`;\r\n    const nextPortionLabelStart = portionNumber * pageSize + 1;\r\n    const nextPortionLabelEnd = (portionNumber < portionCount - 1) ? (portionNumber + 1) * pageSize : pagesCount;\r\n    const nextPortionLabel = `${nextPortionLabelStart}...${nextPortionLabelEnd}`;\r\n\r\n    return {\r\n        classes, portionNumber, portionCount, setPrevPortion,\r\n        setNextPortion, setFirstPortion, setLastPortion, elements,\r\n        prevPortionLabel, nextPortionLabel\r\n    }\r\n}\r\n\r\n//======================= COMPONENT ===============================\r\nconst Paginator: React.FC<PropsType> = (props) => {\r\n    const {\r\n        totalItemsCount, pageSize, currentPage,\r\n        onPageChanged, portionSize = 10, portionNumber,\r\n        setPortionNumber\r\n    } = props;\r\n    const {\r\n        classes, portionCount, setPrevPortion,\r\n        setNextPortion, setFirstPortion, setLastPortion, elements,\r\n        prevPortionLabel, nextPortionLabel\r\n    } = usePaginator({totalItemsCount, pageSize, onPageChanged,\r\n        portionSize, currentPage, portionNumber, setPortionNumber});\r\n\r\n    return (\r\n        <div>\r\n\r\n            {portionNumber > 1 &&\r\n            <IconButton onClick={setFirstPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <FirstPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n            {portionNumber > 1 && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setPrevPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {prevPortionLabel}\r\n            </Button>}\r\n\r\n            {elements}\r\n\r\n            {portionNumber < portionCount && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setNextPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {nextPortionLabel}\r\n            </Button>}\r\n\r\n            {portionNumber < portionCount &&\r\n            <IconButton onClick={setLastPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <LastPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n        </div>)\r\n};\r\n\r\nexport default Paginator;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n    portionNumber: number\r\n    setPortionNumber: (portionNumber: number) => void\r\n}\r\ntype UsePaginatorType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize: number\r\n    portionNumber: number\r\n    setPortionNumber: (portionNumber: number) => void\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    buttonRoot: {\r\n        marginRight: 5,\r\n        paddingLeft: 3,\r\n        paddingRight: 3,\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        minWidth: 24\r\n    },\r\n    iconButtonRoot: {\r\n        borderRadius: 4,\r\n        border: '1px solid rgba(63, 81, 181, 0.5)',\r\n        marginRight: 5,\r\n        padding: 0,\r\n        color: indigo[500]\r\n    },\r\n    icon: {\r\n        width: 22.4,\r\n        height: 22.4\r\n    }\r\n})\r\n","import {FormControl} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useRenderRadioButton = ({labels, classes}: UseRenderRadioButtonType) => {\r\n    const formControlLabelElements = labels\r\n        .map((el, i) => <FormControlLabel value={el.value}\r\n                                          key={i}\r\n                                          className={classes.formControlLabel}\r\n                                          control={<Radio/>}\r\n                                          label={el.label}/>)\r\n    return {formControlLabelElements}\r\n};\r\n\r\n\r\n//======================= COMPONENT ===============================\r\nconst RenderRadioButton: React.FC<PropsType> = (props) => {\r\n    const {labels, value, input, classes, label, ...rest} = props;\r\n    const {formControlLabelElements} = useRenderRadioButton({labels, classes});\r\n    return (\r\n        <FormControl >\r\n            <FormLabel component=\"legend\" className={classes.formLabel}>\r\n                {label}\r\n            </FormLabel>\r\n            <RadioGroup value=\"all\" className={classes.radioGroup}  {...input} {...rest}>\r\n                {formControlLabelElements}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default RenderRadioButton;\r\n\r\n//======================= TYPES ======================================================\r\ntype labelsItemType = {\r\n    value: string\r\n    label: string\r\n}\r\ntype PropsType = {\r\n    value: string\r\n    labels: Array<labelsItemType>\r\n    input: any\r\n    classes: any\r\n    label: string\r\n}\r\ntype UseRenderRadioButtonType = {\r\n    labels: Array<labelsItemType>\r\n    classes: any\r\n}\r\n","import React, {ReactElement, useEffect} from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, submit} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {Button, Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderRadioButton from \"../../common/RenderRadioButton\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {SearchUsersParamsType} from \"../../../types/types\";\r\nimport {getValueFromHeaderSearch} from \"../../../redux/users-selectors\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useSearchUsersForm = () => {\r\n    const classes = useStyles();\r\n    const classesRadioButton = useStylesRadioButton();\r\n    const lang = useSelector(getLang);\r\n    const nameLabel = translate(lang, 'Name');\r\n    const userAreFriendOrNotLabel = translate(lang, 'User are friend or not');\r\n    const allLabel = translate(lang, 'All');\r\n    const friendLabel = translate(lang, 'Friend');\r\n    const notFriendLabel = translate(lang, 'Not friend')\r\n    const searchLabel = translate(lang, 'Search')\r\n\r\n    return {\r\n        classes, classesRadioButton, nameLabel,\r\n        userAreFriendOrNotLabel, allLabel, friendLabel,\r\n        notFriendLabel, searchLabel\r\n    }\r\n}\r\n\r\n//========================== FORM =======================================\r\nconst SearchUsersForm: React.FC<SearchUsersFormPropsType> = (props): ReactElement => {\r\n    const {handleSubmit, submitting, pristine, error} = props;\r\n    const {\r\n        classes, classesRadioButton, nameLabel,\r\n        userAreFriendOrNotLabel, allLabel, friendLabel,\r\n        notFriendLabel, searchLabel\r\n    } = useSearchUsersForm();\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <Field name='term'\r\n                   component={RenderTextField}\r\n                   fullWidth\r\n                   autoFocus={true}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   label={nameLabel}\r\n                   size='small'\r\n            />\r\n\r\n            <Field name='friend'\r\n                   label={userAreFriendOrNotLabel}\r\n                   component={RenderRadioButton}\r\n                   classes={classesRadioButton}\r\n                   labels={[\r\n                       {value: \"all\", label: allLabel},\r\n                       {value: \"true\", label: friendLabel},\r\n                       {value: \"false\", label: notFriendLabel}\r\n                   ]}\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SearchIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    {searchLabel}\r\n                </Button>\r\n            </div>\r\n\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst SearchUsersReduxForm = reduxForm<SearchUsersParamsType, SearchUsersFormOwnPropsType>({\r\n    form: 'searchUsers',\r\n})(SearchUsersForm);\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useUsersSearch = () => {\r\n    const classes = useStyles();\r\n    const valueFromHeaderSearch = useSelector(getValueFromHeaderSearch);\r\n    const dispatch = useDispatch();\r\n    const onSubmit = (formValue: SearchUsersParamsType) => {\r\n        dispatch(usersAC.setSearchUsersParams(formValue));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n        dispatch(usersAC.setShowUsersFrom('search'));\r\n    };\r\n    const term = valueFromHeaderSearch ? valueFromHeaderSearch : '';\r\n    const initialValues = {term: term, friend: 'all'} as SearchUsersParamsType;\r\n    useEffect(() => {\r\n        if (valueFromHeaderSearch) {\r\n            dispatch(submit('searchUsers'));\r\n            dispatch(usersAC.setSearchUsersParams({term: valueFromHeaderSearch, friend: 'all'}));\r\n            dispatch(usersAC.setCurrentPage(1));\r\n            dispatch(usersAC.setShowUsersFrom('search'));\r\n        }\r\n    }, [valueFromHeaderSearch, dispatch]);\r\n    return {\r\n        classes, onSubmit, initialValues\r\n    }\r\n}\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst UsersSearch: React.FC = (): ReactElement => {\r\n    const {\r\n        classes, onSubmit, initialValues\r\n    } = useUsersSearch();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6'\r\n                        color='primary'\r\n                        classes={{\r\n                            h6: classes.title\r\n                        }}>\r\n                Search users\r\n            </Typography>\r\n            <Divider classes={{\r\n                root: classes.divider\r\n            }}/>\r\n            <SearchUsersReduxForm onSubmit={onSubmit} initialValues={initialValues}/>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default UsersSearch;\r\n\r\n//===================================== TYPES====================================================\r\ntype SearchUsersFormPropsType =\r\n    InjectedFormProps<SearchUsersParamsType, SearchUsersFormOwnPropsType>\r\n    & SearchUsersFormOwnPropsType;\r\ntype SearchUsersFormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 10,\r\n        paddingBottom: 10,\r\n        marginBottom: 10\r\n    },\r\n    title: {\r\n        marginLeft: 10,\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    }\r\n});\r\nconst useStylesRadioButton = makeStyles({\r\n    formLabel: {\r\n        margin: '15px 10px 5px',\r\n    },\r\n    radioGroup: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        marginLeft: 10\r\n    },\r\n    formControlLabel: {},\r\n});","import ViewListIcon from '@material-ui/icons/ViewList';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport {ToggleButtonGroup} from \"@material-ui/lab\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport React from 'react';\r\nimport {ViewType} from \"../../types/types\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useViewSwitcher = ({setView}: UseViewSwitcherType) => {\r\n    const onChangeHandle = (event: React.MouseEvent<HTMLElement>, newView: ViewType) => {\r\n        setView(newView);\r\n    };\r\n    return {onChangeHandle}\r\n};\r\n\r\nconst ViewSwitcher: React.FC<PropsType> = ({view, setView}) => {\r\n    const {onChangeHandle} = useViewSwitcher({setView});\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            size='small'\r\n            exclusive\r\n            value={view}\r\n            onChange={onChangeHandle}\r\n            aria-label=\"items view\"\r\n        >\r\n            <ToggleButton value=\"list\" aria-label=\"list view\">\r\n                <ViewListIcon fontSize='small' color='primary'/>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"block\" aria-label=\"block view\">\r\n                <ViewModuleIcon fontSize='small' color='primary'/>\r\n            </ToggleButton>\r\n\r\n        </ToggleButtonGroup>\r\n    )\r\n};\r\n\r\nexport default ViewSwitcher;\r\n\r\n//========================== TYPES ===========================\r\ntype PropsType = {\r\n    view: ViewType\r\n    setView: (view: ViewType) => void\r\n}\r\ntype UseViewSwitcherType = {\r\n    setView: (view: ViewType) => void\r\n}","import React, {ReactElement} from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useUserBlockItem = (user: UserType) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const onFollowUnfollowClick = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n    const onOpenSendMessageFormHandle = () => {\r\n        setOpenSendMessageForm(true)\r\n    };\r\n    const buttonLabel = user.followed\r\n        ? translate(lang, 'Unfollow') :\r\n        translate(lang, 'Follow');\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n    const src = ((user && user.photos.small) ? user.photos.small : undefined) as string | undefined;\r\n    const sendMessageLabel = translate(lang, 'Send message')\r\n    return {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        followingInProgress, isFollowing, onFollowUnfollowClick,\r\n        onOpenSendMessageFormHandle, buttonLabel, startIcon, src,\r\n        sendMessageLabel\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst UserBlockItem: React.FC<PropType> = ({user, dialogs}): ReactElement => {\r\n    const {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        followingInProgress, isFollowing, onFollowUnfollowClick,\r\n        onOpenSendMessageFormHandle, buttonLabel, startIcon, src,\r\n        sendMessageLabel\r\n    } = useUserBlockItem(user);\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card elevation={6} className={classes.card}>\r\n                <CardActionArea component={RouterLink}\r\n                                to={`/users/${user.id}`}>\r\n                    <Avatar className={classes.avatar}\r\n                            src={src ? src : undefined}\r\n                            variant=\"rounded\"/>\r\n                </CardActionArea>\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography color='primary'\r\n                                variant='subtitle2'\r\n                                align='center'>\r\n                        {user.name}\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n                <CardActions disableSpacing className={classes.cardActions}>\r\n\r\n                    <div className={classes.buttons}>\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button className={classes.button}\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    size='small'\r\n                                    fullWidth\r\n                                    disabled={followingInProgress.some(item => item === user.id)}\r\n                                    onClick={onFollowUnfollowClick}\r\n                                    startIcon={startIcon}\r\n                            >\r\n                                {buttonLabel}\r\n                            </Button>\r\n\r\n                            {\r\n                                isFollowing\r\n                                && followingInProgress.some(item => item === user.id)\r\n                                &&\r\n                                <CircularPreloader size={20} styleType={'absolute'}/>\r\n                            }\r\n\r\n                        </div>\r\n\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant='outlined'\r\n                                color=\"primary\"\r\n                                size='small'\r\n                                fullWidth\r\n                                onClick={onOpenSendMessageFormHandle}\r\n                                startIcon={<SendIcon/>}\r\n                            >\r\n                                {sendMessageLabel}\r\n                            </Button>\r\n                        </div>\r\n\r\n                        <SendMessageForm open={openSendMessageForm}\r\n                                         onClose={setOpenSendMessageForm}\r\n                                         id={user.id}\r\n                                         name={user.name}\r\n                                         src={src}\r\n                                         dialogs={dialogs}\r\n                        />\r\n\r\n                    </div>\r\n                </CardActions>\r\n\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default UserBlockItem;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        width: 150,\r\n        padding: 10\r\n    },\r\n    media: {\r\n        height: 150,\r\n        borderRadius: 5\r\n    },\r\n    avatar: {\r\n        width: 150,\r\n        height: 150,\r\n    },\r\n    cardContent: {\r\n        padding: 5\r\n    },\r\n    cardActions: {\r\n        padding: 0,\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        marginBottom: 5\r\n    },\r\n    buttons: {\r\n        width: '100%',\r\n        marginTop: 0\r\n    },\r\n});","import React, {ReactElement} from 'react';\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {SidebarItemEnum, UserType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar/ListItemAvatar\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {translate} from \"../../../const/lang\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useUserListItem = (user: UserType) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const followUnfollowHandle = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n    const onOpenSendMessageFormHandle = () => {\r\n        setOpenSendMessageForm(true)\r\n    };\r\n    const goToUserHandle = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.users));\r\n    };\r\n    const followLabel = user.followed\r\n        ? translate(lang, 'Unfollow') :\r\n        translate(lang, 'Follow');\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n    const src = ((user && user.photos.small) ? user.photos.small : undefined) as string | undefined;\r\n    const sendMessageLabel = translate(lang, 'Send message')\r\n    return {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        followingInProgress, isFollowing, followUnfollowHandle,\r\n        onOpenSendMessageFormHandle, goToUserHandle, followLabel,\r\n        startIcon, src, sendMessageLabel\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst UserListItem: React.FC<PropType> = ({user, dialogs}): ReactElement => {\r\n    const {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        followingInProgress, isFollowing, followUnfollowHandle,\r\n        onOpenSendMessageFormHandle, goToUserHandle, followLabel,\r\n        startIcon, src, sendMessageLabel\r\n    } = useUserListItem(user);\r\n\r\n    return (\r\n        <ListItem className={classes.listItem}>\r\n            <ListItemAvatar>\r\n                <Avatar\r\n                    className={classes.avatar}\r\n                    src={src}\r\n                />\r\n            </ListItemAvatar>\r\n            <div className={classes.text}>\r\n                <Link component={RouterLink} to={`/users/${user.id}`} variant='subtitle2'\r\n                      onClick={goToUserHandle}>\r\n                    <Typography color='textPrimary'>\r\n                        {user.name}\r\n                    </Typography>\r\n\r\n                </Link>\r\n                <Link component={RouterLink} to='#' variant='body2' onClick={onOpenSendMessageFormHandle}>\r\n                    {sendMessageLabel}\r\n                </Link>\r\n                <div className={classes.buttonWrapper}>\r\n                    <Button className={classes.button}\r\n                            color=\"primary\"\r\n                            size='small'\r\n                            fullWidth\r\n                            disabled={followingInProgress.some(item => item === user.id)}\r\n                            onClick={followUnfollowHandle}\r\n                            startIcon={startIcon}\r\n                    >\r\n                        {followLabel}\r\n                    </Button>\r\n\r\n                    {\r\n                        isFollowing\r\n                        && followingInProgress.some(item => item === user.id)\r\n                        &&\r\n                        <CircularPreloader size={20} styleType={'absolute'}/>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n            <SendMessageForm open={openSendMessageForm}\r\n                             onClose={setOpenSendMessageForm}\r\n                             id={user.id}\r\n                             name={user.name}\r\n                             src={src}\r\n                             dialogs={dialogs}\r\n            />\r\n        </ListItem>\r\n    )\r\n};\r\n\r\nexport default UserListItem;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    listItem: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 6,\r\n        borderRadius: 6,\r\n        backgroundColor: 'white',\r\n        boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2), 0px 6px 10px 0px rgba(0,0,0,0.14), 0px 1px 18px 0px rgba(0,0,0,0.12)'\r\n    },\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n    text: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'flex-start'\r\n    },\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        marginBottom: 5\r\n    },\r\n\r\n    // root: {\r\n    //     width: 150,\r\n    //     padding: 10\r\n    // },\r\n    // media: {\r\n    //     height: 150,\r\n    //     borderRadius: 5\r\n    // },\r\n    // avatar: {\r\n    //     width: 150,\r\n    //     height: 150,\r\n    // },\r\n    // cardContent: {\r\n    //     padding: 5\r\n    // },\r\n    // cardActions: {\r\n    //     padding: 0,\r\n    // },\r\n\r\n    // buttons: {\r\n    //     width: '100%',\r\n    //     marginTop: 0\r\n    // },\r\n});","import React, {ReactElement} from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {UserType, ViewType} from \"../../../types/types\";\r\nimport UserBlockItem from \"./UserBlockItem\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport UserListItem from \"./UserListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useUsersList = (\r\n    users: null | Array<UserType>,\r\n    dialogs: null | Array<DialogType>,\r\n    isLoading: boolean,\r\n    pageSize: number\r\n) => {\r\n    const classes = useStyles();\r\n    const usersBlockItems = users && users.map(user => <UserBlockItem\r\n        user={user}\r\n        key={user.id}\r\n        dialogs={dialogs}\r\n    />);\r\n    const usersListItems = users && users.map(user => <UserListItem\r\n        user={user}\r\n        key={user.id}\r\n        dialogs={dialogs}\r\n    />);\r\n    const allIsLoaded = !isLoading && users && dialogs;\r\n    let skeletonBlockItems = [] as Array<React.ReactElement>;\r\n    for (let i = 0; i < pageSize; i++) {\r\n        skeletonBlockItems.push(\r\n            <Grid item key={i}>\r\n                <Skeleton variant=\"rect\" width={170} height={272} className={classes.skeletonBlockItem}/>\r\n            </Grid>\r\n        )\r\n    }\r\n    let skeletonListItems = [] as Array<React.ReactElement>;\r\n    for (let i = 0; i < pageSize; i++) {\r\n        skeletonListItems.push(\r\n            <Skeleton variant=\"rect\" width='100%' height={96} className={classes.skeletonListItem}/>\r\n        )\r\n    }\r\n    return {\r\n        usersBlockItems, usersListItems,\r\n        allIsLoaded, skeletonBlockItems, skeletonListItems\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst UsersList: React.FC<PropsType> = ({isLoading, users, dialogs, view, pageSize}): ReactElement => {\r\n    const {\r\n        usersBlockItems, usersListItems,\r\n        allIsLoaded, skeletonBlockItems, skeletonListItems\r\n    } = useUsersList(users, dialogs, isLoading, pageSize);\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                view === \"block\" &&\r\n                <>\r\n                    {\r\n                        allIsLoaded\r\n                            ? <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                                {usersBlockItems}\r\n                            </Grid>\r\n                            : <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                                {skeletonBlockItems}\r\n                            </Grid>\r\n                    }\r\n                </>\r\n            }\r\n\r\n            {\r\n                view === \"list\" &&\r\n                <>\r\n                    {\r\n                        allIsLoaded\r\n                            ? <List disablePadding>\r\n                                {usersListItems}\r\n                            </List>\r\n                            : <List disablePadding>\r\n                                {skeletonListItems}\r\n                            </List>\r\n                    }\r\n                </>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UsersList;\r\n\r\n//======================= TYPES =====================\r\ntype PropsType = {\r\n    isLoading: boolean\r\n    users: null | Array<UserType>\r\n    dialogs: null | Array<DialogType>\r\n    view: ViewType\r\n    pageSize: number\r\n};\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    skeletonBlockItem: {\r\n        borderRadius: 4\r\n    },\r\n    skeletonListItem: {\r\n        borderRadius: 4,\r\n        marginBottom: 5\r\n    }\r\n})","import React, {ReactElement, useEffect, useState} from 'react';\r\nimport Paginator from '../../common/Paginator';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize, getPortionNumber,\r\n    getSearchUsersParams, getShowUsersFrom,\r\n    getTotalUsersCount,\r\n    getUsersSelector, getValueFromHeaderSearch\r\n} from \"../../../redux/users-selectors\";\r\nimport {getIsLoading, getLang} from \"../../../redux/app-selectors\";\r\nimport {getUsers, searchUsers, usersAC} from \"../../../redux/users-reduser\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport UsersSearch from \"./UsersSearch\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport ViewSwitcher from \"../../common/ViewSwitcher\";\r\nimport UsersList from \"./UsersList\";\r\nimport {ViewType} from \"../../../types/types\";\r\nimport {translate} from \"../../../const/lang\";\r\nimport useAuthRedirect from \"../../../hooks/useAuthRedirect\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useUsers = () => {\r\n    const classes = useStyles();\r\n    const users = useSelector(getUsersSelector);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const pageSize = useSelector(getPageSize);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const searchUsersParams = useSelector(getSearchUsersParams);\r\n    const showUsersFrom = useSelector(getShowUsersFrom);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n    const valueFromHeaderSearch = useSelector(getValueFromHeaderSearch);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const [searchPanelIsOpen, setSearchPanelIsOpen] = useState(false);\r\n    const [view, setView] = useState<ViewType>('block')\r\n    useEffect(() => {\r\n        dispatch(getDialogs());\r\n    }, [dispatch]);\r\n    useEffect(() => {\r\n        if (showUsersFrom === 'all') {\r\n            dispatch(getUsers(currentPage, pageSize));\r\n        } else if (showUsersFrom === 'search') {\r\n            dispatch(searchUsers(currentPage, pageSize, searchUsersParams.term, searchUsersParams.friend));\r\n        }\r\n    }, [currentPage, pageSize, showUsersFrom, searchUsersParams.term, searchUsersParams.friend, dispatch]);\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentPage(pageNumber));\r\n    };\r\n    const onSearchCharactersClick = () => {\r\n        setSearchPanelIsOpen(!searchPanelIsOpen);\r\n    };\r\n    const onShowAllClick = () => {\r\n        dispatch(usersAC.setShowUsersFrom('all'));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n    };\r\n    const countTitle = showUsersFrom === 'all'\r\n        ? translate(lang, 'Total all users count:') :\r\n        translate(lang, 'Total users count from search:')\r\n    useEffect(() => {\r\n        if (valueFromHeaderSearch) {\r\n            setSearchPanelIsOpen(true)\r\n        }\r\n    }, [valueFromHeaderSearch]);\r\n    const closeSearchLabel = translate(lang, 'Close search');\r\n    const openSearchLabel = translate(lang, 'Open search');\r\n    const showAllLabel = translate(lang, 'Show all');\r\n    const portionNumber = useSelector(getPortionNumber);\r\n    const setPortionNumber = (portionNumber: number) => {\r\n        dispatch(usersAC.setPortionNumber(portionNumber))\r\n    };\r\n    return {\r\n        classes, users, totalUsersCount, pageSize, currentPage,\r\n        isLoading, showUsersFrom, dialogs, searchPanelIsOpen,\r\n        view, setView, onPageChanged, onSearchCharactersClick,\r\n        onShowAllClick, countTitle, closeSearchLabel, openSearchLabel,\r\n        showAllLabel, portionNumber, setPortionNumber\r\n    }\r\n}\r\n\r\n//======================= COMPONENT ===============================\r\nconst Users: React.FC = (): ReactElement => {\r\n    useAuthRedirect();\r\n    const {\r\n        classes, users, totalUsersCount, pageSize, currentPage,\r\n        isLoading, showUsersFrom, dialogs, searchPanelIsOpen,\r\n        view, setView, onPageChanged, onSearchCharactersClick,\r\n        onShowAllClick, countTitle, closeSearchLabel, openSearchLabel,\r\n        showAllLabel, portionNumber, setPortionNumber\r\n    } = useUsers();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Collapse in={searchPanelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <UsersSearch/>\r\n            </Collapse>\r\n\r\n            <div className={classes.topPanel}>\r\n                <Button onClick={onSearchCharactersClick}\r\n                        size='small'\r\n                        className={classes.button}\r\n                        color='primary'\r\n                        startIcon={searchPanelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {\r\n                        searchPanelIsOpen\r\n                            ? closeSearchLabel\r\n                            : openSearchLabel\r\n                    }\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        size='small'\r\n                        color='primary'\r\n                        disabled={showUsersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    {showAllLabel}\r\n                </Button>\r\n\r\n                <Typography color='primary'\r\n                            variant='subtitle2'\r\n                            className={classes.countTitle}\r\n                >\r\n                    {countTitle}\r\n                </Typography>\r\n\r\n                <Badge badgeContent={totalUsersCount} color=\"primary\" max={99999} showZero>\r\n                    <PeopleIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n\r\n            {\r\n                totalUsersCount !== 0 && totalUsersCount && pageSize && currentPage &&\r\n                <div className={classes.paginatorTopWrapper}>\r\n                    <div className={classes.paginator}>\r\n                        <Paginator totalItemsCount={totalUsersCount}\r\n                                   pageSize={pageSize}\r\n                                   currentPage={currentPage}\r\n                                   onPageChanged={onPageChanged}\r\n                                   portionNumber={portionNumber}\r\n                                   setPortionNumber={setPortionNumber}\r\n                        />\r\n                    </div>\r\n\r\n                    <ViewSwitcher view={view} setView={setView}/>\r\n                </div>\r\n\r\n            }\r\n\r\n            <UsersList isLoading={isLoading}\r\n                       users={users}\r\n                       dialogs={dialogs}\r\n                       view={view}\r\n                       pageSize={pageSize}\r\n            />\r\n\r\n            {\r\n                totalUsersCount !== 0 && totalUsersCount && pageSize && currentPage &&\r\n                <div className={classes.paginatorBottomWrapper}>\r\n                    <div className={classes.paginator}>\r\n                        <Paginator totalItemsCount={totalUsersCount}\r\n                                   pageSize={pageSize}\r\n                                   currentPage={currentPage}\r\n                                   onPageChanged={onPageChanged}\r\n                                   portionNumber={portionNumber}\r\n                                   setPortionNumber={setPortionNumber}\r\n                        />\r\n                    </div>\r\n                    <ViewSwitcher view={view} setView={setView}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Users;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        //padding: 15,\r\n        minHeight: '100vh'\r\n    },\r\n    topPanel: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    },\r\n    countTitle: {\r\n        marginRight: 10\r\n    },\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    paginatorTopWrapper: {\r\n        marginBottom: 10,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    paginatorBottomWrapper: {\r\n        marginTop: 10,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    paginator: {\r\n        marginRight: 20\r\n    },\r\n});\r\n\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {SidebarItemEnum, UserType} from \"../../../types/types\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useFriendsListItem = ({friend}: UseFriendsListItemType) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const lang = useSelector(getLang);\r\n    const onListItemClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.users));\r\n    };\r\n    const onOpenSendMessageFormHandle = (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        setOpenSendMessageForm(true)\r\n    };\r\n    const src = (friend ? friend.photos.small : undefined) as string | undefined;\r\n    //========================= popper ========================================\r\n    const [open, setOpen] = useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    const handleListKeyDown = (event: React.KeyboardEvent) => {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //============================== IconButton ===================================================\r\n    const removeHandle = () => {\r\n        dispatch(usersAC.setNeedToChangeListOfFriends(true, friend.id))\r\n    };\r\n    const somethingElseHandle = () => {\r\n    };\r\n    const labels = [\r\n        translate(lang, 'Remove from friends'),\r\n        translate(lang, 'Something else'),\r\n        translate(lang, 'Something else')\r\n    ];\r\n    const callbacks = [removeHandle, somethingElseHandle, somethingElseHandle]\r\n    const menuItemsElements = labels.map((el, i) => {\r\n        const onClickHandle = (event: React.MouseEvent<EventTarget>) => {\r\n            handleClose(event);\r\n            callbacks[i]();\r\n        };\r\n        return (\r\n            <MenuItem key={i}\r\n                      onClick={onClickHandle}\r\n            >\r\n                {labels[i]}\r\n            </MenuItem>\r\n        )\r\n    });\r\n    const sendMessageLabel = translate(lang, 'Send message')\r\n    return {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        followingInProgress, isFollowing, onListItemClick,\r\n        onOpenSendMessageFormHandle, src, open, anchorRef,\r\n        handleToggle, handleClose, handleListKeyDown,\r\n        menuItemsElements, sendMessageLabel\r\n    };\r\n}\r\n\r\n//======================= COMPONENT ===============================\r\nconst FriendsListItem: React.FC<PropsTypes> = ({friend, dialogs}) => {\r\n    const {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        followingInProgress, isFollowing, onListItemClick,\r\n        onOpenSendMessageFormHandle, src, open, anchorRef,\r\n        handleToggle, handleClose, handleListKeyDown,\r\n        menuItemsElements, sendMessageLabel\r\n    } = useFriendsListItem({friend});\r\n    return (\r\n        <>\r\n            <Divider className={classes.divider}/>\r\n            <ListItem className={classes.listItem}>\r\n                <div className={classes.listItemInner}>\r\n                    <div className={classes.listItemInnerleft}>\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={friend.photos.large ? friend.photos.large : undefined}\r\n                            />\r\n                        </ListItemAvatar>\r\n                        <div className={classes.text}>\r\n                            <Link component={RouterLink} to={`/users/${friend.id}`} variant='subtitle2'\r\n                                  onClick={onListItemClick}>\r\n                                {friend.name}\r\n                            </Link>\r\n                            <Link component={RouterLink} to='#' variant='body2' onClick={onOpenSendMessageFormHandle}>\r\n                                {sendMessageLabel}\r\n                            </Link>\r\n                        </div>\r\n                        <SendMessageForm open={openSendMessageForm}\r\n                                         onClose={setOpenSendMessageForm}\r\n                                         id={friend.id}\r\n                                         name={friend.name}\r\n                                         src={src}\r\n                                         dialogs={dialogs}\r\n                        />\r\n\r\n                    </div>\r\n                    {/*<IconButtonWithPopper*/}\r\n                    {/*    icon={<MoreVertIcon/>}*/}\r\n                    {/*    classes={classesPopper}*/}\r\n                    {/*    labels={labels}*/}\r\n                    {/*    callbacks={callbacks}*/}\r\n                    {/*/>*/}\r\n\r\n                    <div>\r\n                        <IconButton ref={anchorRef}\r\n                                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleToggle}\r\n                                    edge=\"end\"\r\n                                    aria-label=\"delete\"\r\n                                    className={classes.iconButton}>\r\n                            <MoreVertIcon/>\r\n                        </IconButton>\r\n                        <Popper className={classes.popper}\r\n                                open={open}\r\n                                anchorEl={anchorRef.current}\r\n                                role={undefined}\r\n                                transition\r\n                                placement='bottom-end'\r\n                                disablePortal>\r\n                            {({TransitionProps, placement}) => (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                      onKeyDown={handleListKeyDown}>\r\n                                                {menuItemsElements}\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            )}\r\n                        </Popper>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isFollowing && followingInProgress.some(item => item === friend.id)\r\n                    && <CircularPreloader size={80} styleType={'absolute'}/>\r\n                }\r\n            </ListItem>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FriendsListItem;\r\n\r\n//========================== TYPES =============================================\r\ntype PropsTypes = {\r\n    friend: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\ntype UseFriendsListItemType = {\r\n    friend: UserType\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    popper: {\r\n        zIndex: 1000\r\n    },\r\n    listItemInner: {\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    listItemInnerleft: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexGrow: 1\r\n    },\r\n    listItem: {\r\n        position: 'relative'\r\n    },\r\n    text: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }\r\n\r\n});\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, reset, submit} from \"redux-form\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {getIsFriendsSearching, getSearchFriendsParams} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {translate} from \"../../../const/lang\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useForm = () => {\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const onChangeHandler = () => {\r\n        setTimeout(() => dispatch(submit('friends-search')));\r\n        dispatch(usersAC.setCurrentFriendsPage(1))\r\n    };\r\n    const nameOfTheFriendLabel = translate(lang, 'Name of the friend')\r\n    return {onChangeHandler, nameOfTheFriendLabel}\r\n}\r\n\r\n//========================== FORM =======================================\r\nconst Form: React.FC<FormPropsType> = ({handleSubmit}) => {\r\n    const {onChangeHandler, nameOfTheFriendLabel} = useForm();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='term'\r\n                       component={RenderTextField}\r\n                       fullWidth\r\n                       validate={[shouldNotBeEmpty]}\r\n                       label={nameOfTheFriendLabel}\r\n                       size='small'\r\n                       onChange={onChangeHandler}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst ReduxForm = reduxForm<FormParamsType, FormOwnPropsType>({\r\n    form: 'friends-search',\r\n})(Form);\r\n\r\n//====================== CUSTOM HOOK =========================\r\nconst useFriendsSearch = () => {\r\n    const classes = useStyles();\r\n    const isFriendsSearching = useSelector(getIsFriendsSearching);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const dispatch = useDispatch();\r\n    const onSubmit = (formValue: FormParamsType) => {\r\n        dispatch(usersAC.setSearchFriendsParams({term: formValue.term}))\r\n    };\r\n    const icon = searchFriendsParams.term === ''\r\n        ? <SearchIcon/>\r\n        : <HighlightOffIcon/>;\r\n    const onClickHandler = () => {\r\n        if (searchFriendsParams.term !== '') {\r\n            dispatch(usersAC.setSearchFriendsParams({term: ''}));\r\n            dispatch(usersAC.setCurrentFriendsPage(1));\r\n            dispatch(reset('friends-search'));\r\n        }\r\n    };\r\n    return {\r\n        classes, isFriendsSearching,\r\n        onSubmit, icon, onClickHandler\r\n    }\r\n};\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst FriendsSearch: React.FC = () => {\r\n    const {\r\n        classes, isFriendsSearching,\r\n        onSubmit, icon, onClickHandler\r\n    } = useFriendsSearch();\r\n\r\n    return (\r\n        <div className={classes.search}>\r\n            <div className={classes.iconButton}>\r\n                {\r\n                    !isFriendsSearching\r\n                        ? <IconButton onClick={onClickHandler}>{icon}</IconButton>\r\n                        : <CircularPreloader size={20} styleType='absolute'/>\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.form}>\r\n                <ReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default FriendsSearch;\r\n\r\n//===================================== TYPES====================================================\r\ntype FormPropsType =\r\n    InjectedFormProps<FormParamsType, FormOwnPropsType>\r\n    & FormOwnPropsType;\r\ntype FormParamsType = {\r\n    term: string\r\n}\r\ntype FormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    fieldWrapper: {\r\n        margin: '10px 10px 5px 35px'\r\n    },\r\n    search: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '0 10px'\r\n    },\r\n    form: {\r\n        flexGrow: 1\r\n    },\r\n    iconButton: {\r\n        width: 48,\r\n        height: 48,\r\n        position: 'relative',\r\n        marginRight: 5\r\n    }\r\n\r\n});","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentFriendsPage,\r\n    getCurrentPage, getFriendIdToRemove,\r\n    getFriendsSelector,\r\n    getNeedToChangeListOfFriends,\r\n    getPageSize, getPortionNumber, getSearchFriendsParams, getTotalFriendsCount\r\n} from \"../../../redux/users-selectors\";\r\nimport FriendsListItem from \"./FriendsListItem\";\r\nimport React, {useEffect} from \"react\";\r\nimport {searchFriends, removeAndUpdateFriends, usersAC} from \"../../../redux/users-reduser\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsSearch from \"./FriendsSearch\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paginator from \"../../common/Paginator\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useFriendsList = () => {\r\n    const classes = useStyles();\r\n    const friends = useSelector(getFriendsSelector);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const currentFriendsPage = useSelector(getCurrentFriendsPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const needToChangeListOfFriends = useSelector(getNeedToChangeListOfFriends);\r\n    const friendIdToRemove = useSelector(getFriendIdToRemove);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const totalFriendsCount = useSelector(getTotalFriendsCount);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const FriendsListElements = friends\r\n        && friends.map(el => <FriendsListItem key={el.id} friend={el} dialogs={dialogs}/>);\r\n    useEffect(() => {\r\n        dispatch(searchFriends(currentFriendsPage, pageSize, searchFriendsParams.term));\r\n    }, [searchFriendsParams.term, currentFriendsPage, pageSize, dispatch]);\r\n    useEffect(() => {\r\n        if (needToChangeListOfFriends && friendIdToRemove) {\r\n            dispatch(removeAndUpdateFriends(currentPage, pageSize, friendIdToRemove));\r\n        }\r\n    }, [needToChangeListOfFriends, dispatch]);\r\n    useEffect(() => {\r\n        dispatch(getDialogs());\r\n    }, [dispatch]);\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentFriendsPage(pageNumber));\r\n    };\r\n    const portionNumber = useSelector(getPortionNumber);\r\n    const setPortionNumber = (portionNumber: number) => {\r\n        dispatch(usersAC.setPortionNumber(portionNumber))\r\n    };\r\n    return {\r\n        classes, currentFriendsPage, pageSize, totalFriendsCount,\r\n        lang, FriendsListElements, onPageChanged,\r\n        portionNumber, setPortionNumber\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst FriendsList: React.FC = () => {\r\n    const {\r\n        classes, currentFriendsPage, pageSize, totalFriendsCount,\r\n        lang, FriendsListElements, onPageChanged,\r\n        portionNumber, setPortionNumber\r\n    } = useFriendsList();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <div className={classes.title}>\r\n                <Typography component='span' color='primary' className={classes.titleLeft}>\r\n                    {translate(lang, 'Friends')}\r\n                </Typography>\r\n                <Typography component='span' color='textSecondary'>\r\n                    {totalFriendsCount}\r\n                </Typography>\r\n            </div>\r\n            <FriendsSearch/>\r\n\r\n            <div className={classes.paginatorTop}>\r\n                <Paginator totalItemsCount={totalFriendsCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentFriendsPage}\r\n                           onPageChanged={onPageChanged}\r\n                           portionNumber={portionNumber}\r\n                           setPortionNumber={setPortionNumber}\r\n                />\r\n            </div>\r\n\r\n            <List>\r\n                {FriendsListElements}\r\n            </List>\r\n\r\n            <Divider className={classes.divider}/>\r\n\r\n            <div className={classes.paginatorBottom}>\r\n                <Paginator totalItemsCount={totalFriendsCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentFriendsPage}\r\n                           onPageChanged={onPageChanged}\r\n                           portionNumber={portionNumber}\r\n                           setPortionNumber={setPortionNumber}\r\n                />\r\n            </div>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsList;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    title: {\r\n        padding: '5px 10px 5px 10px'\r\n    },\r\n    titleLeft: {\r\n        marginRight: 5\r\n    },\r\n    paginatorTop: {\r\n        marginLeft: 10,\r\n        marginTop: 5\r\n    },\r\n    paginatorBottom: {\r\n        marginLeft: 10,\r\n        marginBottom: 5,\r\n        marginTop: 10\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//====================== CUSTOM HOOK =========================\r\nconst useFriendsSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(newValue));\r\n    };\r\n    const friendsLabel = translate(lang, \"Friends\");\r\n    const somethingElseLabel = translate(lang, \"Something else\")\r\n    return {\r\n        classes, currentFriendsSidebarItem,\r\n        handleChange, friendsLabel, somethingElseLabel\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst FriendsSidebar: React.FC = () => {\r\n    const {\r\n        classes, currentFriendsSidebarItem,\r\n        handleChange, friendsLabel, somethingElseLabel\r\n    } = useFriendsSidebar();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Tabs\r\n                classes={{\r\n                    indicator: classes.indicator\r\n                }}\r\n                orientation=\"vertical\"\r\n                value={currentFriendsSidebarItem}\r\n                onChange={handleChange}\r\n                className={classes.tabs}\r\n            >\r\n\r\n                <Tab label={friendsLabel} icon={<GroupIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label={somethingElseLabel} icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label={somethingElseLabel} icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n\r\n            </Tabs>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid #ccc`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none',\r\n        '& > *:first-child': {\r\n            marginBottom: '0!important'\r\n        }\r\n    },\r\n    icon: {\r\n        margin: '0 10px',\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50\r\n    }\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//====================== CUSTOM HOOK =========================\r\nconst useFriendsSomethingElse = () => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    return {classes, lang}\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst FriendsSomethingElse: React.FC = () => {\r\n    const {classes, lang} = useFriendsSomethingElse();\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6' color='primary' align='center'>\r\n                {translate(lang, 'Something else')}\r\n            </Typography>\r\n        </Card>\r\n    )\r\n};\r\nexport default FriendsSomethingElse;\r\n\r\n//==================== STYLES ====================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n\r\n    }\r\n});","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsList from \"./FriendsList\";\r\nimport FriendsSidebar from \"./FriendsSidebar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport FriendsSomethingElse from \"./FriendsSomethingElse\";\r\nimport useAuthRedirect from \"../../../hooks/useAuthRedirect\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useFriends = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n    return {classes, currentFriendsSidebarItem}\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst Friends: React.FC = () => {\r\n    useAuthRedirect();\r\n    const {classes, currentFriendsSidebarItem} = useFriends();\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.leftColumn}>\r\n                {\r\n                    currentFriendsSidebarItem === 0\r\n                        ? <FriendsList/>\r\n                        : <FriendsSomethingElse/>\r\n                }\r\n            </div>\r\n            <div className={classes.rightColumn}>\r\n                <FriendsSidebar/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Friends;\r\n\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        display: \"flex\"\r\n    },\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    leftColumn: {\r\n        flexGrow: 1,\r\n        marginRight: 15,\r\n    },\r\n    rightColumn: {\r\n        flexBasis: 220,\r\n    }\r\n});","import Typography from \"@material-ui/core/Typography\";\r\nimport ColorPicker from \"material-ui-color-picker\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React, {ReactElement} from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//===================== CUSTOM HOOK ===========================\r\nconst useSettingsRow = (probeBackgroundColor: string, defaultColor: string) => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const useStylesSettings = makeStyles({\r\n        probe: {\r\n            backgroundColor: probeBackgroundColor,\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 5,\r\n            marginRight: 15\r\n        },\r\n        default: {\r\n            backgroundColor: defaultColor,\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 5,\r\n            marginRight: 15\r\n        }\r\n    });\r\n    const classesSettings = useStylesSettings();\r\n    return {\r\n        classes, lang, classesSettings\r\n    }\r\n}\r\n\r\n//====================== COMPONENT ============================\r\nconst SettingsRow: React.FC<PropsType> = (props): ReactElement => {\r\n    const {\r\n        title, onChangeHandler, resetToDefaultHandle,\r\n        probeBackgroundColor, defaultColor\r\n    } = props;\r\n    const {\r\n        classes, lang, classesSettings\r\n    } = useSettingsRow(probeBackgroundColor, defaultColor);\r\n\r\n    return (\r\n        <div className={classes.row}>\r\n            <Typography variant='subtitle1' className={classes.text}>\r\n                {title}\r\n            </Typography>\r\n            <ColorPicker className={classes.item}\r\n                         name='color'\r\n                         variant='outlined'\r\n                         size='small'\r\n                         defaultValue={translate(lang, 'Choose color')}\r\n                         onChange={onChangeHandler}\r\n            />\r\n\r\n            <div className={classesSettings.probe}/>\r\n\r\n            <Button variant='contained'\r\n                    onClick={resetToDefaultHandle}\r\n                    className={classes.button}>\r\n                {translate(lang, 'Reset to default')}\r\n            </Button>\r\n\r\n            <div className={classesSettings.default}/>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default SettingsRow;\r\n\r\n//====================== TYPE ===================\r\ntype PropsType = {\r\n    title: string\r\n    onChangeHandler: (color: string) => void\r\n    resetToDefaultHandle: () => void\r\n    probeBackgroundColor: string\r\n    defaultColor: string\r\n}\r\n\r\n//================== STYLE =========================\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        marginBottom: 15\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 10\r\n    },\r\n    text: {\r\n        marginRight: 15,\r\n        flexBasis: 200\r\n    },\r\n    item: {\r\n        marginRight: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 15\r\n    },\r\n\r\n});\r\n","export const defaultTheme = {\r\n    menuBackgroundColor: '#3f50b5',\r\n    displayBackgroundColor: '#e8eaf6',\r\n}","import React, {ReactElement} from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {settingsAC} from \"../../../redux/settings-reducer\";\r\nimport {getTheme} from \"../../../redux/settings-selectors\";\r\nimport SettingsRow from \"./SettingsRow\";\r\nimport {defaultTheme} from \"../../../const/const\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//===================== CUSTOM HOOK ===========================\r\nconst useSettings = () => {\r\n    const classes = useStyles();\r\n    const theme = useSelector(getTheme);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const onMenuBCChangeHandler = (color: string) => {\r\n        if (color) {\r\n            dispatch(settingsAC.setMenuBackgroundColor(color))\r\n        }\r\n    };\r\n    const onDisplayBCChangeHandler = (color: string) => {\r\n        if (color) {\r\n            dispatch(settingsAC.setDisplayBackgroundColor(color))\r\n        }\r\n    };\r\n    const resetMenuBCToDefaultHandle = () => {\r\n        dispatch(settingsAC.setMenuBackgroundColor(defaultTheme.menuBackgroundColor))\r\n    };\r\n    const resetDisplayBCToDefaultHandle = () => {\r\n        dispatch(settingsAC.setDisplayBackgroundColor(defaultTheme.displayBackgroundColor))\r\n    };\r\n    return {\r\n        classes, theme, lang, onMenuBCChangeHandler,\r\n        onDisplayBCChangeHandler, resetMenuBCToDefaultHandle,\r\n        resetDisplayBCToDefaultHandle\r\n    }\r\n};\r\n\r\n//====================== COMPONENT ============================\r\nconst Settings: React.FC = (): ReactElement => {\r\n    const {\r\n        classes, theme, lang, onMenuBCChangeHandler,\r\n        onDisplayBCChangeHandler, resetMenuBCToDefaultHandle,\r\n        resetDisplayBCToDefaultHandle\r\n    } = useSettings();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n\r\n            <Typography variant='h6' color='primary' align='center' className={classes.title}>\r\n                {translate(lang, 'Settings')}\r\n            </Typography>\r\n\r\n            <SettingsRow title={translate(lang, 'Menu background color')}\r\n                         onChangeHandler={onMenuBCChangeHandler}\r\n                         probeBackgroundColor={theme.menuBackgroundColor}\r\n                         defaultColor={defaultTheme.menuBackgroundColor}\r\n                         resetToDefaultHandle={resetMenuBCToDefaultHandle}\r\n            />\r\n\r\n            <SettingsRow title={translate(lang, 'Display background color')}\r\n                         onChangeHandler={onDisplayBCChangeHandler}\r\n                         probeBackgroundColor={theme.displayBackgroundColor}\r\n                         defaultColor={defaultTheme.displayBackgroundColor}\r\n                         resetToDefaultHandle={resetDisplayBCToDefaultHandle}\r\n            />\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default Settings;\r\n\r\n//================== STYLE =========================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n        paddingBottom: 400\r\n    },\r\n    title: {\r\n        marginBottom: 15\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 10\r\n    },\r\n    text: {\r\n        marginRight: 15,\r\n        flexBasis: 200\r\n    },\r\n    item: {\r\n        marginRight: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 15\r\n    },\r\n    default: {\r\n        backgroundColor: '#3f50b5',\r\n        width: 40,\r\n        height: 40,\r\n        borderRadius: 5,\r\n        marginRight: 15\r\n    }\r\n});","import React from \"react\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst usePageNotFound = () => {\r\n    const lang = useSelector(getLang);\r\n    const pageNotFoundLabel = translate(lang, 'Page not found')\r\n    return {pageNotFoundLabel}\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst PageNotFound: React.FC = () => {\r\n    const {pageNotFoundLabel} = usePageNotFound();\r\n\r\n    return (\r\n        <Typography align='center'\r\n                    color='secondary'\r\n                    variant='h6'>\r\n            {pageNotFoundLabel}\r\n        </Typography>\r\n    )\r\n\r\n};\r\n\r\nexport default PageNotFound;\r\n\r\n\r\n","import React, {ReactElement, Suspense} from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport CircularPreloader from \"../common/CircularPreloader\";\nimport Login from \"../Login/Login\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useSelector} from \"react-redux\";\nimport {getIsInitializedSelector} from \"../../redux/app-selectors\";\nimport Users from \"./Users/Users\";\nimport Friends from \"./Friends/Friends\";\nimport Settings from \"./Settings/Settings\";\nimport PageNotFound from \"../common/PageNotFound\";\n\nconst Dialogs = React.lazy(() => import('./Dialogs/Dialogs'));\nconst Profile = React.lazy(() => import('./Profile/Profile'));\n\n//======================== CUSTOM HOOK =========================\nconst useMain = () => {\n    const classes = useStyles();\n    const isInitialized = useSelector(getIsInitializedSelector);\n    return {classes, isInitialized}\n}\n\n\n//======================= COMPONENT ===============================\nconst Main: React.FC = (): ReactElement => {\n    const {classes, isInitialized} = useMain();\n\n    if (!isInitialized) {\n        return <CircularPreloader/>\n    }\n\n    return (\n        <main className={classes.main}>\n            <Suspense fallback={<CircularPreloader/>}>\n                <Switch>\n                    <Route exact path='/' render={() => <Profile/>}/>\n                    <Route path='/dialogs/:userId?' render={() => <Dialogs/>}/>\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route exact path='/users' render={() => <Users/>}/>\n                    <Route path='/users/:userId' render={() => <Profile/>}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/settings' render={() => <Settings/>}/>\n                    <Route path='*' render={() => <PageNotFound/>}/>\n                </Switch>\n            </Suspense>\n        </main>\n    );\n};\n\nexport default Main;\n\n//========================== STYLES ================================================\nconst useStyles = makeStyles({\n    main: {\n        flexGrow: 1,\n        padding: 10\n    }\n});\n","import React, {useEffect} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getMessageIsSending, getRecipientName} from \"./redux/dialogs-selectors\";\nimport {Snackbar} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {withRouter} from \"react-router-dom\";\nimport {getIsInitialized} from \"./redux/app-reducer\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport {getTheme} from \"./redux/settings-selectors\";\n\n//======================== CUSTOM HOOK =========================\nconst useApp = () => {\n    const classes = useStyles();\n    const messageIsSending = useSelector(getMessageIsSending);\n    const recipientName = useSelector(getRecipientName);\n    const [showAlert, setShowAlert] = React.useState(false);\n    const dispatch = useDispatch();\n    const catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(e);\n    };\n    useEffect(() => {\n        dispatch(getIsInitialized())\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors);\n        return () => {\n            window.removeEventListener('unhandledrejection', catchAllUnhandledErrors);\n        }\n    }, [dispatch]);\n    useEffect(() => {\n        if (!messageIsSending && recipientName) {\n            setShowAlert(true);\n        }\n    }, [messageIsSending, recipientName])\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setShowAlert(false);\n    };\n    const theme = useSelector(getTheme);\n    const useStylesSettings = makeStyles({\n        root: {\n            backgroundColor: theme.displayBackgroundColor,\n            position: 'relative'\n        }\n    });\n    const classesSettings = useStylesSettings();\n    return {\n        classes, recipientName, showAlert,\n        handleClose, classesSettings\n    }\n};\n\n//======================= COMPONENT ===============================\nconst App: React.FC = () => {\n    const {\n        classes, recipientName, showAlert,\n        handleClose, classesSettings\n    } = useApp();\n\n    return (\n        <div className={classesSettings.root}>\n            <Header/>\n            <div className={classes.wrapper}>\n                <Sidebar/>\n                <Main/>\n            </div>\n\n            <Snackbar open={showAlert}\n                      anchorOrigin={{vertical: 'bottom', horizontal: 'left'}}\n                      autoHideDuration={6000}\n                      onClose={handleClose}>\n                <Alert onClose={handleClose}\n                       variant='filled'\n                       severity=\"success\">\n                    <Typography component='span'>Message to </Typography>\n                    <Typography component='span' color='primary'>{recipientName}</Typography>\n                    <Typography component='span'> is sent!</Typography>\n                </Alert>\n            </Snackbar>\n\n        </div>\n    );\n};\n\nexport default withRouter(App);\n\n//============================= STYLE ==========================\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: indigo[50],\n        position: 'relative'\n    },\n    wrapper: {\n        maxWidth: 1000,\n        width: '100%',\n        margin: '0 auto',\n        display: 'flex',\n        boxSizing: 'border-box',\n        paddingTop: 64,\n        minHeight: '100vh',\n    },\n\n});\n\n","import * as React from 'react';\r\nimport {ErrorInfo} from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component<PropsType, StateType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            errorInfo: null\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong</h2>\r\n                    <details style={{whiteSpace: 'pre-wrap'}}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                    </details>\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n//==================== TYPES ========================\r\ntype PropsType = {\r\n\r\n};\r\ntype StateType = {\r\n    error: null | Error\r\n    errorInfo: null | ErrorInfo\r\n}","import {Provider} from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport App from \"./App\";\r\nimport ErrorBoundary from \"./Components/common/ErrorBoundary\";\r\n\r\nconst AppGlobal = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <ErrorBoundary>\r\n                <App/>\r\n            </ErrorBoundary>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default AppGlobal;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppGlobal from \"./AppContainer\";\n\nReactDOM.render(\n    <AppGlobal/>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n\n","import {GetActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    currentSidebarItem: null as null | number // текущий элемент главного бокового меню\r\n}\r\n\r\ntype initialStateType = typeof initialState;\r\nexport type SidebarActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: SidebarActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM': {\r\n            return {...state, currentSidebarItem: action.currentSidebarItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const sidebarAC = {\r\n    setCurrentSidebarItem: (currentSidebarItem: null | number) => ({type: 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM', currentSidebarItem} as const)\r\n};\r\n\r\nexport default sidebarReducer;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getId = (state: StateType) => state.auth.id;\r\nexport const getEmail = (state: StateType) => state.auth.email;\r\nexport const getLogin = (state: StateType) => state.auth.login;\r\nexport const getIsAuth = (state: StateType) => state.auth.isAuth;\r\nexport const getCaptchaSelector = (state: StateType) => state.auth.captcha;\r\n","import {instance, ResultCodesEnum} from \"./api\";\r\nimport {PhotosType} from \"../types/types\";\r\n\r\nexport const dialogsAPI = {\r\n    // получить массив пользователей с кем ведется диалог\r\n    async getDialogs() {\r\n        let response = await instance.get<Array<DialogType>>(`dialogs`);\r\n        return response.data;\r\n    },\r\n\r\n    // ???\r\n    async startDialog(userId: number) {\r\n        let response = await instance.put<SendMessageType>(`dialogs/${userId}`);\r\n        return response.data;\r\n    },\r\n\r\n    // получить массив сообщений из диалога с определенный пользователем\r\n    async getMessages(userId: number) {\r\n        let response = await instance.get<GetMessagesType>(`dialogs/${userId}/messages`)\r\n        return response.data;\r\n    },\r\n\r\n    // послать сообщение пользователю\r\n    async sendMessage(userId: number, message: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/${userId}/messages`,{body: message})\r\n        return response.data;\r\n    },\r\n\r\n    // проверить просмотрено ли мое сообщение\r\n    async getIsMessageViewed(messageId: string) {\r\n        let response = await instance.get<boolean>(`dialogs/messages/${messageId}/viewed`)\r\n        return response.data;\r\n    },\r\n\r\n    // отметить сообщение как спам\r\n    async signMessageAsSpam(messageId: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/messages/${messageId}/spam`)\r\n        console.log(response)\r\n        return response.data;\r\n    },\r\n\r\n    // удалить сообщение (только для меня, не для собеседника)\r\n    async deleteMessage(messageId: string) {\r\n        let response = await instance.delete<SendMessageType>(`dialogs/messages/${messageId}`)\r\n        return response.data;\r\n    },\r\n\r\n    // восстановить удаленное или помеченное как спам сообщение\r\n    async restoreMessage(messageId: string) {\r\n        let response = await instance.put<SendMessageType>(`dialogs/messages/${messageId}/restore`)\r\n        return response.data;\r\n    },\r\n\r\n};\r\n\r\n//================================= TYPE =======================================\r\ntype SendMessageType = {\r\n    data: {message: MessageType}\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: ResultCodesEnum\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    body: string\r\n    translatedBody: any\r\n    addedAt: string\r\n    senderId: number\r\n    senderName: string\r\n    recipientId: number\r\n    recipientName: string\r\n    viewed: boolean\r\n    deletedBySender: boolean // только для post\r\n    deletedByRecipient: boolean  //только для post\r\n    isSpam: boolean  //только для post\r\n    distributionId: any  //только для post\r\n}\r\n\r\ntype GetMessagesType = {\r\n    items: Array<MessageType>\r\n    totalCount: number\r\n    error: any\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    userName: string\r\n    hasNewMessages: boolean\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: PhotosType\r\n}\r\n\r\n","import {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {dialogsAPI, DialogType, MessageType} from \"../DAL/dialogs-api\";\r\nimport {DialogsSidebarItemEnum, DeletedMessagesType} from \"../types/types\";\r\nimport {ResultCodesEnum} from \"../DAL/api\";\r\n\r\nlet initialState = {\r\n    dialogs: null as null | Array<DialogType>, // массив диалогов\r\n    messages: null as null | Array<MessageType>, // сообщения из текущего диалога\r\n    selectedMessages: [] as Array<MessageType>, // массив выделенных сообщений\r\n    selectedDeletedMessages: [] as Array<MessageType>, // массив выделенных удаленных сообщений\r\n    selectedSpamMessages: [] as Array<MessageType>, // массив выделенных spam сообщений\r\n    dialogsIsLoading: false, // диалоги загружаются\r\n    messagesIsLoading: false, // сообщения загружаются?\r\n    messagesIsDeleting: false, // сообщения удаляются (или отправляются в спам)?\r\n    messageIsSending: false, // используется для всплывающего сообщения об отправке сообщения\r\n    recipientName: null as null | string, // имя получателя, используется для всплывающего сообщения об отправке сообщения\r\n    currentDialogsSidebarItem: 0 as DialogsSidebarItemEnum, // текущий элмемент бокового меню\r\n    deletedMessages: [] as DeletedMessagesType, // массив удаленных диалогов [{dialog: DialogType, messages: Array<MessageType>}, ...]\r\n    spamMessages: [] as DeletedMessagesType, // массив диалогов отмеченных как spam [{dialog: DialogType, messages: Array<MessageType>}, ...]\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype DialogsActionsType = GetActionsType<typeof dialogsAC>\r\ntype ThunkType = BaseThunkType<DialogsActionsType | AppActionsType>\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'dialogs/REMOVE_FROM_DELETED_MESSAGES': {\r\n            let deletedMessages = [...state.deletedMessages];\r\n            for (let i = 0; i < action.messages.length; i++) {\r\n                for (let j = 0; j < deletedMessages.length; j++) {\r\n                    deletedMessages[j].messages = deletedMessages[j].messages.filter(el => el.id !== action.messages[i].id)\r\n                }\r\n            }\r\n            deletedMessages = deletedMessages.filter(el => el.messages.length);\r\n\r\n            return {...state, deletedMessages: deletedMessages}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_SPAM_MESSAGES': {\r\n            let spamMessages = [...state.spamMessages];\r\n            for (let i = 0; i < action.messages.length; i++) {\r\n                for (let j = 0; j < spamMessages.length; j++) {\r\n                    spamMessages[j].messages = spamMessages[j].messages.filter(el => el.id !== action.messages[i].id)\r\n                }\r\n            }\r\n            spamMessages = spamMessages.filter(el => el.messages.length);\r\n\r\n            return {...state, spamMessages: spamMessages}\r\n        }\r\n        case 'dialogs/ADD_TO_DELETED_MESSAGES': {\r\n            const index = state.deletedMessages.findIndex(el => el.dialog.id === action.dialog.id)\r\n            if (index === -1) { // если удаленных сообщений из этого диалога еще нет\r\n                return {\r\n                    ...state,\r\n                    deletedMessages: [...state.deletedMessages, {dialog: action.dialog, messages: [action.message]}]\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    deletedMessages: state.deletedMessages.map((el, i) => {\r\n                        if (i !== index) {\r\n                            return el\r\n                        } else {\r\n                            return {dialog: el.dialog, messages: [...el.messages, action.message]}\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        case 'dialogs/ADD_TO_SPAM_MESSAGES': {\r\n            const index = state.spamMessages.findIndex(el => el.dialog.id === action.dialog.id)\r\n            if (index === -1) { // если удаленных сообщений из этого диалога еще нет\r\n                return {\r\n                    ...state,\r\n                    spamMessages: [...state.spamMessages, {dialog: action.dialog, messages: [action.message]}]\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    spamMessages: state.spamMessages.map((el, i) => {\r\n                        if (i !== index) {\r\n                            return el\r\n                        } else {\r\n                            return {dialog: el.dialog, messages: [...el.messages, action.message]}\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        case 'dialogs/SET_CURRENT_DIALOGS_SIDEBAR_ITEM': {\r\n            return {...state, currentDialogsSidebarItem: action.currentDialogsSidebarItem}\r\n        }\r\n        case 'dialogs/SET_MESSAGES_IS_DELETING': {\r\n\r\n            return {...state, messagesIsDeleting: action.messagesIsDeleting}\r\n        }\r\n        case 'dialogs/SET_MESSAGES_IS_LOADING': {\r\n            return {...state, messagesIsLoading: action.messagesIsLoading}\r\n        }\r\n        case 'dialogs/SET_RECIPIENT_NAME': {\r\n            return {...state, recipientName: action.recipientName}\r\n        }\r\n        case 'dialogs/SET_MESSAGE_IS_SENDING': {\r\n            return {...state, messageIsSending: action.messageIsSending}\r\n        }\r\n        case 'dialogs/TOGGLE_DIALOGS_IS_LOADING': {\r\n            return {...state, dialogsIsLoading: action.dialogsIsLoading}\r\n        }\r\n        case 'dialogs/CLEAN_SELECTED_MESSAGES': {\r\n            return {...state, selectedMessages: []}\r\n        }\r\n        case 'dialogs/CLEAN_DELETED_SELECTED_MESSAGES': {\r\n            return {...state, selectedDeletedMessages: []}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_SELECTED_MASSAGES': {\r\n            return {...state, selectedMessages: state.selectedMessages.filter(el => el.id !== action.message.id)}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_DELETED_SELECTED_MASSAGES': {\r\n            return {\r\n                ...state,\r\n                selectedDeletedMessages: state.selectedDeletedMessages.filter(el => el.id !== action.message.id)\r\n            }\r\n        }\r\n        case 'dialogs/ADD_TO_SELECTED_MASSAGES': {\r\n            return {...state, selectedMessages: [...state.selectedMessages, action.message]}\r\n        }\r\n        case 'dialogs/ADD_TO_DELETED_SELECTED_MASSAGES': {\r\n            return {...state, selectedDeletedMessages: [...state.selectedDeletedMessages, action.message]}\r\n        }\r\n        case 'dialogs/SET_MESSAGES': {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case 'dialogs/SET_DIALOGS': {\r\n            return {...state, dialogs: action.dialogs}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const dialogsAC = {\r\n    removeFromDeletedMessages: (messages: Array<MessageType>) => ({\r\n        type: 'dialogs/REMOVE_FROM_DELETED_MESSAGES',\r\n        messages\r\n    } as const),\r\n    removeFromSpamMessages: (messages: Array<MessageType>) => ({\r\n        type: 'dialogs/REMOVE_FROM_SPAM_MESSAGES',\r\n        messages\r\n    } as const),\r\n    addToDeletedMessages: (dialog: DialogType, message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_DELETED_MESSAGES',\r\n        dialog,\r\n        message\r\n    } as const),\r\n    addToSpamMessages: (dialog: DialogType, message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_SPAM_MESSAGES',\r\n        dialog,\r\n        message\r\n    } as const),\r\n    setCurrentDialogsSidebarItem: (currentDialogsSidebarItem: number) => ({\r\n        type: 'dialogs/SET_CURRENT_DIALOGS_SIDEBAR_ITEM',\r\n        currentDialogsSidebarItem\r\n    } as const),\r\n    setMessagesIsDeleting: (messagesIsDeleting: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGES_IS_DELETING',\r\n        messagesIsDeleting\r\n    } as const),\r\n    setMessagesIsLoading: (messagesIsLoading: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGES_IS_LOADING',\r\n        messagesIsLoading\r\n    } as const),\r\n    setRecipientName: (recipientName: null | string) => ({type: 'dialogs/SET_RECIPIENT_NAME', recipientName} as const),\r\n    setMessageIsSending: (messageIsSending: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGE_IS_SENDING',\r\n        messageIsSending\r\n    } as const),\r\n    toggleDialogsIsLoading: (dialogsIsLoading: boolean) => ({\r\n        type: 'dialogs/TOGGLE_DIALOGS_IS_LOADING',\r\n        dialogsIsLoading\r\n    } as const),\r\n    cleanSelectedMessages: () => ({type: 'dialogs/CLEAN_SELECTED_MESSAGES'} as const),\r\n    cleanSelectedDeletedMessages: () => ({type: 'dialogs/CLEAN_DELETED_SELECTED_MESSAGES'} as const),\r\n    addToSelectedMessages: (message: MessageType) => ({type: 'dialogs/ADD_TO_SELECTED_MASSAGES', message} as const),\r\n    addToSelectedDeletedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_DELETED_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    removeFromSelectedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/REMOVE_FROM_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    removeFromSelectedDeletedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/REMOVE_FROM_DELETED_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    setMessages: (messages: Array<MessageType> | null) => ({type: 'dialogs/SET_MESSAGES', messages} as const),\r\n    setDialogs: (dialogs: Array<DialogType>) => ({type: 'dialogs/SET_DIALOGS', dialogs} as const),\r\n};\r\n\r\n// получить массив пользователей с кем ведется диалог\r\nexport const getDialogs = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.toggleDialogsIsLoading(true));\r\n        let data = await dialogsAPI.getDialogs();\r\n        dispatch(dialogsAC.setDialogs(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.toggleDialogsIsLoading(false));\r\n    }\r\n};\r\n\r\n// ???\r\n// export const startDialog = (userId: number): ThunkType => async (dispatch) => {\r\n//     try {\r\n//         //dispatch(appAC.toggleLoading(true));\r\n//         let data = await dialogsAPI.startDialog(userId);\r\n//         //console.log(data)\r\n//         //dispatch(usersAC.setUsers(data.items));\r\n//         //dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n//     } catch (e) {\r\n//         //dispatch(appAC.setLanError(true));\r\n//     } finally {\r\n//         //dispatch(appAC.toggleLoading(false));\r\n//     }\r\n// };\r\n\r\n// послать сообщение пользователю\r\nexport const sendMessage = (userId: number, message: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessageIsSending(true)); // сообщение отправляется\r\n        const dataSend = await dialogsAPI.sendMessage(userId, message);// post-запрос на сервер\r\n        if (dataSend.resultCode === ResultCodesEnum.Success) { // если запрос удачный\r\n            dispatch(dialogsAC.setRecipientName(dataSend.data.message.recipientName)); // установить имя адресата сообщения\r\n            const data = await dialogsAPI.getMessages(userId);// обновить список сообщений\r\n            if (data.error === null) {\r\n                dispatch(dialogsAC.setMessages(data.items));\r\n            }\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessageIsSending(false));\r\n    }\r\n};\r\n\r\n// получить массив сообщений из диалога с определенный пользователем\r\nexport const getMessages = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessagesIsLoading(true));\r\n        const data = await dialogsAPI.getMessages(userId);\r\n        if (data.error === null) {\r\n            dispatch(dialogsAC.setMessages(data.items));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessagesIsLoading(false));\r\n    }\r\n};\r\n\r\n// определить, просмотрено ли сообщение\r\n// export const getIsMessageViewed = (messageId: string): ThunkType => async (dispatch) => {\r\n//     try {\r\n//         //dispatch(profileAC.toggleStatusLoading(true));\r\n//         const data = await dialogsAPI.getIsMessageViewed(messageId);\r\n//         //console.log(data)\r\n//         // if (data.resultCode === 0) {\r\n//         //     dispatch(profileAC.setStatus(status));\r\n//         // }\r\n//     } catch (e) {\r\n//         //dispatch(appAC.setLanError(true));\r\n//     } finally {\r\n//         //dispatch(profileAC.toggleStatusLoading(false));\r\n//     }\r\n// };\r\n\r\n// отметить сообщения как спам (при этом удаляется?)\r\nexport const signMessageAsSpam = (messages: Array<MessageType>, dialog: DialogType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(true));\r\n\r\n        const arrayOfRequests = messages\r\n            .map(el => dialogsAPI.signMessageAsSpam(el.id));\r\n        const results = await Promise.all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;// определение успеха массива промисов\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (resultCodeFinally === ResultCodesEnum.Success) {\r\n            const data = await dialogsAPI.getMessages(dialog.id);// обновление массива сообщений (запрос)\r\n            if (data.error === null) {\r\n                dispatch(dialogsAC.setMessages(data.items));// обновление массива сообщений (запись в стор)\r\n                for (let i = 0; i < messages.length; i++) {// добавление сообщений в массив удаленных\r\n                    dispatch(dialogsAC.addToSpamMessages(dialog, messages[i]))\r\n                }\r\n                dispatch(dialogsAC.cleanSelectedMessages()); // очистка массива ид выделенных сообщений\r\n            }\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(false));\r\n    }\r\n};\r\n\r\n// удаление сообщений\r\nexport const deleteMessages = (messages: Array<MessageType>, dialog: DialogType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(true));\r\n\r\n        const arrayOfRequests = messages\r\n            .map(el => dialogsAPI.deleteMessage(el.id));\r\n        const results = await Promise.all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;// определение успеха массива промисов\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (resultCodeFinally === ResultCodesEnum.Success) {\r\n            const data = await dialogsAPI.getMessages(dialog.id);// обновление массива сообщений\r\n            if (data.error === null) {\r\n                dispatch(dialogsAC.setMessages(data.items));\r\n                for (let i = 0; i < messages.length; i++) {// добавление сообщений в массив удаленных\r\n                    dispatch(dialogsAC.addToDeletedMessages(dialog, messages[i]))\r\n                }\r\n                dispatch(dialogsAC.cleanSelectedMessages()); // очистка массива ид выделенных сообщений\r\n            }\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(false));\r\n    }\r\n};\r\n\r\n// восстановить удаленное или помеченное как спам сообщение\r\nexport const restoreMessages = (messages: Array<MessageType>): ThunkType => async (dispatch) => {\r\n    try {\r\n        const arrayOfRequests = messages\r\n            .map(el => dialogsAPI.restoreMessage(el.id));\r\n        const results = await Promise.all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (resultCodeFinally === ResultCodesEnum.Success) {\r\n            // очистка массива выделенных удаленных сообщений\r\n            dispatch(dialogsAC.cleanSelectedDeletedMessages())\r\n            // удалить сообщения из массива удаленнных диалогов\r\n            dispatch(dialogsAC.removeFromDeletedMessages(messages));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n    }\r\n};\r\n\r\n\r\nexport default dialogsReducer;","import {LangType} from \"../types/types\";\r\n\r\nexport const Lang: LangObjectType = {\r\n    'English': {\r\n        'eng': 'English',\r\n        'rus': 'Русский'\r\n    },\r\n    'Change language': {\r\n        'eng': 'Change language',\r\n        'rus': 'Сменить язык'\r\n    },\r\n    'Logout': {\r\n        'eng': 'Logout',\r\n        'rus': 'Выйти'\r\n    },\r\n    'Settings': {\r\n        'eng': 'Settings',\r\n        'rus': 'Настройки'\r\n    },\r\n    'Social Network': {\r\n        'eng': 'Social Network',\r\n        'rus': 'Социальная сеть'\r\n    },\r\n    'Login': {\r\n        'eng': 'Login',\r\n        'rus': 'Войти'\r\n    },\r\n    'Search...': {\r\n        'eng': 'Search...',\r\n        'rus': 'Найти...'\r\n    },\r\n    'email': {\r\n        'eng': 'Email',\r\n        'rus': 'Электронная почта'\r\n    },\r\n    'password': {\r\n        'eng': 'Password',\r\n        'rus': 'Пароль'\r\n    },\r\n    'Remember me': {\r\n        'eng': 'Remember me',\r\n        'rus': 'Запомнить меня'\r\n    },\r\n    'Enter in your profile': {\r\n        'eng': 'Enter in your profile',\r\n        'rus': 'Войдите в свой профиль'\r\n    },\r\n    'Captcha': {\r\n        'eng': 'Captcha',\r\n        'rus': 'Каптча'\r\n    },\r\n    'Enter symbols from image': {\r\n        'eng': 'Enter symbols from image',\r\n        'rus': 'Введите символы с картинки'\r\n    },\r\n    'My profile': {\r\n        'eng': 'My profile',\r\n        'rus': 'Профиль'\r\n    },\r\n    'Dialogs': {\r\n        'eng': 'Dialogs',\r\n        'rus': 'Диалоги'\r\n    },\r\n    'Users': {\r\n        'eng': 'Users',\r\n        'rus': 'Пользователи'\r\n    },\r\n    'Friends': {\r\n        'eng': 'Friends',\r\n        'rus': 'Друзья'\r\n    },\r\n    'Unfollow': {\r\n        'eng': 'Unfollow',\r\n        'rus': 'Из друзей'\r\n    },\r\n    'Follow': {\r\n        'eng': 'Follow',\r\n        'rus': 'В друзья'\r\n    },\r\n    'Delete avatar': {\r\n        'eng': 'Delete avatar',\r\n        'rus': 'Удалить аватар'\r\n    },\r\n    'Change avatar': {\r\n        'eng': 'Change avatar',\r\n        'rus': 'Сменить аватар'\r\n    },\r\n    'Edit profile': {\r\n        'eng': 'Edit profile',\r\n        'rus': 'Изменить профиль'\r\n    },\r\n    'Hide detailed information': {\r\n        'eng': 'Hide detailed information',\r\n        'rus': 'Скрыть подробную информацию'\r\n    },\r\n    'Show detailed information': {\r\n        'eng': 'Show detailed information',\r\n        'rus': 'Показать подробную информацию'\r\n    },\r\n    'Yes': {\r\n        'eng': 'Yes',\r\n        'rus': 'Да'\r\n    },\r\n    'No': {\r\n        'eng': 'No',\r\n        'rus': 'Нет'\r\n    },\r\n    'About job': {\r\n        'eng': 'About job',\r\n        'rus': 'О работе'\r\n    },\r\n    'Looking for a job': {\r\n        'eng': 'Looking for a job',\r\n        'rus': 'Ищет работу'\r\n    },\r\n    'My professional skills': {\r\n        'eng': 'Professional skills',\r\n        'rus': 'Профессиональные навывки'\r\n    },\r\n    'Contacts': {\r\n        'eng': 'Contacts',\r\n        'rus': 'Контакты'\r\n    },\r\n    'Main': {\r\n        'eng': 'Main',\r\n        'rus': 'Главное'\r\n    },\r\n    'Job': {\r\n        'eng': 'Job',\r\n        'rus': 'Работа'\r\n    },\r\n    'Save': {\r\n        'eng': 'Save',\r\n        'rus': 'Сохранить'\r\n    },\r\n    'Name': {\r\n        'eng': 'Name',\r\n        'rus': 'Имя'\r\n    },\r\n    'Save status': {\r\n        'eng': 'Save status',\r\n        'rus': 'Сохранить статус'\r\n    },\r\n    'Enter your post': {\r\n        'eng': 'Enter your post',\r\n        'rus': 'Введите текст поста'\r\n    },\r\n    'Add post': {\r\n        'eng': 'Add post',\r\n        'rus': 'Добавить пост'\r\n    },\r\n    'Delete post': {\r\n        'eng': 'Delete post',\r\n        'rus': 'Удалить пост'\r\n    },\r\n    'Something else': {\r\n        'eng': 'Something else',\r\n        'rus': 'Что-то еще'\r\n    },\r\n    'There ara no deleted messages': {\r\n        'eng': 'There ara no deleted messages',\r\n        'rus': 'Удаленных сообщений нет'\r\n    },\r\n    'Enter your message': {\r\n        'eng': 'Enter your message',\r\n        'rus': 'Введите тект сообщения'\r\n    },\r\n    'Message is sent...': {\r\n        'eng': 'Message is sent...',\r\n        'rus': 'Сообщение отправляется...'\r\n    },\r\n    'Select a dialog': {\r\n        'eng': 'Select a dialog',\r\n        'rus': 'Выберите диалог'\r\n    },\r\n    'messages': {\r\n        'eng': 'messages',\r\n        'rus': 'сообщение'\r\n    },\r\n    'Delete': {\r\n        'eng': 'Delete',\r\n        'rus': 'Удалить'\r\n    },\r\n    \"Restore\": {\r\n        'eng': \"Restore\",\r\n        'rus': 'Восстановить'\r\n    },\r\n    \"Select deleted dialog\": {\r\n        'eng': \"Select deleted dialog\",\r\n        'rus': 'Выберите удаленный диалог'\r\n    },\r\n    \"There are no deleted dialogs\": {\r\n        'eng': \"There are no deleted dialogs\",\r\n        'rus': 'Удаленных диалогов нет'\r\n    },\r\n    \"All\": {\r\n        'eng': \"All\",\r\n        'rus': 'Все'\r\n    },\r\n    \"Deleted\": {\r\n        'eng': \"Deleted\",\r\n        'rus': 'Удаленные'\r\n    },\r\n    \"Remove from friends\": {\r\n        'eng': \"Remove from friends\",\r\n        'rus': 'Удалить из друзей'\r\n    },\r\n    \"Send message\": {\r\n        'eng': \"Send message\",\r\n        'rus': 'Написать'\r\n    },\r\n    \"Name of the friend\": {\r\n        'eng': \"Name of the friend\",\r\n        'rus': 'Имя друга'\r\n    },\r\n    \"Menu background color\": {\r\n        'eng': \"Menu background color\",\r\n        'rus': 'Цвет заднего фона меню'\r\n    },\r\n    \"Display background color\": {\r\n        'eng': \"Display background color\",\r\n        'rus': 'Цвет заднего фона контента'\r\n    },\r\n    \"Reset to default\": {\r\n        'eng': \"Reset to default\",\r\n        'rus': 'Сброс'\r\n    },\r\n    \"in\": {\r\n        'eng': \"in\",\r\n        'rus': 'в'\r\n    },\r\n    'Choose color': {\r\n        'eng': \"Choose color\",\r\n        'rus': 'Выберите цвет'\r\n    },\r\n    'Field should not be empty': {\r\n        'eng': \"Field should not be empty\",\r\n        'rus': 'Пробельные символы недопустимы'\r\n    },\r\n    'Number of letters is more than': {\r\n        'eng': \"Number of letters is more than\",\r\n        'rus': 'Число символов больше, чем'\r\n    },\r\n    'Field is required': {\r\n        'eng': \"Field is required\",\r\n        'rus': 'Необходимо заполнить'\r\n    },\r\n    'Total all users count:': {\r\n        'eng': 'Total all users count:',\r\n        'rus': 'Количество всех пользователей:'\r\n    },\r\n    'Total users count from search:': {\r\n        'eng': 'Total users count from search:',\r\n        'rus': 'Количество найденных пользователей:'\r\n    },\r\n    'Close search': {\r\n        'eng': 'Close search',\r\n        'rus': 'Закрыть поиск'\r\n    },\r\n    'Open search': {\r\n        'eng': 'Open search',\r\n        'rus': 'Открыть поиск'\r\n    },\r\n    'Show all': {\r\n        'eng': 'Show all',\r\n        'rus': 'Показать всех'\r\n    },\r\n    'User are friend or not': {\r\n        'eng': 'User are friend or not',\r\n        'rus': 'Друг или нет'\r\n    },\r\n    'Friend': {\r\n        'eng': 'Friend',\r\n        'rus': 'Друг'\r\n    },\r\n    'Not friend': {\r\n        'eng': 'Not friend',\r\n        'rus': 'Не друг'\r\n    },\r\n    'Search': {\r\n        'eng': 'Search',\r\n        'rus': 'Поиск'\r\n    },\r\n    'Page not found': {\r\n        'eng': 'Page not found',\r\n        'rus': 'Страницы не существует'\r\n    },\r\n    'New message': {\r\n        'eng': 'New message',\r\n        'rus': 'Новое сообщение'\r\n    },\r\n    'Go to dialog with': {\r\n        'eng': 'Go to dialog with',\r\n        'rus': 'Перейти к диалогу с'\r\n    },\r\n};\r\n\r\n// const lang = useSelector(getLang);\r\n// {translate(lang, '')}\r\n\r\nexport const translate = (lang: LangType, phrase: string): string => {\r\n    return lang === 'rus' ? Lang[phrase].rus : Lang[phrase].eng\r\n};\r\n\r\ntype LangObjectType = {\r\n    [key: string]: {\r\n        'eng': string\r\n        'rus': string\r\n    }\r\n}\r\n\r\n","import {instance, ResponseTypeAPI, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype AuthResponseType = ResponseTypeAPI<AuthResponseDataType>\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LoginResponseType = ResponseTypeAPI<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>\r\n\r\nexport const authAPI = {\r\n    async auth() {\r\n        let response = await instance.get<AuthResponseType>(`auth/me`)\r\n        return response.data;\r\n    },\r\n    async login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        let response = await instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n        return response.data;\r\n    },\r\n    async logout() {\r\n        let response = await instance.delete(`auth/login`)\r\n        return response.data;\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    async getCaptcha() {\r\n        let response = await instance.get<getCaptchaResponseType>(`security/get-captcha-url`);\r\n        return response.data;\r\n    }\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../DAL/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {authAPI} from \"../DAL/auth-api\";\r\nimport {securityAPI} from \"../DAL/security-api\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {sidebarAC, SidebarActionsType} from \"./sidebar-reducer\";\r\nimport {SidebarItemEnum} from \"../types/types\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as null | string\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype AuthActionsType = GetActionsType<typeof authAC>\r\ntype ThunkType = BaseThunkType<AuthActionsType | FormAction | AppActionsType | SidebarActionsType>\r\n\r\nconst authReducer = (state = initialState, action: AuthActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_AUTH_USER_DATA': {\r\n            return {...state, ...action.data,}\r\n        }\r\n        case 'AUTH/SET_CAPTCHA':\r\n            return {...state, captcha: action.captcha}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const authAC = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH/SET_AUTH_USER_DATA',\r\n        data: {id, email, login, isAuth}\r\n    } as const),\r\n    setCaptchaUrl: (captcha: string) => ({type: 'AUTH/SET_CAPTCHA', captcha} as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.auth();\r\n        //если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            let {id, login, email} = data.data;\r\n            dispatch(authAC.setAuthUserData(id, email, login, true));\r\n        }\r\n        dispatch(appAC.toggleLoading(false));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.login(email, password, rememberMe, captcha);\r\n        // если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n            dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.myProfile))\r\n        } else { // неправильный логин и(или) пароль\r\n            if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) { // необходима каптча\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await securityAPI.getCaptcha();\r\n        dispatch(authAC.setCaptchaUrl(data.url));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.logout();\r\n        // если вылогинись\r\n        if (data.resultCode === 0) {\r\n            dispatch(authAC.setAuthUserData(null, null, null, false));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getDialogsSelector = (state: StateType) => state.dialogs.dialogs;\r\nexport const getMessagesSelector = (state: StateType) => state.dialogs.messages;\r\nexport const getSelectedMessages = (state: StateType) => state.dialogs.selectedMessages;\r\nexport const getSelectedDeletedMessages = (state: StateType) => state.dialogs.selectedDeletedMessages;\r\nexport const getDialogsIsLoading = (state: StateType) => state.dialogs.dialogsIsLoading;\r\nexport const getMessageIsSending = (state: StateType) => state.dialogs.messageIsSending;\r\nexport const getRecipientName = (state: StateType) => state.dialogs.recipientName;\r\nexport const getMessagesIsLoading = (state: StateType) => state.dialogs.messagesIsLoading;\r\nexport const getMessagesIsDeleting = (state: StateType) => state.dialogs.messagesIsDeleting;\r\nexport const getCurrentDialogsSidebarItem = (state: StateType) => state.dialogs.currentDialogsSidebarItem;\r\nexport const getLoading = (state: StateType) => state.dialogs.messageIsSending ||\r\n    state.dialogs.messagesIsLoading ||\r\n    state.dialogs.messagesIsDeleting;\r\nexport const getDeletedMessages = (state: StateType) => state.dialogs.deletedMessages;\r\nexport const getSpamMessages = (state: StateType) => state.dialogs.spamMessages;\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}