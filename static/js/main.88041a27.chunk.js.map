{"version":3,"sources":["hoc/withAuthRedirect.tsx","Components/common/SendMessageForm.tsx","redux/app-reducer.ts","redux/app-selectors.ts","utilities/date.ts","utilities/objects-helpers.js","DAL/users-api.ts","redux/users-reduser.ts","DAL/api.ts","redux/profile-selectors.ts","redux/users-selectors.ts","Components/common/RenderTextareaField.tsx","Components/common/RenderNakedTextareaField.tsx","Components/common/RenderCheckbox.tsx","utilities/validators/validators.ts","serviceWorker.js","redux/settings-reducer.ts","redux/redux-store.ts","Components/Header/HeaderSearch.tsx","redux/settings-selectors.ts","Components/Header/Header.tsx","redux/sidebar-selectors.ts","Components/Sidebar/SidebarItem.tsx","Components/Sidebar/Sidebar.tsx","Components/common/RenderPasswordField.tsx","Components/Login/Login.tsx","Components/common/Paginator.tsx","Components/common/RenderRadioButton.tsx","Components/Main/Users/SearchUsers.tsx","Components/common/ViewSwitcher.tsx","Components/Main/Users/UserBlockItem.tsx","Components/Main/Users/UserListItem.tsx","Components/Main/Users/UsersList.tsx","Components/Main/Users/Users.tsx","Components/Main/Friends/FriendsListItem.tsx","Components/Main/Friends/FriendsSearch.tsx","Components/Main/Friends/FriendsList.tsx","Components/Main/Friends/FriendsSidebar.tsx","Components/Main/Friends/FriendsSomethingElse.tsx","Components/Main/Friends/Friends.tsx","Components/Main/Settings/SettingsRow.tsx","const/const.js","Components/Main/Settings/Settings.tsx","Components/Main/Main.tsx","App.tsx","AppContainer.tsx","index.js","Components/common/CircularPreloader.tsx","redux/sidebar-reducer.ts","DAL/dialogs-api.ts","redux/dialogs-reducer.ts","DAL/auth-api.ts","DAL/security-api.ts","redux/auth-reducer.ts","redux/dialogs-selectors.ts","Components/common/RenderTextField.tsx","redux/auth-selectors.ts","DAL/profile-api.ts","redux/profile-reducer.ts","types/types.ts"],"names":["mapStateToPropsRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","ReduxForm","reduxForm","form","handleSubmit","submitting","pristine","classes","useStyles","classesField","useStylesField","onSubmit","name","component","RenderTextAreaField","validate","shouldNotBeEmpty","autoFocus","className","textArea","label","placeholder","size","type","color","variant","startIcon","disabled","button","SendMessageForm","open","onClose","id","src","dialogs","dispatch","useDispatch","dialogIsExist","some","el","paper","dialog","titleWrapper","title","RouterLink","titleLink","titleIcon","onClick","content","friendInfo","avatar","formValue","sendMessage","message","makeStyles","width","display","alignItems","backgroundColor","indigo","padding","flexGrow","marginLeft","marginRight","paddingBottom","marginTop","root","initialState","isInitialized","globalError","isLoading","lanError","appAC","setIsInitialized","toggleLoading","setLanError","getIsInitialized","a","promise","getAuthUserData","Promise","all","then","e","appReducer","action","getIsInitializedSelector","app","getIsLoading","DATE","getCurrentDate","Date","getMonthWord","month","dateTranslateFromJS","date","getMonth","day","getDate","hours","getHours","minutes","getMinutes","monthWord","this","dateTranslateFromAPI","slice","hour","updateObjectInArray","items","itemId","objPropName","newObjProps","map","item","usersAPI","getUsers","currentPage","pageSize","instance","get","response","data","searchUsers","term","friend","url","friendUrl","followUser","post","unfollowUser","delete","users","pageFriendsSize","totalUsersCount","totalFriendsCount","currentFriendsPage","isFollowing","followingInProgress","friends","searchUsersParams","searchFriendsParams","isFriendsSearching","showUsersFrom","currentFriendsSidebarItem","needToChangeListOfFriends","friendIdToRemove","valueFromHeaderSearch","usersAC","setValueFromHeaderSearch","toggleIsFriendsSearching","setNeedToChangeListOfFriends","setCurrentFriendsSidebarItem","setFriends","setSearchFriendsParams","setSearchUsersParams","setFollow","userId","setUnfollow","setUsers","setCurrentPage","setCurrentFriendsPage","setTotalUsersCount","setTotalFriendsCount","toggleFollowing","toggleFollowingProgress","setShowUsersFrom","totalCount","console","log","searchFriends","removeAndUpdateFriends","resultCode","_followUnfollowFlow","apiMethod","actionCreator","getFollow","bind","getUnfollow","usersReducer","followed","filter","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","baseURL","withCredentials","headers","getPosts","profile","posts","getProfileSelector","getCurrentUserProfileSelector","currentUserProfile","getStatusSelector","status","getAvatarIsLoading","avatarIsLoading","getStatusIsLoading","statusIsLoading","getEditMode","editMode","getCurrentInfoFormSidebarItem","currentInfoFormSidebarItem","getFollowedSelector","getEditingPost","editingPost","getUsersSelector","getFriendsSelector","getPageSize","getCurrentPage","getCurrentFriendsPage","getFollowingInProgress","getTotalUsersCount","getTotalFriendsCount","getIsFollowing","getSearchUsersParams","getSearchFriendsParams","getShowUsersFrom","getCurrentFriendsSidebarItem","getNeedToChangeListOfFriends","getFriendIdToRemove","getIsFriendsSearching","getValueFromHeaderSearch","icon","input","meta","touched","invalid","error","custom","rows","styles","iconLeft","InputProps","multiline","helperText","position","left","top","transform","RenderNakedTextAreaField","RenderCheckbox","control","checked","value","onChange","required","undefined","maxLength","max","length","maxLength30","empty","str","test","Boolean","window","location","hostname","match","theme","menuBackgroundColor","displayBackgroundColor","settingsAC","settingsReducer","rootReducer","combineReducers","profileReducer","dialogsReducer","sidebar","sidebarReducer","authReducer","settings","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","onSubmitSuccess","result","reset","fieldWrapper","Field","field","HeaderSearch","history","useHistory","push","height","borderRadius","paddingRight","createStyles","transition","transitions","getTheme","Header","useSelector","getIsAuth","login","getLogin","getId","useEffect","getProfile","useState","setOpen","anchorRef","React","useRef","handleClose","event","current","contains","target","handleListKeyDown","key","preventDefault","prevOpen","focus","onSettingsClick","onLogoutClick","logout","classesSettings","wrapper","right","zIndex","useStylesSettings","Toolbar","toolBar","Typography","noWrap","logo","Button","ref","aria-controls","aria-haspopup","photos","small","Avatar","Popper","popper","anchorEl","role","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","ListItemIcon","ListItemText","primary","maxWidth","margin","boxSizing","minHeight","textTransform","paddingTop","boxShadow","getCurrentSidebarItem","currentSidebarItem","SidebarItem","ownIndex","ListItem","sidebarAC","setCurrentSidebarItem","profileAC","setEditMode","selected","clsx","iconSelected","text","minWidth","fontWeight","Sidebar","List","list","RenderPasswordField","showPassword","setShowPassword","password","setPassword","FormControl","textField","InputLabel","htmlFor","outlined","OutlinedInput","outlinedInputRoot","outlinedInputInput","endAdornment","InputAdornment","IconButton","aria-label","onMouseDown","edge","iconButton","labelWidth","paddingLeft","ReduxLoginForm","captcha","RenderTextField","alt","fullWidth","Login","getCaptchaSelector","Card","card","elevation","align","values","email","rememberMe","justifyContent","marginBottom","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","startPortionNumber","endPortionNumber","elements","p","buttonRoot","disableElevation","prevPortionLabelEnd","prevPortionLabel","nextPortionLabelEnd","nextPortionLabel","paginator","iconButtonRoot","border","RenderRadioButton","labels","rest","formControlLabelElements","FormControlLabel","formControlLabel","Radio","FormLabel","formLabel","RadioGroup","radioGroup","SearchUsersReduxForm","classesRadioButton","useStylesRadioButton","submit","SearchUsers","initialValues","h6","Divider","divider","flexDirection","ViewSwitcher","view","setView","ToggleButtonGroup","exclusive","newView","ToggleButton","fontSize","UserBlockItem","user","openSendMessageForm","setOpenSendMessageForm","buttonLabel","Grid","CardActionArea","CardContent","cardContent","CardActions","disableSpacing","cardActions","buttons","buttonWrapper","CircularPreloader","media","UserListItem","followLabel","listItem","Link","SidebarItemEnum","UsersList","usersBlockItems","usersListItems","allIsLoaded","skeletonBlockItems","Skeleton","skeletonBlockItem","skeletonListItems","skeletonListItem","container","alignContent","justify","wrap","spacing","disablePadding","getDialogsSelector","searchPanelIsOpen","setSearchPanelIsOpen","getDialogs","pageNumber","countTitle","Collapse","in","timeout","unmountOnExit","topPanel","Badge","badgeContent","showZero","paginatorTopWrapper","paginatorBottomWrapper","FriendsListItem","somethingElseHandle","callbacks","menuItemsElements","listItemInner","listItemInnerleft","large","FriendsSearch","search","FriendsList","FriendsListElements","titleleft","paginatorTop","paginatorBottom","FriendsSidebar","Tabs","indicator","orientation","newValue","tabs","Tab","tabRoot","labelIcon","borderLeft","FriendsSomethingElse","leftColumn","rightColumn","flexBasis","SettingsRow","onChangeHandler","resetToDefaultHandle","probeBackgroundColor","defaultColor","probe","default","row","defaultValue","defaultTheme","Dialogs","lazy","Profile","Main","main","fallback","exact","path","render","withRouter","messageIsSending","getMessageIsSending","recipientName","getRecipientName","showAlert","setShowAlert","catchAllUnhandledErrors","alert","addEventListener","removeEventListener","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","severity","AppGlobal","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","classesAbsolute","useStylesAbsolute","classesStaticCenter","useStylesStaticCenter","classesStaticTop","useStylesStaticTop","circularWrapper","circular","bottom","dialogsAPI","body","messageId","put","messages","selectedMessages","selectedDeletedMessages","selectedSpamMessages","dialogsIsLoading","messagesIsLoading","messagesIsDeleting","currentDialogsSidebarItem","deletedMessages","spamMessages","dialogsAC","removeFromDeletedMessages","removeFromSpamMessages","addToDeletedMessages","addToSpamMessages","setCurrentDialogsSidebarItem","setMessagesIsDeleting","setMessagesIsLoading","setRecipientName","setMessageIsSending","toggleDialogsIsLoading","cleanSelectedMessages","cleanSelectedDeletedMessages","addToSelectedMessages","addToSelectedDeletedMessages","removeFromSelectedMessages","removeFromSelectedDeletedMessages","setMessages","setDialogs","dataSend","Success","getMessages","signMessageAsSpam","arrayOfRequests","results","resultCodeFinally","Error","deleteMessages","restoreMessages","j","index","findIndex","authAPI","securityAPI","authAC","myProfile","CaptchaIsRequired","getCaptchaUrl","stopSubmit","_error","getMessagesSelector","getSelectedMessages","getSelectedDeletedMessages","getDialogsIsLoading","getMessagesIsLoading","getMessagesIsDeleting","getCurrentDialogsSidebarItem","getLoading","getDeletedMessages","getSpamMessages","profileAPI","photo","formData","FormData","append","likeCount","likeMe","time","toggleLikeMe","postId","setEditingPost","setCurrentUserProfile","setFollowed","setCurrentInfoFormSidebarItem","addPost","deletePost","setUserProfile","setStatus","setPhotos","toggleAvatarLoading","toggleStatusLoading","getCurrentUserProfile","getFollowed","getStatus","updateStatus","savePhoto","saveProfile","getState","errorFields","toLowerCase","reject","DialogsSidebarItemEnum","ProfileSidebarItemEnum"],"mappings":"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","file":"static/js/main.88041a27.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsRedirect = (state: StateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n       let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, StateType>(mapStateToPropsRedirect)(RedirectComponent);\r\n};","import React from \"react\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport RenderTextAreaField from \"./RenderTextareaField\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sendMessage} from \"../../redux/dialogs-reducer\";\r\nimport {DialogType} from \"../../DAL/dialogs-api\";\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine} = props;\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field name='message'\r\n                   component={RenderTextAreaField}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   autoFocus={true}\r\n                   className={classes.textArea}\r\n                   classes={classesField}\r\n                   label='Enter your message'\r\n                   placeholder='Enter your message'\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SendIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    Send message\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'send-message',\r\n})(Form);\r\n\r\n//================ COMPONENT =========================================\r\nconst SendMessageForm: React.FC<ComponentPropsType> = ({open, onClose, id, name, src, dialogs}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormCloseHandle = () => {\r\n        onClose(false);\r\n    };\r\n\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(sendMessage(id, formValue.message));\r\n        onClose(false);\r\n    };\r\n\r\n    const dialogIsExist = dialogs && dialogs.some(el => el.id === id);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dialogs &&\r\n                <Dialog open={open}\r\n                        classes={{\r\n                            paper: classes.paper\r\n                        }}\r\n                        className={classes.dialog}\r\n                >\r\n                    <div className={classes.titleWrapper}>\r\n                        <Typography className={classes.title}>\r\n                            New message\r\n                        </Typography>\r\n\r\n                        {\r\n                            dialogIsExist &&\r\n                            <Link component={RouterLink}\r\n                                  to={`/dialogs/${id}`}\r\n                                  variant='body2'\r\n                                  className={classes.titleLink}\r\n                            >\r\n                                Go to dialog with {name}\r\n                            </Link>\r\n                        }\r\n\r\n                        <IconButton className={classes.titleIcon}\r\n                                    onClick={onFormCloseHandle}\r\n                        >\r\n                            <HighlightOffIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n\r\n                    <DialogContent className={classes.content}>\r\n                        <div className={classes.friendInfo}>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={src}\r\n                            />\r\n                            <Link component={RouterLink}\r\n                                  to={`/users/${id}`}\r\n                                  variant='subtitle2'\r\n                                //onClick={onListItemClick}\r\n                            >\r\n                                {name}\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <ReduxForm onSubmit={onSubmit}/>\r\n\r\n                    </DialogContent>\r\n\r\n                </Dialog>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SendMessageForm;\r\n\r\n//=========================== TYPE =======================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    message: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {\r\n    open: boolean\r\n    onClose: (openForm: boolean) => void\r\n    id: number\r\n    name: string\r\n    src: string | undefined\r\n    dialogs: Array<DialogType> | null\r\n}\r\n//========================== STYLES ======================\r\nconst useStyles = makeStyles({\r\n    dialog: {\r\n        //width: 500\r\n    },\r\n    paper: {\r\n        width: 500\r\n    },\r\n    titleWrapper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: indigo[500],\r\n        color: 'white',\r\n        padding: '5px 5px 5px 15px',\r\n\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    titleLink: {\r\n        color: 'white',\r\n    },\r\n    titleIcon: {\r\n        color: 'white',\r\n        marginLeft: 10\r\n    },\r\n    friendInfo: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '10px 0 15px 0'\r\n    },\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    content: {\r\n        backgroundColor: indigo[50],\r\n        paddingBottom: 15\r\n    },\r\n    textArea: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        marginTop: 15\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles({\r\n    root: {\r\n        backgroundColor: 'white'\r\n    },\r\n})","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>;\r\ntype ThunkType = BaseThunkType<AppActionsType>\r\n\r\nlet initialState = {\r\n    isInitialized: false, // приложение проинициализировано (получены инициализационные данные)?\r\n    globalError: null,\r\n    isLoading: false, // загрузка происходит?\r\n    lanError: false, // ошибка сети\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_IS_INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized};\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        };\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setIsInitialized: (isInitialized: boolean) => ({type: 'APP/SET_IS_INITIALIZED', isInitialized} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n};\r\n\r\nexport const getIsInitialized = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let promise = dispatch(getAuthUserData());\r\n        // dispatch(somethingElse());\r\n        // dispatch(somethingElse());\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(appAC.setIsInitialized(true));\r\n            })\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport default appReducer;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getIsInitializedSelector = (state: StateType) => state.app.isInitialized;\r\nexport const getIsLoading = (state: StateType) => state.app.isLoading;\r\nexport const getLanError = (state: StateType) => state.app.lanError;\r\n","export const DATE = {\r\n    // получение текущей даты\r\n    // RETURN - JS DATE\r\n    getCurrentDate() {\r\n        return new Date();\r\n    },\r\n\r\n    getMonthWord(month: number) {\r\n        switch (month) {\r\n            case 1: {\r\n                return 'January';\r\n            }\r\n            case 2: {\r\n                return 'February';\r\n            }\r\n            case 3: {\r\n                return 'March';\r\n            }\r\n            case 4: {\r\n                return 'April';\r\n            }\r\n            case 5: {\r\n                return 'May';\r\n            }\r\n            case 6: {\r\n                return 'June';\r\n            }\r\n            case 7: {\r\n                return 'July';\r\n            }\r\n            case 8: {\r\n                return 'August';\r\n            }\r\n            case 9: {\r\n                return 'September';\r\n            }\r\n            case 10: {\r\n                return 'October';\r\n            }\r\n            case 11: {\r\n                return 'November';\r\n            }\r\n            case 12: {\r\n                return 'December';\r\n            }\r\n        }\r\n    },\r\n\r\n    dateTranslateFromJS(date: Date) {\r\n        let month = date.getMonth() + 1;\r\n        let day = date.getDate();\r\n        let hours = date.getHours() as number | string;\r\n        let minutes = date.getMinutes() as number | string;\r\n\r\n        if (hours < 10) {\r\n            hours = `0${hours}`\r\n        };\r\n\r\n        if (minutes < 10) {\r\n            minutes = `0${minutes}`\r\n        };\r\n\r\n        let monthWord = this.getMonthWord(+month);\r\n        return `${day} ${monthWord} in ${hours}:${minutes}`;\r\n    },\r\n\r\n    dateTranslateFromAPI(date: string) {\r\n        const year = date.slice(0, 4);\r\n        const month = date.slice(5, 7);\r\n        const monthWord = this.getMonthWord(+month);\r\n        const day = date.slice(8, 10);\r\n        const hour = date.slice(11, 13);\r\n        const minutes = date.slice(14, 16);\r\n        return `${day} ${monthWord} in ${hour}:${minutes}`\r\n    }\r\n\r\n\r\n}","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(item => {\r\n        if (item[objPropName] === itemId) {\r\n            return {...item, ...newObjProps}\r\n        }\r\n        return item;\r\n    })\r\n};","import {GetItemsType, instance, ResponseTypeAPI} from \"./api\";\r\nimport {FriendsValuesType} from \"../types/types\";\r\n\r\nexport const usersAPI = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        let response = await instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`);\r\n        return response.data;\r\n    },\r\n\r\n    async searchUsers(currentPage = 1, pageSize = 10, term: string, friend: FriendsValuesType) {\r\n        let url = `users?page=${currentPage}&count=${pageSize}`;\r\n        if (term) url = url + `&term=${term}`;\r\n        let friendUrl;\r\n        if (friend === 'all') {\r\n            friendUrl = ''\r\n        } else {\r\n            friendUrl = `&friend=${friend}`\r\n        }\r\n        url = url + friendUrl;\r\n        let response = await instance.get<GetItemsType>(url);\r\n        return response.data;\r\n    },\r\n\r\n    async followUser(id: number) {\r\n        let response = await instance.post<ResponseTypeAPI>(`follow/${id}`)\r\n        return response.data;\r\n    },\r\n    async unfollowUser(id: number) {\r\n        let response = await instance.delete(`follow/${id}`) //as AxiosResponse<any>\r\n                return response.data as Promise<ResponseTypeAPI>;\r\n      },\r\n    // async getProfile(id: number) {\r\n    //     let response = await instance.get<>(`profile/${id}`)\r\n    //     return response.data;\r\n    // }\r\n};\r\n\r\n//================================= TYPE =======================================\r\ntype friendType = 'all' | 'friend' | 'not friend';\r\n","import {updateObjectInArray} from \"../utilities/objects-helpers\";\r\nimport {\r\n    FriendsValuesType, SearchFriendsParamsType,\r\n    SearchUsersParamsType,\r\n    UserType\r\n} from \"../types/types\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../DAL/users-api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    users: null as null | Array<UserType>, // массив пользователей\r\n    pageSize: 10, // количество пользователей на одной странице\r\n    pageFriendsSize: 10, // количество друзей на одной странице\r\n    totalUsersCount: 0, // общее число пользователей\r\n    totalFriendsCount: 0, // общее число друзей\r\n    currentPage: 1, // номер текущей страницы пользователей\r\n    currentFriendsPage: 1, // номер текущей страницы друзей\r\n    isLoading: false, // загрузка происходит?\r\n    isFollowing: false, // отписка/подписка происходит?\r\n    followingInProgress: [] as Array<number>, // массив пользователей, для которых послан запрос на подписку/отписку\r\n    friends: null as null | Array<UserType>, // массив друзей\r\n    searchUsersParams: {term: '', friend: 'all'} as SearchUsersParamsType, // параметры поиска пользователей\r\n    searchFriendsParams: {term: ''} as SearchFriendsParamsType, // параметры поиска друзей\r\n    isFriendsSearching: false, // поиск друзей происходит?\r\n    showUsersFrom: 'all' as 'all' | 'search', // откуда показывать пользователей - всех или из поиска\r\n    currentFriendsSidebarItem: 0, // номер элемента бокового меню\r\n    needToChangeListOfFriends: false, // список друзей нужно изменить (используется для обновления после удаления)?\r\n    friendIdToRemove: null as null | number, // id друга, которого удаляем\r\n    valueFromHeaderSearch: null as null | string // страка поиска пользователя из header\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'USERS/SET_VALUE_FROM_HEADER_SEARCH': {\r\n            return {...state, valueFromHeaderSearch: action.valueFromHeaderSearch}\r\n        }\r\n        case 'USERS/TOGGLE_IS_FRIENDS_SEARCHING': {\r\n            return {...state, isFriendsSearching: action.isFriendsSearching}\r\n        }\r\n        case 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS': {\r\n            return {...state,\r\n                needToChangeListOfFriends: action.needToChangeListOfFriends,\r\n                friendIdToRemove: action.friendIdToRemove\r\n            }\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM': {\r\n            return {...state, currentFriendsSidebarItem: action.currentFriendsSidebarItem}\r\n        }\r\n        case 'USERS/SET_FRIENDS': {\r\n            return {...state, friends: action.friends}\r\n        }\r\n        case 'USERS/SET_SHOW_USERS_FROM': {\r\n            return {...state, showUsersFrom: action.showUsersFrom}\r\n        }\r\n        case 'USERS/SET_SEARCH_FRIENDS_PARAMS': {\r\n            return {...state, searchFriendsParams: action.searchFriendsParams}\r\n        }\r\n        case 'USERS/SET_SEARCH_USERS_PARAMS': {\r\n            return {...state, searchUsersParams: action.searchUsersParams}\r\n        }\r\n        case 'USERS/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        }\r\n        case 'USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        }\r\n        case 'USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage};\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_PAGE': {\r\n            return {...state, currentFriendsPage: action.currentFriendsPage};\r\n        }\r\n        case 'USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        }\r\n        case 'USERS/SET_TOTAL_FRIENDS_COUNT': {\r\n            return {...state, totalFriendsCount: action.totalFriendsCount};\r\n        }\r\n        case 'USERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING': {\r\n            return {...state, isFollowing: action.isFollowing}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                // если запрос на подписку-отписку послан - добавить в массив, иначе удалить из массива\r\n                followingInProgress:\r\n                    action.followingInProgress\r\n                        ? [...state.followingInProgress, action.id]\r\n                        : state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const usersAC = {\r\n    setValueFromHeaderSearch: (valueFromHeaderSearch: string | null) => ({type: 'USERS/SET_VALUE_FROM_HEADER_SEARCH', valueFromHeaderSearch} as const),\r\n    toggleIsFriendsSearching: (isFriendsSearching: boolean) => ({type: 'USERS/TOGGLE_IS_FRIENDS_SEARCHING', isFriendsSearching} as const),\r\n    setNeedToChangeListOfFriends: (needToChangeListOfFriends: boolean, friendIdToRemove: number | null) => ({\r\n        type: 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS',\r\n        needToChangeListOfFriends,\r\n        friendIdToRemove\r\n    } as const),\r\n    setCurrentFriendsSidebarItem: (currentFriendsSidebarItem: number) => ({\r\n        type: 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM',\r\n        currentFriendsSidebarItem\r\n    } as const),\r\n    setFriends: (friends: Array<UserType>) => ({type: 'USERS/SET_FRIENDS', friends} as const),\r\n    setSearchFriendsParams: (searchFriendsParams: SearchFriendsParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_FRIENDS_PARAMS',\r\n        searchFriendsParams\r\n    } as const),\r\n    setSearchUsersParams: (searchUsersParams: SearchUsersParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_USERS_PARAMS',\r\n        searchUsersParams\r\n    } as const),\r\n    setFollow: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    setUnfollow: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setCurrentFriendsPage: (currentFriendsPage: number) => ({type: 'USERS/SET_CURRENT_FRIENDS_PAGE', currentFriendsPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'USERS/SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n    setTotalFriendsCount: (totalFriendsCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_FRIENDS_COUNT',\r\n        totalFriendsCount\r\n    } as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'USERS/TOGGLE_LOADING', isLoading} as const),\r\n    toggleFollowing: (isFollowing: boolean) => ({type: 'USERS/TOGGLE_FOLLOWING', isFollowing} as const),\r\n    toggleFollowingProgress: (followingInProgress: boolean, id: number) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        followingInProgress,\r\n        id\r\n    } as const),\r\n    setShowUsersFrom: (showUsersFrom: 'all' | 'search') => ({type: 'USERS/SET_SHOW_USERS_FROM', showUsersFrom} as const),\r\n    };\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize);\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchUsers = (currentPage: number, pageSize: number, term: string, friend: FriendsValuesType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, friend);\r\n        console.log('searchUsers')\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchFriends = (currentPage: number, pageSize: number, term: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleIsFriendsSearching(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, 'true');\r\n        dispatch(usersAC.setFriends(data.items));\r\n        dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleIsFriendsSearching(false));\r\n    }\r\n};\r\n\r\nexport const removeAndUpdateFriends = (currentPage: number, pageSize: number, id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(true, id));\r\n        let dataFromUnfollow = await usersAPI.unfollowUser(id);\r\n        if (dataFromUnfollow.resultCode === 0) {\r\n            let data = await usersAPI.searchUsers(currentPage, pageSize, '', 'true');\r\n            dispatch(usersAC.setFriends(data.items));\r\n            dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n            dispatch(usersAC.setNeedToChangeListOfFriends(false, null));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(false, id));\r\n    }\r\n};\r\n\r\n\r\ntype FollowUnfollwType = UsersActionsType;//followType | unfollowType\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   id: number,\r\n                                   apiMethod: any,\r\n                                   actionCreator: (id: number) => FollowUnfollwType) => {\r\n    dispatch(usersAC.toggleFollowing(true));\r\n    dispatch(usersAC.toggleFollowingProgress(true, id));\r\n    let data = await apiMethod(id)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(usersAC.toggleFollowingProgress(false, id));\r\n};\r\n\r\nexport const getFollow = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        await _followUnfollowFlow(dispatch, id, usersAPI.followUser.bind(id), usersAC.setFollow);\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(false));\r\n    }\r\n\r\n};\r\n\r\nexport const getUnfollow = (id: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, id, usersAPI.unfollowUser.bind(id), usersAC.setUnfollow);\r\n};\r\n\r\nexport default usersReducer;\r\n\r\n//============================ TYPES ==============================================\r\nexport type initialStateType = typeof initialState;\r\ntype UsersActionsType = GetActionsType<typeof usersAC>\r\ntype DispatchType = Dispatch<UsersActionsType>\r\ntype ThunkType = BaseThunkType<UsersActionsType | AppActionsType>","// DAL - уровень доступа к данным\r\n// упрощенный (через коллбэки) доступ к данным на сервере\r\nimport axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e09d6375-5dac-4dde-95ca-700e186a8f7d'\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseTypeAPI<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","import {StateType} from \"./redux-store\";\r\n\r\nexport const getPosts = (state: StateType) => state.profile.posts;\r\nexport const getProfileSelector = (state: StateType) => state.profile.profile;\r\nexport const getCurrentUserProfileSelector = (state: StateType) => state.profile.currentUserProfile;\r\nexport const getStatusSelector = (state: StateType) => state.profile.status;\r\nexport const getAvatarIsLoading = (state: StateType) => state.profile.avatarIsLoading;\r\nexport const getStatusIsLoading = (state: StateType) => state.profile.statusIsLoading;\r\nexport const getEditMode = (state: StateType) => state.profile.editMode;\r\nexport const getCurrentInfoFormSidebarItem = (state: StateType) => state.profile.currentInfoFormSidebarItem;\r\nexport const getFollowedSelector = (state: StateType) => state.profile.followed;\r\nexport const getEditingPost = (state: StateType) => state.profile.editingPost;\r\n\r\n\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: StateType) => state.users.users;\r\nexport const getFriendsSelector = (state: StateType) => state.users.friends;\r\nexport const getPageSize = (state: StateType) => state.users.pageSize;\r\nexport const getCurrentPage = (state: StateType) => state.users.currentPage;\r\nexport const getCurrentFriendsPage = (state: StateType) => state.users.currentFriendsPage;\r\nexport const getFollowingInProgress = (state: StateType) => state.users.followingInProgress;\r\nexport const getTotalUsersCount = (state: StateType) => state.users.totalUsersCount;\r\nexport const getTotalFriendsCount = (state: StateType) => state.users.totalFriendsCount;\r\nexport const getIsLoading = (state: StateType) => state.users.isLoading;\r\nexport const getIsFollowing = (state: StateType) => state.users.isFollowing;\r\nexport const getSearchUsersParams = (state: StateType) => state.users.searchUsersParams;\r\nexport const getSearchFriendsParams = (state: StateType) => state.users.searchFriendsParams;\r\nexport const getShowUsersFrom = (state: StateType) => state.users.showUsersFrom;\r\nexport const getCurrentFriendsSidebarItem = (state: StateType) => state.users.currentFriendsSidebarItem;\r\nexport const getNeedToChangeListOfFriends = (state: StateType) => state.users.needToChangeListOfFriends;\r\nexport const getFriendIdToRemove = (state: StateType) => state.users.friendIdToRemove;\r\nexport const getIsFriendsSearching = (state: StateType) => state.users.isFriendsSearching;\r\nexport const getValueFromHeaderSearch = (state: StateType) => state.users.valueFromHeaderSearch;\r\n\r\n\r\n\r\n","import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextAreaField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid, error}, classes, rows = 4, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                multiline\r\n                //rows={4}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n    rows?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import {InputBaseProps, InputProps, OutlinedInputProps} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst RenderNakedTextAreaField = (props: any) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid, error}, rows = 4, multiline = true, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <InputBase\r\n                //InputProps={classes ? {classes} as Partial<InputProps> : null}\r\n                classes={classes ? classes : null}\r\n                multiline={multiline}\r\n                rows={rows}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                //helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderNakedTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    },\r\n    rows?: number\r\n    multiline?: boolean\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import {FormControlLabel} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderCheckbox: React.FC<PropsType> = (props) => {\r\n    const {input, label, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {icon && <div className={classes.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={input.value ? true : false}\r\n                        color=\"primary\"\r\n                        onChange={input.onChange}\r\n                    />\r\n                }\r\n                label={label}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RenderCheckbox\r\n\r\n//======================== TYPES ============================\r\ntype PropsType = {\r\n    icon?: React.ReactElement\r\n    label: string\r\n    input: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);","export const required: FieldValidatorType = (value) =>\r\n    value ? undefined : 'Field is required';\r\n\r\nexport const maxLength = (max: number): FieldValidatorType => (value) =>\r\n    value && value.length > max\r\n        ? `Number of letters is more than ${max}`\r\n        : undefined;\r\nexport const maxLength10 = maxLength(10);\r\nexport const maxLength30 = maxLength(30);\r\nexport const maxLength100 = maxLength(100);\r\n\r\nexport const empty: EmptyType = (str) => /^\\s+$/.test(str);\r\n\r\nexport const shouldNotBeEmpty: FieldValidatorType = (value) =>\r\n    empty(value) && value !== ''\r\n        ? 'Field should not be empty'\r\n        : undefined;\r\n\r\n//=========================== TYPES =====================================\r\ntype EmptyType = (str: string) => boolean\r\nexport type FieldValidatorType = (value: string) => string | undefined","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type SettingsActionsType = GetActionsType<typeof settingsAC>;\r\ntype ThunkType = BaseThunkType<SettingsActionsType>\r\n\r\nlet initialState = {\r\n    theme: {\r\n        menuBackgroundColor: '#3f50b5',\r\n        displayBackgroundColor: '#e8eaf6',\r\n    }\r\n};\r\n\r\nconst settingsReducer = (state = initialState, action: SettingsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'Settings/SET_MENU_BACKGROUND_COLOR':\r\n            return {...state, theme: {...state.theme, menuBackgroundColor: action.menuBackgroundColor}};\r\n        case 'Settings/SET_DISPLAY_BACKGROUND_COLOR':\r\n            return {...state, theme: {...state.theme, displayBackgroundColor: action.displayBackgroundColor}};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const settingsAC = {\r\n    setMenuBackgroundColor: (menuBackgroundColor: string) => ({\r\n        type: 'Settings/SET_MENU_BACKGROUND_COLOR',\r\n        menuBackgroundColor\r\n    } as const),\r\n    setDisplayBackgroundColor: (displayBackgroundColor: string) => ({\r\n        type: 'Settings/SET_DISPLAY_BACKGROUND_COLOR',\r\n        displayBackgroundColor\r\n    } as const),\r\n};\r\n\r\n\r\nexport default settingsReducer;","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport settingsReducer from \"./settings-reducer\";\r\n\r\n// объединяем редьюсеры в объект\r\nlet rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    settings: settingsReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, reset} from \"redux-form\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderNakedTextAreaField from \"../common/RenderNakedTextareaField\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {appAC} from \"../../redux/app-reducer\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {usersAC} from \"../../redux/users-reduser\";\r\n\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine} = props;\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={classes.fieldWrapper}>\r\n                <SearchIcon className={classes.icon}/>\r\n                <Field name='name'\r\n                       component={RenderNakedTextAreaField}\r\n                       validate={[shouldNotBeEmpty]}\r\n                       multiline={false}\r\n                       className={classes.field}\r\n                       classes={classesField}\r\n                    //label='Enter your message'\r\n                       placeholder='Search...'\r\n                       size='small'\r\n                />\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n    dispatch(reset('header-search'));\r\n};\r\n\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'header-search',\r\n    onSubmitSuccess: afterSubmit,\r\n})(Form);\r\n\r\n\r\n//============================ COMPONENT ============================================\r\nconst HeaderSearch: React.FC<ComponentPropsType> = ({}) => {\r\n    const dispatch = useDispatch();\r\n    let history = useHistory();\r\n\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        //console.log(formValue);\r\n        dispatch(usersAC.setValueFromHeaderSearch(formValue.name))\r\n        history.push('/users');\r\n\r\n\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HeaderSearch;\r\n\r\n//=========================== TYPE =======================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    name: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {}\r\n//========================== STYLES ======================\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        color: 'white',\r\n    },\r\n    fieldWrapper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: indigo[400],\r\n        height: 40,\r\n        borderRadius: 20,\r\n        paddingRight: 20,\r\n        '&:hover': {\r\n            backgroundColor: indigo[300],\r\n        },\r\n        marginRight: 15\r\n    },\r\n    icon: {\r\n        padding: '0 10px',\r\n        color: 'white'\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        input: {\r\n            transition: theme.transitions.create('width'),\r\n            backgroundColor: 'none',\r\n            width: 200,\r\n            '&:focus': {\r\n                width: 300\r\n            }\r\n        }\r\n    })\r\n)","import {StateType} from \"./redux-store\";\r\n\r\nexport const getTheme = (state: StateType) => state.settings.theme;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getId, getIsAuth, getLogin} from \"../../redux/auth-selectors\";\r\nimport {getProfileSelector} from \"../../redux/profile-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {getProfile} from \"../../redux/profile-reducer\";\r\nimport HeaderSearch from \"./HeaderSearch\";\r\nimport {getTheme} from \"../../redux/settings-selectors\";\r\n\r\nconst Header: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    const isAuth = useSelector(getIsAuth);\r\n    const login = useSelector(getLogin);\r\n    const profile = useSelector(getProfileSelector);\r\n    const id = useSelector(getId);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getProfile(id))\r\n        }\r\n    }, [id]);\r\n\r\n    //===================================================================================\r\n    const [open, setOpen] = useState(false);\r\n    const icon = open ? <ExpandLessIcon className={classes.icon}/> : <ExpandMoreIcon className={classes.icon}/>\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //=========================================================================\r\n    const onSettingsClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event)\r\n    };\r\n    const onLogoutClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event);\r\n        dispatch(logout());\r\n    }\r\n    //==================================================================================\r\n    const theme = useSelector(getTheme);\r\n    const useStylesSettings = makeStyles({\r\n        wrapper: {\r\n            backgroundColor: theme.menuBackgroundColor,\r\n            position: 'fixed',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            zIndex: 10\r\n        }\r\n    });\r\n    const classesSettings = useStylesSettings();\r\n\r\n    return (\r\n        <div className={classesSettings.wrapper}>\r\n            <Toolbar className={classes.toolBar}>\r\n                <Typography variant=\"h6\" noWrap className={classes.logo}>\r\n                    Social Network\r\n                </Typography>\r\n\r\n                <HeaderSearch/>\r\n\r\n                {\r\n                    isAuth\r\n                        ? <>\r\n                            <Button\r\n                                ref={anchorRef}\r\n                                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleToggle}\r\n                                classes={{\r\n                                    root: classes.button,\r\n                                    label: classes.label\r\n                                }}\r\n                                color=\"inherit\">\r\n                                <Typography variant=\"subtitle1\" noWrap className={classes.login}>\r\n                                    {login}\r\n                                </Typography>\r\n                                {profile && profile.photos.small\r\n                                    ? <Avatar src={profile.photos.small} className={classes.avatar}/>\r\n                                    : <Avatar className={classes.avatar}/>}\r\n                                {icon}\r\n                            </Button>\r\n                            <Popper open={open}\r\n                                    className={classes.popper}\r\n                                    anchorEl={anchorRef.current}\r\n                                    role={undefined}\r\n                                    transition\r\n                                    disablePortal>\r\n                                {({TransitionProps, placement}) => (\r\n                                    <Grow\r\n                                        {...TransitionProps}\r\n                                        style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                    >\r\n                                        <Paper>\r\n                                            <ClickAwayListener onClickAway={handleClose}>\r\n\r\n                                                <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                          onKeyDown={handleListKeyDown}>\r\n                                                    <MenuItem onClick={onLogoutClick}>\r\n                                                        <ListItemIcon>\r\n                                                            <ExitToAppIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary=\"Logout\"/>\r\n                                                    </MenuItem>\r\n                                                    <MenuItem onClick={onSettingsClick}\r\n                                                              component={RouterLink}\r\n                                                              to='/settings'\r\n                                                    >\r\n                                                        <ListItemIcon>\r\n                                                            <SettingsIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary=\"Settings\"/>\r\n                                                    </MenuItem>\r\n                                                </MenuList>\r\n                                            </ClickAwayListener>\r\n                                        </Paper>\r\n                                    </Grow>\r\n                                )}\r\n                            </Popper>\r\n                        </>\r\n                        : <Button color=\"inherit\" component={RouterLink} to='/login'>\r\n                            Войти\r\n                        </Button>\r\n                }\r\n\r\n            </Toolbar>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Header;\r\n\r\n//================================ STYLES =======================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {},\r\n    toolBar: {\r\n        maxWidth: 1000,\r\n        width: '100%',\r\n        margin: '0 auto',\r\n        boxSizing: 'border-box',\r\n        padding: '0 0 0 10px',\r\n    },\r\n    logo: {\r\n        flexGrow: 1,\r\n        color: 'white'\r\n    },\r\n    login: {\r\n        color: 'white'\r\n    },\r\n    button: {\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(0,0,0,0.3)',\r\n            borderRadius: 0,\r\n            minHeight: 64\r\n        },\r\n        textTransform: 'none',\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    label: {\r\n        minHeight: 64\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50,\r\n        margin: '0 10px'\r\n    },\r\n    icon: {\r\n        color: 'white'\r\n    },\r\n    popper: {\r\n        //border: '1px solid black',\r\n        boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)'\r\n    }\r\n});\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getCurrentSidebarItem = (state: StateType) => state.sidebar.currentSidebarItem;","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {profileAC} from \"../../redux/profile-reducer\";\r\nimport {usersAC} from \"../../redux/users-reduser\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\nimport {getCurrentSidebarItem} from \"../../redux/sidebar-selectors\";\r\n\r\nconst SidebarItem: React.FC<PropsTypes> = (props) => {\r\n    const {to, primary, icon, ownIndex} = props;\r\n    const classes = useStyles();\r\n    const currentSidebarItem = useSelector(getCurrentSidebarItem)\r\n    const dispatch = useDispatch();\r\n\r\n    const onClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(ownIndex));// установить номер текущего элемнта бокового меню\r\n        dispatch(profileAC.setEditMode(false)); // выключить режим редактирования профиля\r\n        dispatch(usersAC.setShowUsersFrom('all')); // показывать всех пользователей (обнуления поиска)\r\n        dispatch(usersAC.setCurrentPage(1)); // установить текущую страницу пользователей - первую\r\n        dispatch(usersAC.setSearchFriendsParams({term: ''})); // обнуления параметров поиска друзей\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(0)); // переключение на первый элмемент бокового меню\r\n        dispatch(usersAC.setValueFromHeaderSearch('')); // обнуление строки поиска пользователей из заголовка\r\n    };\r\n\r\n    return (\r\n        <li>\r\n            <ListItem\r\n                onClick={onClick}\r\n                selected={ownIndex === currentSidebarItem}\r\n                button\r\n                component={RouterLink}\r\n                to={to}>\r\n                {\r\n                    icon\r\n                        ? <ListItemIcon className={clsx(ownIndex === currentSidebarItem && classes.iconSelected, classes.icon)}>\r\n                            {icon}\r\n                        </ListItemIcon>\r\n                        : null\r\n                }\r\n                <ListItemText primary={primary} className={clsx(ownIndex === currentSidebarItem && classes.text)}/>\r\n            </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;\r\n\r\n//============================== TYPES ==================================\r\ntype PropsTypes = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\n//============================== STYLES ===================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    icon: {\r\n       minWidth: 'inherit',\r\n        marginRight: 10\r\n    },\r\n    iconSelected: {\r\n        color: indigo[500]\r\n    },\r\n    text: {\r\n        color: indigo[600],\r\n        fontWeight: 900\r\n    }\r\n}));","import React from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SupervisedUserCircleIcon from '@material-ui/icons/SupervisedUserCircle';\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nconst Sidebar: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <List className={classes.list}>\r\n            <SidebarItem ownIndex={1} to={\"/profile\"} primary={'My profile'} icon={<HomeIcon/>}/>\r\n            <SidebarItem ownIndex={2} to={\"/dialogs\"} primary={'Dialogs'} icon={<ChatIcon/>}/>\r\n            <SidebarItem ownIndex={3} to={\"/users\"} primary={'Users'} icon={<SupervisedUserCircleIcon/>}/>\r\n            <SidebarItem ownIndex={4} to={\"/friends\"} primary={'Friends'} icon={<AccountCircleIcon/>}/>\r\n            <SidebarItem ownIndex={5} to={\"/settings\"} primary={'Settings'} icon={<SettingsIcon/>}/>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        minWidth: 140\r\n    }\r\n});","import React, {ChangeEvent, SyntheticEvent, useState} from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst RenderPasswordField: React.FC<PropsType> = (props) => {\r\n    const {label, input, placeholder, meta, disabled} = props;\r\n    const classes = useStyles();\r\n\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [password, setPassword] = useState('')\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value);\r\n    };\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LockIcon className={classes.iconLeft}/>\r\n\r\n            <FormControl className={classes.textField}\r\n                         variant=\"outlined\">\r\n\r\n                <InputLabel htmlFor=\"outlined-adornment-password\" classes={{\r\n                    outlined: classes.outlined\r\n                }}>{label}</InputLabel>\r\n\r\n                <OutlinedInput\r\n                    //className={classes.input}\r\n                    classes={{\r\n                        root: classes.outlinedInputRoot,\r\n                        input: classes.outlinedInputInput\r\n                    }}\r\n                    disabled={disabled}\r\n                    id=\"outlined-adornment-password\"\r\n                    placeholder={placeholder}\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    value={password}\r\n                    error={meta.touched && meta.invalid}\r\n                    onChange={handleChange}\r\n\r\n                    {...input}\r\n\r\n\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={handleClickShowPassword}\r\n                                onMouseDown={handleMouseDownPassword}\r\n                                edge=\"end\"\r\n                                className={classes.iconButton}\r\n                            >\r\n                                {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                    labelWidth={73}\r\n                />\r\n\r\n                {meta.touched && meta.invalid && <Typography color='error' variant='caption' className={classes.error}>\r\n                    {meta.error}\r\n                </Typography>}\r\n\r\n            </FormControl>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RenderPasswordField;\r\n\r\n//=============================== TYPES =================================\r\ntype PropsType = {\r\n    label: string\r\n    input: any\r\n    placeholder: string\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    disabled: boolean\r\n}\r\n\r\n//=============================== STYLES ================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        width: '100%'\r\n    },\r\n    iconLeft: {\r\n        position: 'absolute',\r\n        left: -5,\r\n        top: '50%',\r\n        transform: 'translate(-100%, -50%)'\r\n    },\r\n    textField: {\r\n        width: '100%'\r\n    },\r\n    error: {\r\n        paddingLeft: 14,\r\n        paddingTop: 2\r\n    },\r\n    outlinedInputRoot: {\r\n        //height: 40,\r\n        width: '100%'\r\n    },\r\n    outlinedInputInput: {\r\n        height: 40,\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    outlined: {\r\n        transform: 'translate(14px, 12px) scale(1)'\r\n    },\r\n    iconButton: {\r\n        padding: 8\r\n    }\r\n\r\n});","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required, shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getCaptchaSelector, getIsAuth} from \"../../redux/auth-selectors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport RenderTextField from \"../common/RenderTextField\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderPasswordField from \"../common/RenderPasswordField\";\r\nimport RenderCheckbox from \"../common/RenderCheckbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n//=================================== Form =========================================\r\nconst LoginForm: React.FC<LoginFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, error, captcha} = props;\r\n    const classes = useStyles();\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name='email'\r\n                   component={RenderTextField}\r\n                   icon={<MailOutlineIcon/>}\r\n                   className={classes.textField}\r\n                   validate={[required, shouldNotBeEmpty]}\r\n                   label='email'\r\n                   size='small'\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field\r\n                name='password'\r\n                //disabled={isLoading}\r\n                className={classes.textField}\r\n                component={RenderPasswordField}\r\n                placeholder='Enter your password'\r\n                label='Password'\r\n                validate={[required, shouldNotBeEmpty]}\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name=\"rememberMe\" component={RenderCheckbox} label=\"Remember me\"/>\r\n        </div>\r\n\r\n        {\r\n            captcha\r\n            && <>\r\n                <div className={classes.fieldWrapper}>\r\n                    <img src={captcha} alt=\"\"/>\r\n                </div>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field\r\n                        name='captcha'\r\n                        //disabled={isLoading}\r\n                        className={classes.textField}\r\n                        component={RenderTextField}\r\n                        placeholder='Enter symbols from image'\r\n                        label='Captcha'\r\n                        validate={[required, shouldNotBeEmpty]}\r\n                        size='small'\r\n                    />\r\n                </div>\r\n            </>\r\n        }\r\n\r\n        {error && !pristine &&\r\n        <Typography color='error' variant='h6' className={classes.fieldWrapper}>\r\n            {error}\r\n        </Typography>}\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Button type=\"submit\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    fullWidth={true}\r\n                    size='large'\r\n                    className={classes.button}\r\n                    disabled={submitting || pristine}>\r\n                Enter\r\n            </Button>\r\n        </div>\r\n\r\n    </form>\r\n};\r\n\r\n/////////////////////-ReduxLoginForm-////////////////////////////////////////\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n\r\n//========================= COMPONENT =============================================================\r\nconst Login: React.FC = () => {\r\n    const classes = useStyles();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const captcha = useSelector(getCaptchaSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (values: LoginFormValuesType) => {\r\n        dispatch(login(values.email, values.password, values.rememberMe, values.captcha));\r\n    };\r\n    if (isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.card} elevation={6}>\r\n                <Typography\r\n                    className={classes.title}\r\n                    align='center'\r\n                    color='primary'\r\n                    variant='h5'\r\n                >\r\n                    Enter in your profile\r\n                </Typography>\r\n\r\n                <ReduxLoginForm onSubmit={onSubmit}\r\n                                captcha={captcha}/>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Login;\r\n\r\n//========================== TYPES ===============================\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\ntype LoginFormPropsType = InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps;\r\n\r\n//========================== STYLES ==============================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        width: 500,\r\n        padding: '15px 30px 15px 10px',\r\n        borderRadius: 10\r\n    },\r\n    error: {\r\n        width: 300,\r\n        marginBottom: 10,\r\n    },\r\n    textField: {\r\n\r\n        width: '100%',\r\n    },\r\n    fieldWrapper: {\r\n        marginLeft: 35,\r\n        marginBottom: 10\r\n    },\r\n    button: {\r\n        //marginBottom: 10,\r\n    },\r\n    title: {\r\n        marginBottom: 20\r\n    }\r\n});\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    const classes = useStyles();\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);// число страниц\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i < pagesCount + 1; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize); // число порций (блоков) страниц\r\n    let [portionNumber, setPortionNumber] = useState(1);// текущий номер порции (начинается с 1)\r\n    let startPortionNumber = (portionNumber - 1) * portionSize + 1; // номер первого элемента в порции\r\n    let endPortionNumber = portionNumber * portionSize; // номер последнего элемента в порции\r\n\r\n    const setPrevPortion = () => {\r\n        setPortionNumber(portionNumber - 1);\r\n        onPageChanged((portionNumber - 2) * portionSize + 1);\r\n    };\r\n\r\n    const setNextPortion = () => {\r\n        setPortionNumber(portionNumber + 1);\r\n        onPageChanged((portionNumber) * portionSize + 1);\r\n    };\r\n\r\n    const setFirstPortion = () => {\r\n        setPortionNumber(1);\r\n        onPageChanged(1);\r\n    };\r\n\r\n    const setLastPortion = () => {\r\n        setPortionNumber(portionCount);\r\n        //onPageChanged((portionCount - 1) * portionSize + 1);\r\n        onPageChanged(pagesCount);\r\n    };\r\n\r\n    const elements = pages\r\n        .filter(p => p >= startPortionNumber && p <= endPortionNumber)\r\n        .map(p => (\r\n                <Button\r\n                    className={classes.buttonRoot}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p)\r\n                    }}\r\n                    size='small'\r\n                    color='primary'\r\n                    disableElevation\r\n                    variant={p === currentPage ? 'contained' : \"outlined\"}\r\n                >\r\n                    {p}\r\n                </Button>\r\n            )\r\n        );\r\n\r\n    const prevPortionLabelStart = (portionNumber - 2) * pageSize + 1;\r\n    const prevPortionLabelEnd = (portionNumber - 1) * pageSize;\r\n    const prevPortionLabel = `${prevPortionLabelStart}...${prevPortionLabelEnd}`;\r\n\r\n    const nextPortionLabelStart = portionNumber * pageSize + 1;\r\n    const nextPortionLabelEnd = (portionNumber < portionCount - 1) ? (portionNumber + 1) * pageSize : pagesCount;\r\n    const nextPortionLabel = `${nextPortionLabelStart}...${nextPortionLabelEnd}`;\r\n\r\n    return (\r\n        <div className={classes.paginator}>\r\n\r\n            {portionNumber > 1 &&\r\n            <IconButton onClick={setFirstPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <FirstPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n            {portionNumber > 1 && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setPrevPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {prevPortionLabel}\r\n            </Button>}\r\n\r\n            {elements}\r\n\r\n            {portionNumber < portionCount && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setNextPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {nextPortionLabel}\r\n            </Button>}\r\n\r\n            {portionNumber < portionCount &&\r\n            <IconButton onClick={setLastPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <LastPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n        </div>)\r\n};\r\n\r\nexport default Paginator;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    paginator: {\r\n        //marginBottom: 10,\r\n    },\r\n    buttonRoot: {\r\n        marginRight: 5,\r\n        paddingLeft: 3,\r\n        paddingRight: 3,\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        minWidth: 24\r\n    },\r\n    iconButtonRoot: {\r\n        borderRadius: 4,\r\n        border: '1px solid rgba(63, 81, 181, 0.5)',\r\n        marginRight: 5,\r\n        padding: 0,\r\n        color: indigo[500]\r\n    },\r\n    icon: {\r\n        width: 22.4,\r\n        height: 22.4\r\n    }\r\n})\r\n","import {FormControl} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\n\r\nconst RenderRadioButton: React.FC<PropsType> = (props) => {\r\n    const {labels, value, input, classes, label, ...rest} = props;\r\n    const formControlLabelElements = labels\r\n        .map((el, i) => <FormControlLabel value={el.value}\r\n                                     key={i}\r\n                                     className={classes.formControlLabel}\r\n                                     control={<Radio/>}\r\n                                     label={el.label}/>)\r\n\r\n    return (\r\n        <FormControl >\r\n            <FormLabel component=\"legend\" className={classes.formLabel}>\r\n                {label}\r\n            </FormLabel>\r\n            <RadioGroup value=\"all\" className={classes.radioGroup}  {...input} {...rest}>\r\n                {formControlLabelElements}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default RenderRadioButton;\r\n\r\n//======================= TYPES ======================================================\r\ntype labelsItemType = {\r\n    value: string\r\n    label: string\r\n}\r\ntype PropsType = {\r\n    value: string\r\n    labels: Array<labelsItemType>\r\n    input: any\r\n    classes: any\r\n    label: string\r\n}","import React, {useEffect} from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, submit} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {Button, Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderRadioButton from \"../../common/RenderRadioButton\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {searchUsers, usersAC} from \"../../../redux/users-reduser\";\r\nimport {SearchUsersParamsType} from \"../../../types/types\";\r\nimport {getValueFromHeaderSearch} from \"../../../redux/users-selectors\";\r\n\r\n//========================== FORM =======================================\r\nconst SearchUsersForm: React.FC<SearchUsersFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    const classes = useStyles();\r\n    const classesRadioButton = useStylesRadioButton();\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <Field name='term'\r\n                   component={RenderTextField}\r\n                   fullWidth\r\n                   autoFocus={true}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   label='User name'\r\n                   size='small'\r\n                   onChange={() => dispatch(submit('searchUsers'))}\r\n            />\r\n\r\n            <Field name='friend'\r\n                   label='User are friend or not'\r\n                   component={RenderRadioButton}\r\n                   classes={classesRadioButton}\r\n                   labels={[\r\n                       {value: \"all\", label: 'All'},\r\n                       {value: \"true\", label: 'Friend'},\r\n                       {value: \"false\", label: 'Not friend'}\r\n                   ]}\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SearchIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    Search\r\n                </Button>\r\n            </div>\r\n\r\n\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst SearchUsersReduxForm = reduxForm<SearchUsersParamsType, SearchUsersFormOwnPropsType>({\r\n    form: 'searchUsers',\r\n    //validate\r\n})(SearchUsersForm);\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst SearchUsers: React.FC = () => {\r\n    const classes = useStyles();\r\n    const valueFromHeaderSearch = useSelector(getValueFromHeaderSearch);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: SearchUsersParamsType) => {\r\n        console.log(formValue)\r\n\r\n        dispatch(usersAC.setSearchUsersParams(formValue));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n        dispatch(usersAC.setShowUsersFrom('search'));\r\n    };\r\n\r\n\r\n    const term = valueFromHeaderSearch ? valueFromHeaderSearch : '';\r\n\r\n    const initialValues = {term: term, friend: 'all'} as SearchUsersParamsType;\r\n\r\n    useEffect(() => {\r\n        if (valueFromHeaderSearch) {\r\n            dispatch(submit('searchUsers'));\r\n            dispatch(usersAC.setSearchUsersParams({term: valueFromHeaderSearch, friend: 'all'}));\r\n            dispatch(usersAC.setCurrentPage(1));\r\n            dispatch(usersAC.setShowUsersFrom('search'));\r\n        }\r\n    },[valueFromHeaderSearch])\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6'\r\n                        color='primary'\r\n                        classes={{\r\n                            h6: classes.title\r\n                        }}>\r\n                Search users\r\n            </Typography>\r\n            <Divider classes={{\r\n                root: classes.divider\r\n            }}/>\r\n            <SearchUsersReduxForm onSubmit={onSubmit} initialValues={initialValues}/>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default SearchUsers;\r\n\r\n//===================================== TYPES====================================================\r\ntype SearchUsersFormPropsType =\r\n    InjectedFormProps<SearchUsersParamsType, SearchUsersFormOwnPropsType>\r\n    & SearchUsersFormOwnPropsType;\r\ntype SearchUsersFormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 10,\r\n        paddingBottom: 10,\r\n        marginBottom: 10\r\n    },\r\n    title: {\r\n        marginLeft: 10,\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    }\r\n});\r\nconst useStylesRadioButton = makeStyles({\r\n    formLabel: {\r\n        margin: '15px 10px 5px',\r\n    },\r\n    radioGroup: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        marginLeft: 10\r\n    },\r\n    formControlLabel: {},\r\n\r\n});","import ViewListIcon from '@material-ui/icons/ViewList';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport {ToggleButtonGroup} from \"@material-ui/lab\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport React from 'react';\r\nimport {ViewType} from \"../../types/types\";\r\n\r\nconst ViewSwitcher: React.FC<PropsType> = ({view, setView}) => {\r\n\r\n    const onChangeHandle = (event: React.MouseEvent<HTMLElement>, newView: ViewType) => {\r\n        setView(newView);\r\n    };\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            size='small'\r\n            exclusive\r\n            value={view}\r\n            onChange={onChangeHandle}\r\n            aria-label=\"items view\"\r\n        >\r\n            <ToggleButton value=\"list\" aria-label=\"list view\">\r\n                <ViewListIcon fontSize='small' color='primary'/>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"block\" aria-label=\"block view\">\r\n                <ViewModuleIcon fontSize='small' color='primary'/>\r\n            </ToggleButton>\r\n\r\n        </ToggleButtonGroup>\r\n    )\r\n};\r\n\r\nexport default ViewSwitcher;\r\n\r\n//========================== TYPES ===========================\r\ntype PropsType = {\r\n    view: ViewType\r\n    setView: (view: ViewType) => void\r\n}","import React, {useEffect} from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {UserType, ViewType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\n\r\nconst UserBlockItem: React.FC<PropType> = ({user, dialogs, view}) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFollowUnfollowClick = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n\r\n    const onOpenSendMessageFormHandle = () => {\r\n        setOpenSendMessageForm(true)\r\n    };\r\n\r\n    const buttonLabel = user.followed ? 'UnFollow' : 'Follow';\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n    const src = ((user && user.photos.small) ? user.photos.small : undefined) as string | undefined;\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card elevation={6} className={classes.card}>\r\n                <CardActionArea component={RouterLink}\r\n                                to={`/users/${user.id}`}>\r\n                    <Avatar className={classes.avatar}\r\n                            src={src ? src : undefined}\r\n                            variant=\"rounded\"/>\r\n                </CardActionArea>\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography color='primary'\r\n                                variant='subtitle2'\r\n                                align='center'>\r\n                        {user.name}\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n                <CardActions disableSpacing className={classes.cardActions}>\r\n\r\n                    <div className={classes.buttons}>\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button className={classes.button}\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    size='small'\r\n                                    fullWidth\r\n                                    disabled={followingInProgress.some(item => item === user.id)}\r\n                                    onClick={onFollowUnfollowClick}\r\n                                    startIcon={startIcon}\r\n                            >\r\n                                {buttonLabel}\r\n                            </Button>\r\n\r\n                            {\r\n                                isFollowing\r\n                                && followingInProgress.some(item => item === user.id)\r\n                                &&\r\n                                <CircularPreloader size={20} style={'absolute'}/>\r\n                            }\r\n\r\n                        </div>\r\n\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant='outlined'\r\n                                color=\"primary\"\r\n                                size='small'\r\n                                fullWidth\r\n                                onClick={onOpenSendMessageFormHandle}\r\n                                startIcon={<SendIcon/>}\r\n                            >\r\n                                Send message\r\n                            </Button>\r\n                        </div>\r\n\r\n                        <SendMessageForm open={openSendMessageForm}\r\n                                         onClose={setOpenSendMessageForm}\r\n                                         id={user.id}\r\n                                         name={user.name}\r\n                                         src={src}\r\n                                         dialogs={dialogs}\r\n                        />\r\n\r\n                    </div>\r\n                </CardActions>\r\n\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default UserBlockItem;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n    dialogs: Array<DialogType> | null\r\n    view: ViewType\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        width: 150,\r\n        padding: 10\r\n    },\r\n    media: {\r\n        height: 150,\r\n        borderRadius: 5\r\n    },\r\n    avatar: {\r\n        width: 150,\r\n        height: 150,\r\n    },\r\n    cardContent: {\r\n        padding: 5\r\n    },\r\n    cardActions: {\r\n        padding: 0,\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        marginBottom: 5\r\n    },\r\n    buttons: {\r\n        width: '100%',\r\n        marginTop: 0\r\n    },\r\n});","import React from 'react';\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {SidebarItemEnum, UserType, ViewType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar/ListItemAvatar\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nconst UserListItem: React.FC<PropType> = ({user, dialogs, view}) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const followUnfollowHandle = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n\r\n    const onOpenSendMessageFormHandle = () => {\r\n        setOpenSendMessageForm(true)\r\n    };\r\n\r\n    const goToUserHandle = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.users));\r\n    };\r\n\r\n    const followLabel = user.followed ? 'UnFollow' : 'Follow';\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n    const src = ((user && user.photos.small) ? user.photos.small : undefined) as string | undefined;\r\n\r\n\r\n    return (\r\n        <ListItem className={classes.listItem}>\r\n            <ListItemAvatar>\r\n                <Avatar\r\n                    className={classes.avatar}\r\n                    src={src}\r\n                />\r\n            </ListItemAvatar>\r\n            <div className={classes.text}>\r\n                <Link component={RouterLink} to={`/users/${user.id}`} variant='subtitle2'\r\n                      onClick={goToUserHandle}>\r\n                    <Typography color='textPrimary'>\r\n                        {user.name}\r\n                    </Typography>\r\n\r\n                </Link>\r\n                <Link component={RouterLink} to='#' variant='body2' onClick={onOpenSendMessageFormHandle}>\r\n                    Send message\r\n                </Link>\r\n                <div className={classes.buttonWrapper}>\r\n                    <Button className={classes.button}\r\n                            color=\"primary\"\r\n                            size='small'\r\n                            fullWidth\r\n                            disabled={followingInProgress.some(item => item === user.id)}\r\n                            onClick={followUnfollowHandle}\r\n                            startIcon={startIcon}\r\n                    >\r\n                        {followLabel}\r\n                    </Button>\r\n\r\n                    {\r\n                        isFollowing\r\n                        && followingInProgress.some(item => item === user.id)\r\n                        &&\r\n                        <CircularPreloader size={20} style={'absolute'}/>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n            <SendMessageForm open={openSendMessageForm}\r\n                             onClose={setOpenSendMessageForm}\r\n                             id={user.id}\r\n                             name={user.name}\r\n                             src={src}\r\n                             dialogs={dialogs}\r\n            />\r\n        </ListItem>\r\n    )\r\n};\r\n\r\nexport default UserListItem;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n    dialogs: Array<DialogType> | null\r\n    view: ViewType\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    listItem: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 6,\r\n        borderRadius: 6,\r\n        backgroundColor: 'white',\r\n        boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2), 0px 6px 10px 0px rgba(0,0,0,0.14), 0px 1px 18px 0px rgba(0,0,0,0.12)'\r\n    },\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n    text: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'flex-start'\r\n    },\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        marginBottom: 5\r\n    },\r\n\r\n    // root: {\r\n    //     width: 150,\r\n    //     padding: 10\r\n    // },\r\n    // media: {\r\n    //     height: 150,\r\n    //     borderRadius: 5\r\n    // },\r\n    // avatar: {\r\n    //     width: 150,\r\n    //     height: 150,\r\n    // },\r\n    // cardContent: {\r\n    //     padding: 5\r\n    // },\r\n    // cardActions: {\r\n    //     padding: 0,\r\n    // },\r\n\r\n    // buttons: {\r\n    //     width: '100%',\r\n    //     marginTop: 0\r\n    // },\r\n});","import React from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {UserType, ViewType} from \"../../../types/types\";\r\nimport UserBlockItem from \"./UserBlockItem\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport UserListItem from \"./UserListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst UsersList: React.FC<PropsType> = ({isLoading, users, dialogs, view, pageSize}) => {\r\n    const classes = useStyles();\r\n\r\n    const usersBlockItems = users && users.map(user => <UserBlockItem\r\n        user={user}\r\n        key={user.id}\r\n        dialogs={dialogs}\r\n        view={view}\r\n    />);\r\n\r\n    const usersListItems = users && users.map(user => <UserListItem\r\n        user={user}\r\n        key={user.id}\r\n        dialogs={dialogs}\r\n        view={view}\r\n    />);\r\n\r\n    const allIsLoaded = !isLoading && users && dialogs;\r\n\r\n    let skeletonBlockItems = [] as Array<React.ReactElement>;\r\n    for (let i = 0; i < pageSize; i++) {\r\n        skeletonBlockItems.push(\r\n            <Grid item key={i}>\r\n                <Skeleton variant=\"rect\" width={170} height={272} className={classes.skeletonBlockItem}/>\r\n            </Grid>\r\n        )\r\n    };\r\n\r\n    let skeletonListItems = [] as Array<React.ReactElement>;\r\n    for (let i = 0; i < pageSize; i++) {\r\n        skeletonListItems.push(\r\n            <Skeleton variant=\"rect\" width='100%' height={96} className={classes.skeletonListItem}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                view === \"block\" &&\r\n                <>\r\n                    {\r\n                        allIsLoaded\r\n                            ? <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                                {usersBlockItems}\r\n                            </Grid>\r\n                            : <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                                {skeletonBlockItems}\r\n                            </Grid>\r\n                    }\r\n                </>\r\n            }\r\n\r\n            {\r\n                view === \"list\" &&\r\n                <>\r\n                    {\r\n                        allIsLoaded\r\n                            ? <List disablePadding>\r\n                                {usersListItems}\r\n                            </List>\r\n                            : <List disablePadding>\r\n                                {skeletonListItems}\r\n                            </List>\r\n                    }\r\n                </>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UsersList;\r\n\r\n//======================= TYPES =====================\r\ntype PropsType = {\r\n    isLoading: boolean\r\n    users: null | Array<UserType>\r\n    dialogs: null | Array<DialogType>\r\n    view: ViewType\r\n    pageSize: number\r\n};\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    skeletonBlockItem: {\r\n        borderRadius: 4\r\n    },\r\n    skeletonListItem: {\r\n        borderRadius: 4,\r\n        marginBottom: 5\r\n    }\r\n})","import React, {useEffect, useState} from 'react';\r\nimport Paginator from '../../common/Paginator';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getSearchUsersParams, getShowUsersFrom,\r\n    getTotalUsersCount,\r\n    getUsersSelector, getValueFromHeaderSearch\r\n} from \"../../../redux/users-selectors\";\r\nimport {getIsLoading} from \"../../../redux/app-selectors\";\r\nimport {getUsers, searchUsers, usersAC} from \"../../../redux/users-reduser\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport SearchUsers from \"./SearchUsers\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport ViewSwitcher from \"../../common/ViewSwitcher\";\r\nimport UsersList from \"./UsersList\";\r\nimport {ViewType} from \"../../../types/types\";\r\n\r\nlet Users: React.FC = () => {\r\n    const classes = useStyles();\r\n    const users = useSelector(getUsersSelector);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const pageSize = useSelector(getPageSize);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const searchUsersParams = useSelector(getSearchUsersParams);\r\n    const showUsersFrom = useSelector(getShowUsersFrom);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n    const valueFromHeaderSearch = useSelector(getValueFromHeaderSearch);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [searchPanelIsOpen, setSearchPanelIsOpen] = useState(false);\r\n    const [view, setView] = useState<ViewType>('block')\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (showUsersFrom === 'all') {\r\n            dispatch(getUsers(currentPage, pageSize));\r\n        } else if (showUsersFrom === 'search') {\r\n            dispatch(searchUsers(currentPage, pageSize, searchUsersParams.term, searchUsersParams.friend));\r\n        }\r\n\r\n    }, [currentPage, pageSize, showUsersFrom, searchUsersParams.term, searchUsersParams.friend]);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentPage(pageNumber));\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setSearchPanelIsOpen(!searchPanelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        dispatch(usersAC.setShowUsersFrom('all'));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n    };\r\n\r\n    const countTitle = showUsersFrom === 'all' ? 'Total all users count:' : 'Total users count from search:'\r\n\r\n    useEffect(() => {\r\n        if (valueFromHeaderSearch) {\r\n            setSearchPanelIsOpen(true)\r\n        }\r\n    }, [valueFromHeaderSearch])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Collapse in={searchPanelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <SearchUsers/>\r\n            </Collapse>\r\n\r\n            <div className={classes.topPanel}>\r\n                <Button onClick={onSearchCharactersClick}\r\n                        size='small'\r\n                        className={classes.button}\r\n                        color='primary'\r\n                        startIcon={searchPanelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {searchPanelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        size='small'\r\n                        color='primary'\r\n                        disabled={showUsersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                <Typography color='primary'\r\n                            variant='subtitle2'\r\n                            className={classes.countTitle}\r\n                >\r\n                    {countTitle}\r\n                </Typography>\r\n\r\n                <Badge badgeContent={totalUsersCount} color=\"primary\" max={99999} showZero>\r\n                    <PeopleIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n\r\n            {\r\n                totalUsersCount !== 0 && totalUsersCount && pageSize && currentPage &&\r\n                <div className={classes.paginatorTopWrapper}>\r\n                    <div className={classes.paginator}>\r\n                        <Paginator totalItemsCount={totalUsersCount}\r\n                                   pageSize={pageSize}\r\n                                   currentPage={currentPage}\r\n                                   onPageChanged={onPageChanged}\r\n                        />\r\n                    </div>\r\n\r\n                    <ViewSwitcher view={view} setView={setView}/>\r\n                </div>\r\n\r\n            }\r\n\r\n            <UsersList isLoading={isLoading}\r\n                       users={users}\r\n                       dialogs={dialogs}\r\n                       view={view}\r\n                       pageSize={pageSize}\r\n            />\r\n\r\n            {\r\n                totalUsersCount !== 0 && totalUsersCount && pageSize && currentPage &&\r\n                <div className={classes.paginatorBottomWrapper}>\r\n                    <div className={classes.paginator}>\r\n                        <Paginator totalItemsCount={totalUsersCount}\r\n                                   pageSize={pageSize}\r\n                                   currentPage={currentPage}\r\n                                   onPageChanged={onPageChanged}\r\n                        />\r\n                    </div>\r\n                    <ViewSwitcher view={view} setView={setView}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Users);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        //padding: 15,\r\n        minHeight: '100vh'\r\n    },\r\n    topPanel: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    },\r\n    countTitle: {\r\n        marginRight: 10\r\n    },\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    paginatorTopWrapper: {\r\n        marginBottom: 10,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    paginatorBottomWrapper: {\r\n        marginTop: 10,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    paginator: {\r\n        marginRight: 20\r\n    },\r\n});\r\n\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {SidebarItemEnum, UserType} from \"../../../types/types\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\n\r\nconst FriendsListItem: React.FC<PropsTypes> = ({friend, dialogs}) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n\r\n    const onListItemClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.users));\r\n    };\r\n\r\n    const onOpenSendMessageFormHandle = (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        setOpenSendMessageForm(true)\r\n    };\r\n\r\n    const src = (friend ? friend.photos.small : undefined) as string | undefined;\r\n\r\n    //========================= popper ========================================\r\n    const [open, setOpen] = useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    //============================== IconButton ===================================================\r\n    const removeHandle = () => {\r\n        dispatch(usersAC.setNeedToChangeListOfFriends(true, friend.id))\r\n    };\r\n    const somethingElseHandle = () => {};\r\n\r\n    const labels = ['Remove from friends', 'Something else', 'Something else'];\r\n    const callbacks = [removeHandle, somethingElseHandle, somethingElseHandle]\r\n    const menuItemsElements = labels.map((el, i) => {\r\n        const onClickHandle = (event: React.MouseEvent<EventTarget>) => {\r\n            handleClose(event);\r\n            callbacks[i]();\r\n        };\r\n        return (\r\n            <MenuItem key={i}\r\n                      onClick={onClickHandle}\r\n            >\r\n                {labels[i]}\r\n            </MenuItem>\r\n        )\r\n    });\r\n    //===================================================================================\r\n\r\n    return (\r\n        <>\r\n            <Divider className={classes.divider}/>\r\n            <ListItem className={classes.listItem}>\r\n                <div className={classes.listItemInner}>\r\n                    <div className={classes.listItemInnerleft}>\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={friend.photos.large ? friend.photos.large : undefined}\r\n                            />\r\n                        </ListItemAvatar>\r\n                        <div className={classes.text}>\r\n                            <Link component={RouterLink} to={`/users/${friend.id}`} variant='subtitle2' onClick={onListItemClick}>\r\n                                {friend.name}\r\n                            </Link>\r\n                            <Link component={RouterLink} to='#' variant='body2' onClick={onOpenSendMessageFormHandle}>\r\n                                Send message\r\n                            </Link>\r\n                        </div>\r\n                        <SendMessageForm open={openSendMessageForm}\r\n                                         onClose={setOpenSendMessageForm}\r\n                                         id={friend.id}\r\n                                         name={friend.name}\r\n                                         src={src}\r\n                                         dialogs={dialogs}\r\n                        />\r\n\r\n                    </div>\r\n                    {/*<IconButtonWithPopper*/}\r\n                    {/*    icon={<MoreVertIcon/>}*/}\r\n                    {/*    classes={classesPopper}*/}\r\n                    {/*    labels={labels}*/}\r\n                    {/*    callbacks={callbacks}*/}\r\n                    {/*/>*/}\r\n\r\n                    <div>\r\n                        <IconButton ref={anchorRef}\r\n                                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleToggle}\r\n                                    edge=\"end\"\r\n                                    aria-label=\"delete\"\r\n                                    className={classes.iconButton}>\r\n                            <MoreVertIcon/>\r\n                        </IconButton>\r\n                        <Popper className={classes.popper}\r\n                                open={open}\r\n                                anchorEl={anchorRef.current}\r\n                                role={undefined}\r\n                                transition\r\n                                placement='bottom-end'\r\n                                disablePortal>\r\n                            {({TransitionProps, placement}) => (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                      onKeyDown={handleListKeyDown}>\r\n                                                {menuItemsElements}\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            )}\r\n                        </Popper>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isFollowing && followingInProgress.some(item => item === friend.id)\r\n                    && <CircularPreloader size={80} style={'absolute'}/>\r\n                }\r\n            </ListItem>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FriendsListItem;\r\n\r\n//========================== TYPES =============================================\r\ntype PropsTypes = {\r\n    friend: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    popper: {\r\n        zIndex: 1000\r\n    },\r\n    listItemInner: {\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    listItemInnerleft: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexGrow: 1\r\n    },\r\n    listItem: {\r\n        position: 'relative'\r\n    },\r\n    text: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }\r\n\r\n});\r\n\r\nconst useStylesPopper = makeStyles({\r\n    iconButton: {\r\n        marginRight: 0,\r\n        //zIndex: 1\r\n    },\r\n    popper: {\r\n        //zIndex: 1000\r\n    },\r\n})","//========================== FORM =======================================\r\n\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, reset, submit} from \"redux-form\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {getIsFriendsSearching, getSearchFriendsParams} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\n\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    const classes = useStyles();\r\n    //const classesField = useStylesField();\r\n\r\n    const onChangeHandler = () => {\r\n        dispatch(submit('friends-search'));\r\n        dispatch(usersAC.setCurrentFriendsPage(1))\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div >\r\n                <Field name='term'\r\n                       component={RenderTextField}\r\n                       //classes={classesField}\r\n                       //icon={<SearchIcon/>}\r\n                       fullWidth\r\n                       validate={[shouldNotBeEmpty]}\r\n                       label='Friends name'\r\n                       size='small'\r\n                       onChange={onChangeHandler}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst ReduxForm = reduxForm<FormParamsType, FormOwnPropsType>({\r\n    form: 'friends-search',\r\n    //validate\r\n})(Form);\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst FriendsSearch: React.FC = () => {\r\n    const classes = useStyles();\r\n    const isFriendsSearching = useSelector(getIsFriendsSearching);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const dispatch = useDispatch();\r\n    const onSubmit = (formValue: FormParamsType) => {\r\n        dispatch(usersAC.setSearchFriendsParams({term: formValue.term}))\r\n        console.log(formValue)\r\n    };\r\n    const icon = searchFriendsParams.term === ''\r\n    ? <SearchIcon/>\r\n    : <HighlightOffIcon/>\r\n\r\n    const onClickHandler = () => {\r\n        if (searchFriendsParams.term !== '') {\r\n            dispatch(usersAC.setSearchFriendsParams({term: ''}));\r\n            dispatch(usersAC.setCurrentFriendsPage(1));\r\n            dispatch(reset('friends-search'));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.search}>\r\n            <div className={classes.iconButton}>\r\n                {\r\n                    !isFriendsSearching\r\n                        ? <IconButton onClick={onClickHandler}>{icon}</IconButton>\r\n                        : <CircularPreloader size={20} style='absolute' />\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.form}>\r\n                <ReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default FriendsSearch;\r\n\r\n\r\n//===================================== TYPES====================================================\r\ntype FormPropsType =\r\n    InjectedFormProps<FormParamsType, FormOwnPropsType>\r\n    & FormOwnPropsType;\r\ntype FormParamsType = {\r\n    term: string\r\n}\r\ntype FormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    fieldWrapper: {\r\n        margin: '10px 10px 5px 35px'\r\n    },\r\n    search: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '0 10px'\r\n    },\r\n    form: {\r\n        flexGrow: 1\r\n    },\r\n    iconButton: {\r\n        width: 48,\r\n        height: 48,\r\n        position: 'relative',\r\n        marginRight: 5\r\n    }\r\n\r\n});\r\n// const useStylesField = makeStyles({\r\n//     root: {\r\n//         width: '100%'\r\n//     },\r\n// });","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentFriendsPage,\r\n    getCurrentPage, getFriendIdToRemove,\r\n    getFriendsSelector,\r\n    getNeedToChangeListOfFriends,\r\n    getPageSize, getSearchFriendsParams, getTotalFriendsCount\r\n} from \"../../../redux/users-selectors\";\r\nimport FriendsListItem from \"./FriendsListItem\";\r\nimport React, {useEffect} from \"react\";\r\nimport {searchFriends, removeAndUpdateFriends, usersAC} from \"../../../redux/users-reduser\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsSearch from \"./FriendsSearch\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paginator from \"../../common/Paginator\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nconst FriendsList: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    const friends = useSelector(getFriendsSelector);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const currentFriendsPage = useSelector(getCurrentFriendsPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const needToChangeListOfFriends = useSelector(getNeedToChangeListOfFriends);\r\n    const friendIdToRemove = useSelector(getFriendIdToRemove);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const totalFriendsCount = useSelector(getTotalFriendsCount);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const FriendsListElements = friends\r\n        && friends.map(el => <FriendsListItem key={el.id} friend={el} dialogs={dialogs}/>);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(searchFriends(currentFriendsPage, pageSize, searchFriendsParams.term));\r\n    }, [searchFriendsParams.term, currentFriendsPage]);\r\n\r\n    useEffect(() => {\r\n        if (needToChangeListOfFriends && friendIdToRemove) {\r\n            dispatch(removeAndUpdateFriends(currentPage, pageSize, friendIdToRemove));\r\n        }\r\n    }, [needToChangeListOfFriends]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs());\r\n    }, []);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentFriendsPage(pageNumber));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <div className={classes.title}>\r\n                <Typography component='span' color='primary' className={classes.titleleft}>\r\n                    Friends\r\n                </Typography>\r\n                <Typography component='span' color='textSecondary'>\r\n                    {totalFriendsCount}\r\n                </Typography>\r\n            </div>\r\n            <FriendsSearch/>\r\n\r\n            <div className={classes.paginatorTop}>\r\n                <Paginator totalItemsCount={totalFriendsCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentFriendsPage}\r\n                           onPageChanged={onPageChanged}\r\n                />\r\n            </div>\r\n\r\n            <List>\r\n                {FriendsListElements}\r\n            </List>\r\n\r\n            <Divider className={classes.divider}/>\r\n\r\n            <div className={classes.paginatorBottom}>\r\n                <Paginator totalItemsCount={totalFriendsCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentFriendsPage}\r\n                           onPageChanged={onPageChanged}\r\n                />\r\n            </div>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsList;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    title: {\r\n        padding: '5px 10px 5px 10px'\r\n    },\r\n    titleleft: {\r\n        marginRight: 5\r\n    },\r\n    paginatorTop: {\r\n        marginLeft: 10,\r\n        marginTop: 5\r\n    },\r\n    paginatorBottom: {\r\n        marginLeft: 10,\r\n        marginBottom: 5,\r\n        marginTop: 10\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n\r\n\r\n});","import React, {useEffect} from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\n\r\n\r\nconst FriendsSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(newValue));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Tabs\r\n                classes={{\r\n                    indicator: classes.indicator\r\n                }}\r\n                orientation=\"vertical\"\r\n                value={currentFriendsSidebarItem}\r\n                onChange={handleChange}\r\n                className={classes.tabs}\r\n            >\r\n\r\n                <Tab label=\"Friends\" icon={<GroupIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label=\"Request for friendship\" icon={<PersonAddIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label=\"Something else\" icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label=\"Something else\" icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n\r\n            </Tabs>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid #ccc`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none',\r\n        '& > *:first-child': {\r\n            marginBottom: '0!important'\r\n        }\r\n    },\r\n    icon: {\r\n        margin: '0 10px',\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50\r\n    }\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst FriendsSomethingElse: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6' color='primary' align='center'>\r\n                Something else\r\n            </Typography>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSomethingElse;\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsList from \"./FriendsList\";\r\nimport FriendsSidebar from \"./FriendsSidebar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport FriendsSomethingElse from \"./FriendsSomethingElse\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\n\r\n\r\nconst Friends = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.leftColumn}>\r\n                {\r\n                    currentFriendsSidebarItem === 0\r\n                        ? <FriendsList/>\r\n                        : <FriendsSomethingElse/>\r\n                }\r\n            </div>\r\n            <div className={classes.rightColumn}>\r\n                <FriendsSidebar/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Friends);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        display: \"flex\"\r\n    },\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    leftColumn: {\r\n        flexGrow: 1,\r\n        marginRight: 15,\r\n    },\r\n    rightColumn: {\r\n        flexBasis: 220,\r\n    }\r\n});","import Typography from \"@material-ui/core/Typography\";\r\nimport ColorPicker from \"material-ui-color-picker\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\nconst SettingsRow: React.FC<PropsType> = (props) => {\r\n    const {title, onChangeHandler, resetToDefaultHandle, probeBackgroundColor, defaultColor} = props;\r\n    const classes = useStyles();\r\n\r\n    const useStylesSettings = makeStyles({\r\n        probe: {\r\n            backgroundColor: probeBackgroundColor,\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 5,\r\n            marginRight: 15\r\n        },\r\n        default: {\r\n            backgroundColor: defaultColor,\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 5,\r\n            marginRight: 15\r\n        }\r\n    });\r\n    const classesSettings = useStylesSettings();\r\n\r\n    return (\r\n        <div className={classes.row}>\r\n            <Typography variant='subtitle1' className={classes.text}>\r\n                {title}\r\n            </Typography>\r\n            <ColorPicker className={classes.item}\r\n                         name='color'\r\n                         variant='outlined'\r\n                         size='small'\r\n                         defaultValue='choose color'\r\n                         onChange={onChangeHandler}\r\n            />\r\n\r\n            <div className={classesSettings.probe}/>\r\n\r\n            <Button variant='contained'\r\n                    onClick={resetToDefaultHandle}\r\n                    className={classes.button}>\r\n                Reset to default\r\n            </Button>\r\n\r\n            <div className={classesSettings.default}/>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default SettingsRow;\r\n\r\n\r\n//====================== TYPE ===================\r\ntype PropsType = {\r\n    title: string\r\n    onChangeHandler: (color: string) => void\r\n    resetToDefaultHandle: () => void\r\n    probeBackgroundColor: string\r\n    defaultColor: string\r\n}\r\n\r\n//================== STYLE =========================\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        marginBottom: 15\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 10\r\n    },\r\n    text: {\r\n        marginRight: 15,\r\n        flexBasis: 200\r\n    },\r\n    item: {\r\n        marginRight: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 15\r\n    },\r\n\r\n});\r\n","export const defaultTheme = {\r\n    menuBackgroundColor: '#3f50b5',\r\n    displayBackgroundColor: '#e8eaf6',\r\n}","import React, {useState} from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {settingsAC} from \"../../../redux/settings-reducer\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {getTheme} from \"../../../redux/settings-selectors\";\r\nimport SettingsRow from \"./SettingsRow\";\r\nimport {defaultTheme} from \"../../../const/const\";\r\n\r\nconst Settings: React.FC = () => {\r\n    const classes = useStyles();\r\n    const theme = useSelector(getTheme);\r\n    const dispatch = useDispatch();\r\n\r\n    const onMenuBCChangeHandler = (color: string) => {\r\n        if (color) {\r\n            dispatch(settingsAC.setMenuBackgroundColor(color))\r\n        }\r\n    };\r\n\r\n    const onDisplayBCChangeHandler = (color: string) => {\r\n        if (color) {\r\n            dispatch(settingsAC.setDisplayBackgroundColor(color))\r\n        }\r\n    };\r\n\r\n    const resetMenuBCToDefaultHandle = () => {\r\n        dispatch(settingsAC.setMenuBackgroundColor(defaultTheme.menuBackgroundColor))\r\n    };\r\n\r\n    const resetDisplayBCToDefaultHandle = () => {\r\n        dispatch(settingsAC.setDisplayBackgroundColor(defaultTheme.displayBackgroundColor))\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n\r\n            <Typography variant='h6' color='primary' align='center' className={classes.title}>\r\n                Settings\r\n            </Typography>\r\n\r\n            <SettingsRow title='Menu background color'\r\n                         onChangeHandler={onMenuBCChangeHandler}\r\n                         probeBackgroundColor={theme.menuBackgroundColor}\r\n                         defaultColor={defaultTheme.menuBackgroundColor}\r\n                         resetToDefaultHandle={resetMenuBCToDefaultHandle}\r\n            />\r\n\r\n            <SettingsRow title='Display background color'\r\n                         onChangeHandler={onDisplayBCChangeHandler}\r\n                         probeBackgroundColor={theme.displayBackgroundColor}\r\n                         defaultColor={defaultTheme.displayBackgroundColor}\r\n                         resetToDefaultHandle={resetDisplayBCToDefaultHandle}\r\n            />\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Settings);\r\n\r\n//================== STYLE =========================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n        //height: '100%'\r\n        paddingBottom: 400\r\n    },\r\n    title: {\r\n        marginBottom: 15\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 10\r\n    },\r\n    text: {\r\n        marginRight: 15,\r\n        flexBasis: 200\r\n    },\r\n    item: {\r\n        marginRight: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 15\r\n    },\r\n    default: {\r\n        backgroundColor: '#3f50b5',\r\n        width: 40,\r\n        height: 40,\r\n        borderRadius: 5,\r\n        marginRight: 15\r\n    }\r\n});","import React, {Suspense} from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport CircularPreloader from \"../common/CircularPreloader\";\nimport Login from \"../Login/Login\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useSelector} from \"react-redux\";\nimport {getIsInitializedSelector} from \"../../redux/app-selectors\";\n\nimport Users from \"./Users/Users\";\nimport Friends from \"./Friends/Friends\";\nimport Settings from \"./Settings/Settings\";\n\nconst Dialogs = React.lazy(() => import('./Dialogs/Dialogs'));\nconst Profile = React.lazy(() => import('./Profile/Profile'));\n\nconst Main: React.FC = () => {\n    const classes = useStyles();\n    const isInitialized = useSelector(getIsInitializedSelector);\n\n    if (!isInitialized) {\n        return <CircularPreloader/>\n    }\n\n    return (\n        <main className={classes.main}>\n            <Suspense fallback={<CircularPreloader/>}>\n                <Switch>\n                    <Route exact path='/' render={() => <Profile/>}/>\n                    <Route path='/dialogs/:userId?' render={() => <Dialogs/>}/>\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route exact path='/users' render={() => <Users/>}/>\n                    <Route path='/users/:userId' render={() => <Profile/>}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/settings' render={() => <Settings/>}/>\n                    <Route path='*' render={() => <div>404 Page not found</div>}/>\n                </Switch>\n            </Suspense>\n        </main>\n    );\n};\n\nexport default Main;\n\n//========================== STYLES ================================================\nconst useStyles = makeStyles({\n    main: {\n        flexGrow: 1,\n        padding: 10\n    }\n});\n","import React, {useEffect} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getMessageIsSending, getRecipientName} from \"./redux/dialogs-selectors\";\nimport {Snackbar} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\nimport {dialogsAC} from \"./redux/dialogs-reducer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {withRouter} from \"react-router-dom\";\nimport {getIsInitialized} from \"./redux/app-reducer\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport {getTheme} from \"./redux/settings-selectors\";\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n    const messageIsSending = useSelector(getMessageIsSending);\n    const recipientName = useSelector(getRecipientName);\n\n    const [showAlert, setShowAlert] = React.useState(false);\n    const dispatch = useDispatch();\n\n\n    const catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(e);\n    };\n\n    useEffect(() => {\n        dispatch(getIsInitialized())\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors);\n        return () => {\n            window.removeEventListener('unhandledrejection', catchAllUnhandledErrors);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!messageIsSending && recipientName) {\n            setShowAlert(true);\n        }\n        return () => {\n            //dispatch(dialogsAC.setRecipientName(null))\n        }\n    }, [messageIsSending])\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setShowAlert(false);\n    };\n\n    const theme = useSelector(getTheme);\n    const useStylesSettings = makeStyles({\n        root: {\n            backgroundColor: theme.displayBackgroundColor,\n            position: 'relative'\n        }\n    });\n    const classesSettings = useStylesSettings();\n\n    return (\n        <div className={classesSettings.root}>\n            <Header/>\n            <div className={classes.wrapper}>\n                <Sidebar/>\n                <Main/>\n            </div>\n\n            <Snackbar open={showAlert}\n                      anchorOrigin={{vertical: 'bottom', horizontal: 'left'}}\n                      autoHideDuration={6000}\n                      onClose={handleClose}>\n                <Alert onClose={handleClose}\n                       variant='filled'\n                       severity=\"success\">\n                    <Typography component='span'>Message to </Typography>\n                    <Typography component='span' color='primary'>{recipientName}</Typography>\n                    <Typography component='span'> is sent!</Typography>\n                </Alert>\n            </Snackbar>\n\n        </div>\n    );\n};\n\nexport default withRouter(App);\n\n//============================= STYLE ==========================\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: indigo[50],\n        position: 'relative'\n    },\n    wrapper: {\n        maxWidth: 1000,\n        width: '100%',\n        margin: '0 auto',\n        display: 'flex',\n        boxSizing: 'border-box',\n        paddingTop: 64,\n        minHeight: '100vh',\n        //overflow: 'auto'\n    },\n\n});\n\n","import {Provider} from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport App from \"./App\";\r\n\r\nconst AppGlobal = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default AppGlobal;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppGlobal from \"./AppContainer\";\n\nReactDOM.render(\n    <AppGlobal/>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n\n","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst CircularPreloader: React.FC<PropsType> = (props) => {\r\n    const {size = 100, style = 'static-center'} = props;\r\n    const classesAbsolute = useStylesAbsolute();\r\n    const classesStaticCenter = useStylesStaticCenter();\r\n    const classesStaticTop = useStylesStaticTop();\r\n    let classes = classesStaticCenter;\r\n    if (style === 'absolute') {\r\n        classes = classesAbsolute;\r\n    }\r\n    if (style === 'static-top') {\r\n        classes = classesStaticTop;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={size} color={'secondary'} className={classes.circular}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CircularPreloader;\r\n\r\n//============================ TYPES ==================================================\r\ntype PropsType = {\r\n    size?: number | undefined\r\n    style?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\n//============================ STYLES =======================================================\r\nconst useStylesAbsolute = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    },\r\n    circular: {}\r\n});\r\nconst useStylesStaticCenter = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    circular: {\r\n\r\n    }\r\n});\r\nconst useStylesStaticTop = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start'\r\n    },\r\n    circular: {\r\n\r\n    }\r\n});\r\n","import {GetActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    currentSidebarItem: null as null | number // текущий элемент главного бокового меню\r\n}\r\n\r\ntype initialStateType = typeof initialState;\r\nexport type SidebarActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: SidebarActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM': {\r\n            return {...state, currentSidebarItem: action.currentSidebarItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const sidebarAC = {\r\n    setCurrentSidebarItem: (currentSidebarItem: null | number) => ({type: 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM', currentSidebarItem} as const)\r\n};\r\n\r\nexport default sidebarReducer;","import {GetItemsType, instance, ResponseTypeAPI, ResultCodesEnum} from \"./api\";\r\nimport {FriendsValuesType, PhotosType, ProfileType} from \"../types/types\";\r\n\r\nexport const dialogsAPI = {\r\n    // получить массив пользователей с кем ведется диалог\r\n    async getDialogs() {\r\n        let response = await instance.get<Array<DialogType>>(`dialogs`);\r\n        return response.data;\r\n    },\r\n\r\n    // ???\r\n    async startDialog(userId: number) {\r\n        let response = await instance.put<SendMessageType>(`dialogs/${userId}`);\r\n        return response.data;\r\n    },\r\n\r\n    // получить массив сообщений из диалога с определенный пользователем\r\n    async getMessages(userId: number) {\r\n        let response = await instance.get<GetMessagesType>(`dialogs/${userId}/messages`)\r\n        return response.data;\r\n    },\r\n\r\n    // послать сообщение пользователю\r\n    async sendMessage(userId: number, message: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/${userId}/messages`,{body: message})\r\n        return response.data;\r\n    },\r\n\r\n    // проверить просмотрено ли мое сообщение\r\n    async getIsMessageViewed(messageId: string) {\r\n        let response = await instance.get<boolean>(`dialogs/messages/${messageId}/viewed`)\r\n        return response.data;\r\n    },\r\n\r\n    // отметить сообщение как спам\r\n    async signMessageAsSpam(messageId: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/messages/${messageId}/spam`)\r\n        console.log(response)\r\n        return response.data;\r\n    },\r\n\r\n    // удалить сообщение (только для меня, не для собеседника)\r\n    async deleteMessage(messageId: string) {\r\n        let response = await instance.delete<SendMessageType>(`dialogs/messages/${messageId}`)\r\n        return response.data;\r\n    },\r\n\r\n    // восстановить удаленное или помеченное как спам сообщение\r\n    async restoreMessage(messageId: string) {\r\n        let response = await instance.put<SendMessageType>(`dialogs/messages/${messageId}/restore`)\r\n        return response.data;\r\n    },\r\n\r\n};\r\n\r\n//================================= TYPE =======================================\r\ntype SendMessageType = {\r\n    data: {message: MessageType}\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: ResultCodesEnum\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    body: string\r\n    translatedBody: any\r\n    addedAt: string\r\n    senderId: number\r\n    senderName: string\r\n    recipientId: number\r\n    recipientName: string\r\n    viewed: boolean\r\n    deletedBySender: boolean // только для post\r\n    deletedByRecipient: boolean  //только для post\r\n    isSpam: boolean  //только для post\r\n    distributionId: any  //только для post\r\n}\r\n\r\ntype GetMessagesType = {\r\n    items: Array<MessageType>\r\n    totalCount: number\r\n    error: any\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    userName: string\r\n    hasNewMessages: boolean\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: PhotosType\r\n}\r\n\r\n","import {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {dialogsAPI, DialogType, MessageType} from \"../DAL/dialogs-api\";\r\nimport {DialogsSidebarItemEnum, DeletedMessagesType} from \"../types/types\";\r\nimport {ResultCodesEnum} from \"../DAL/api\";\r\n\r\nlet initialState = {\r\n    dialogs: null as null | Array<DialogType>, // массив диалогов\r\n    messages: null as null | Array<MessageType>, // сообщения из текущего диалога\r\n    selectedMessages: [] as Array<MessageType>, // массив выделенных сообщений\r\n    selectedDeletedMessages: [] as Array<MessageType>, // массив выделенных удаленных сообщений\r\n    selectedSpamMessages: [] as Array<MessageType>, // массив выделенных spam сообщений\r\n    dialogsIsLoading: false, // диалоги загружаются\r\n    messagesIsLoading: false, // сообщения загружаются?\r\n    messagesIsDeleting: false, // сообщения удаляются (или отправляются в спам)?\r\n    messageIsSending: false, // используется для всплывающего сообщения об отправке сообщения\r\n    recipientName: null as null | string, // имя получателя, используется для всплывающего сообщения об отправке сообщения\r\n    currentDialogsSidebarItem: 0 as DialogsSidebarItemEnum, // текущий элмемент бокового меню\r\n    deletedMessages: [] as DeletedMessagesType, // массив удаленных диалогов [{dialog: DialogType, messages: Array<MessageType>}, ...]\r\n    spamMessages: [] as DeletedMessagesType, // массив диалогов отмеченных как spam [{dialog: DialogType, messages: Array<MessageType>}, ...]\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype DialogsActionsType = GetActionsType<typeof dialogsAC>\r\ntype ThunkType = BaseThunkType<DialogsActionsType | AppActionsType>\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'dialogs/REMOVE_FROM_DELETED_MESSAGES': {\r\n            let deletedMessages = [...state.deletedMessages];\r\n            for (let i = 0; i < action.messages.length; i++) {\r\n                for (let j = 0; j < deletedMessages.length; j++) {\r\n                    deletedMessages[j].messages = deletedMessages[j].messages.filter(el => el.id !== action.messages[i].id )\r\n                }\r\n            }\r\n            deletedMessages = deletedMessages.filter(el => el.messages.length);\r\n\r\n            return {...state, deletedMessages: deletedMessages}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_SPAM_MESSAGES': {\r\n            let spamMessages = [...state.spamMessages];\r\n            for (let i = 0; i < action.messages.length; i++) {\r\n                for (let j = 0; j < spamMessages.length; j++) {\r\n                    spamMessages[j].messages = spamMessages[j].messages.filter(el => el.id !== action.messages[i].id )\r\n                }\r\n            }\r\n            spamMessages = spamMessages.filter(el => el.messages.length);\r\n\r\n            return {...state, spamMessages: spamMessages}\r\n        }\r\n        case 'dialogs/ADD_TO_DELETED_MESSAGES': {\r\n            const index = state.deletedMessages.findIndex(el => el.dialog.id === action.dialog.id)\r\n            if (index === -1) { // если удаленных сообщений из этого диалога еще нет\r\n                return {\r\n                    ...state,\r\n                    deletedMessages: [...state.deletedMessages, {dialog: action.dialog, messages: [action.message]}]\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    deletedMessages: state.deletedMessages.map((el, i) => {\r\n                        if (i !== index) {\r\n                            return el\r\n                        } else {\r\n                            return {dialog: el.dialog, messages: [...el.messages, action.message]}\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        case 'dialogs/ADD_TO_SPAM_MESSAGES': {\r\n            const index = state.spamMessages.findIndex(el => el.dialog.id === action.dialog.id)\r\n            if (index === -1) { // если удаленных сообщений из этого диалога еще нет\r\n                return {\r\n                    ...state,\r\n                    spamMessages: [...state.spamMessages, {dialog: action.dialog, messages: [action.message]}]\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    spamMessages: state.spamMessages.map((el, i) => {\r\n                        if (i !== index) {\r\n                            return el\r\n                        } else {\r\n                            return {dialog: el.dialog, messages: [...el.messages, action.message]}\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        case 'dialogs/SET_CURRENT_DIALOGS_SIDEBAR_ITEM': {\r\n            return {...state, currentDialogsSidebarItem: action.currentDialogsSidebarItem}\r\n        }\r\n        case 'dialogs/SET_MESSAGES_IS_DELETING': {\r\n\r\n            return {...state, messagesIsDeleting: action.messagesIsDeleting}\r\n        }\r\n        case 'dialogs/SET_MESSAGES_IS_LOADING': {\r\n            return {...state, messagesIsLoading: action.messagesIsLoading}\r\n        }\r\n        case 'dialogs/SET_RECIPIENT_NAME': {\r\n            return {...state, recipientName: action.recipientName}\r\n        }\r\n        case 'dialogs/SET_MESSAGE_IS_SENDING': {\r\n            return {...state, messageIsSending: action.messageIsSending}\r\n        }\r\n        case 'dialogs/TOGGLE_DIALOGS_IS_LOADING': {\r\n            return {...state, dialogsIsLoading: action.dialogsIsLoading}\r\n        }\r\n        case 'dialogs/CLEAN_SELECTED_MESSAGES': {\r\n            return {...state, selectedMessages: []}\r\n        }\r\n        case 'dialogs/CLEAN_DELETED_SELECTED_MESSAGES': {\r\n            return {...state, selectedDeletedMessages: []}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_SELECTED_MASSAGES': {\r\n            return {...state, selectedMessages: state.selectedMessages.filter(el => el.id !== action.message.id)}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_DELETED_SELECTED_MASSAGES': {\r\n            return {\r\n                ...state,\r\n                selectedDeletedMessages: state.selectedDeletedMessages.filter(el => el.id !== action.message.id)\r\n            }\r\n        }\r\n        case 'dialogs/ADD_TO_SELECTED_MASSAGES': {\r\n            return {...state, selectedMessages: [...state.selectedMessages, action.message]}\r\n        }\r\n        case 'dialogs/ADD_TO_DELETED_SELECTED_MASSAGES': {\r\n            return {...state, selectedDeletedMessages: [...state.selectedDeletedMessages, action.message]}\r\n        }\r\n        case 'dialogs/SET_MESSAGES': {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case 'dialogs/SET_DIALOGS': {\r\n            return {...state, dialogs: action.dialogs}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const dialogsAC = {\r\n    removeFromDeletedMessages: (messages: Array<MessageType>) => ({\r\n        type: 'dialogs/REMOVE_FROM_DELETED_MESSAGES',\r\n        messages\r\n    } as const),\r\n    removeFromSpamMessages: (messages: Array<MessageType>) => ({\r\n        type: 'dialogs/REMOVE_FROM_SPAM_MESSAGES',\r\n        messages\r\n    } as const),\r\n    addToDeletedMessages: (dialog: DialogType, message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_DELETED_MESSAGES',\r\n        dialog,\r\n        message\r\n    } as const),\r\n    addToSpamMessages: (dialog: DialogType, message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_SPAM_MESSAGES',\r\n        dialog,\r\n        message\r\n    } as const),\r\n    setCurrentDialogsSidebarItem: (currentDialogsSidebarItem: number) => ({\r\n        type: 'dialogs/SET_CURRENT_DIALOGS_SIDEBAR_ITEM',\r\n        currentDialogsSidebarItem\r\n    } as const),\r\n    setMessagesIsDeleting: (messagesIsDeleting: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGES_IS_DELETING',\r\n        messagesIsDeleting\r\n    } as const),\r\n    setMessagesIsLoading: (messagesIsLoading: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGES_IS_LOADING',\r\n        messagesIsLoading\r\n    } as const),\r\n    setRecipientName: (recipientName: null | string) => ({type: 'dialogs/SET_RECIPIENT_NAME', recipientName} as const),\r\n    setMessageIsSending: (messageIsSending: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGE_IS_SENDING',\r\n        messageIsSending\r\n    } as const),\r\n    toggleDialogsIsLoading: (dialogsIsLoading: boolean) => ({\r\n        type: 'dialogs/TOGGLE_DIALOGS_IS_LOADING',\r\n        dialogsIsLoading\r\n    } as const),\r\n    cleanSelectedMessages: () => ({type: 'dialogs/CLEAN_SELECTED_MESSAGES'} as const),\r\n    cleanSelectedDeletedMessages: () => ({type: 'dialogs/CLEAN_DELETED_SELECTED_MESSAGES'} as const),\r\n    addToSelectedMessages: (message: MessageType) => ({type: 'dialogs/ADD_TO_SELECTED_MASSAGES', message} as const),\r\n    addToSelectedDeletedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_DELETED_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    removeFromSelectedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/REMOVE_FROM_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    removeFromSelectedDeletedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/REMOVE_FROM_DELETED_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    setMessages: (messages: Array<MessageType> | null) => ({type: 'dialogs/SET_MESSAGES', messages} as const),\r\n    setDialogs: (dialogs: Array<DialogType>) => ({type: 'dialogs/SET_DIALOGS', dialogs} as const),\r\n    };\r\n\r\n// получить массив пользователей с кем ведется диалог\r\nexport const getDialogs = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.toggleDialogsIsLoading(true));\r\n        let data = await dialogsAPI.getDialogs();\r\n        dispatch(dialogsAC.setDialogs(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.toggleDialogsIsLoading(false));\r\n    }\r\n};\r\n\r\n// ???\r\nexport const startDialog = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(appAC.toggleLoading(true));\r\n        let data = await dialogsAPI.startDialog(userId);\r\n        //console.log(data)\r\n        //dispatch(usersAC.setUsers(data.items));\r\n        //dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\n// послать сообщение пользователю\r\nexport const sendMessage = (userId: number, message: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessageIsSending(true)); // сообщение отправляется\r\n        const dataSend = await dialogsAPI.sendMessage(userId, message);// post-запрос на сервер\r\n        if (dataSend.resultCode === ResultCodesEnum.Success) { // если запрос удачный\r\n            dispatch(dialogsAC.setRecipientName(dataSend.data.message.recipientName)); // установить имя адресата сообщения\r\n            const data = await dialogsAPI.getMessages(userId);// обновить список сообщений\r\n            if (data.error === null) {\r\n                dispatch(dialogsAC.setMessages(data.items));\r\n            }\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessageIsSending(false));\r\n    }\r\n};\r\n\r\n// получить массив сообщений из диалога с определенный пользователем\r\nexport const getMessages = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessagesIsLoading(true));\r\n        const data = await dialogsAPI.getMessages(userId);\r\n        if (data.error === null) {\r\n            dispatch(dialogsAC.setMessages(data.items));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessagesIsLoading(false));\r\n    }\r\n};\r\n\r\n// определить, просмотрено ли сообщение\r\nexport const getIsMessageViewed = (messageId: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await dialogsAPI.getIsMessageViewed(messageId);\r\n        //console.log(data)\r\n        // if (data.resultCode === 0) {\r\n        //     dispatch(profileAC.setStatus(status));\r\n        // }\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\n// отметить сообщения как спам (при этом удаляется?)\r\nexport const signMessageAsSpam = (messages: Array<MessageType>, dialog: DialogType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(true));\r\n\r\n        const arrayOfRequests = messages\r\n            .map(el => dialogsAPI.signMessageAsSpam(el.id));\r\n        const results = await Promise.all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;// определение успеха массива промисов\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n\r\n            if (resultCodeFinally === ResultCodesEnum.Success) {\r\n                const data = await dialogsAPI.getMessages(dialog.id);// обновление массива сообщений (запрос)\r\n                if (data.error === null) {\r\n                    dispatch(dialogsAC.setMessages(data.items));// обновление массива сообщений (запись в стор)\r\n                    for (let i = 0; i < messages.length; i++) {// добавление сообщений в массив удаленных\r\n                        dispatch(dialogsAC.addToSpamMessages(dialog, messages[i]))\r\n                    }\r\n                    dispatch(dialogsAC.cleanSelectedMessages()); // очистка массива ид выделенных сообщений\r\n                }\r\n            }\r\n\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(false));\r\n    }\r\n};\r\n\r\n// удаление сообщений\r\nexport const deleteMessages = (messages: Array<MessageType>, dialog: DialogType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(true));\r\n\r\n        const arrayOfRequests = messages\r\n            .map(el => dialogsAPI.deleteMessage(el.id));\r\n        const results = await Promise.all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;// определение успеха массива промисов\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (resultCodeFinally === ResultCodesEnum.Success) {\r\n            const data = await dialogsAPI.getMessages(dialog.id);// обновление массива сообщений\r\n            if (data.error === null) {\r\n                dispatch(dialogsAC.setMessages(data.items));\r\n                for (let i = 0; i < messages.length; i++) {// добавление сообщений в массив удаленных\r\n                    dispatch(dialogsAC.addToDeletedMessages(dialog, messages[i]))\r\n                }\r\n                dispatch(dialogsAC.cleanSelectedMessages()); // очистка массива ид выделенных сообщений\r\n            }\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(false));\r\n    }\r\n};\r\n\r\n// восстановить удаленное или помеченное как спам сообщение\r\nexport const restoreMessages = (messages: Array<MessageType>): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n\r\n        const arrayOfRequests = messages\r\n            .map(el => dialogsAPI.restoreMessage(el.id));\r\n        const results = await Promise.all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (resultCodeFinally === ResultCodesEnum.Success) {\r\n            // очистка массива выделенных удаленных сообщений\r\n            dispatch(dialogsAC.cleanSelectedDeletedMessages())\r\n            // удалить сообщения из массива удаленнных диалогов\r\n            dispatch(dialogsAC.removeFromDeletedMessages(messages));\r\n        }\r\n\r\n\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\n\r\nexport default dialogsReducer;","import {instance, ResponseTypeAPI, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\n// type AuthResponseType = {\r\n//     data: {\r\n//         id: number\r\n//         email: string\r\n//         login: string\r\n//     }\r\n//     resultCode: ResultCodesEnum\r\n//     messages: Array<string>\r\n// }\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype AuthResponseType = ResponseTypeAPI<AuthResponseDataType>\r\n\r\n// type LoginResponseType = {\r\n//     data: {\r\n//         userId: number\r\n//     }\r\n//     resultCode: ResultCodesEnum | ResultCodeForCaptchaEnum\r\n//     messages: Array<string>\r\n// }\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LoginResponseType = ResponseTypeAPI<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>\r\n\r\nexport const authAPI = {\r\n    async auth() {\r\n        let response = await instance.get<AuthResponseType>(`auth/me`)\r\n        return response.data;\r\n    },\r\n    async login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        let response = await instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n        return response.data;\r\n    },\r\n    async logout() {\r\n        let response = await instance.delete(`auth/login`)\r\n        return response.data;\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    async getCaptcha() {\r\n        let response = await instance.get<getCaptchaResponseType>(`security/get-captcha-url`);\r\n        return response.data;\r\n    }\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../DAL/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {authAPI} from \"../DAL/auth-api\";\r\nimport {securityAPI} from \"../DAL/security-api\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {sidebarAC, SidebarActionsType} from \"./sidebar-reducer\";\r\nimport {SidebarItemEnum} from \"../types/types\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as null | string\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype AuthActionsType = GetActionsType<typeof authAC>\r\ntype ThunkType = BaseThunkType<AuthActionsType | FormAction | AppActionsType | SidebarActionsType>\r\n\r\nconst authReducer = (state = initialState, action: AuthActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_AUTH_USER_DATA': {\r\n            return {...state, ...action.data,}\r\n        }\r\n        case 'AUTH/SET_CAPTCHA':\r\n            return {...state, captcha: action.captcha}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const authAC = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH/SET_AUTH_USER_DATA',\r\n        data: {id, email, login, isAuth}\r\n    } as const),\r\n    setCaptchaUrl: (captcha: string) => ({type: 'AUTH/SET_CAPTCHA', captcha} as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.auth();\r\n        //если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            let {id, login, email} = data.data;\r\n            dispatch(authAC.setAuthUserData(id, email, login, true));\r\n        }\r\n        dispatch(appAC.toggleLoading(false));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.login(email, password, rememberMe, captcha);\r\n        // если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n            dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.myProfile))\r\n        } else { // неправильный логин и(или) пароль\r\n            if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) { // необходима каптча\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await securityAPI.getCaptcha();\r\n        dispatch(authAC.setCaptchaUrl(data.url));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.logout();\r\n        // если вылогинись\r\n        if (data.resultCode === 0) {\r\n            dispatch(authAC.setAuthUserData(null, null, null, false));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getDialogsSelector = (state: StateType) => state.dialogs.dialogs;\r\nexport const getMessagesSelector = (state: StateType) => state.dialogs.messages;\r\nexport const getSelectedMessages = (state: StateType) => state.dialogs.selectedMessages;\r\nexport const getSelectedDeletedMessages = (state: StateType) => state.dialogs.selectedDeletedMessages;\r\nexport const getDialogsIsLoading = (state: StateType) => state.dialogs.dialogsIsLoading;\r\nexport const getMessageIsSending = (state: StateType) => state.dialogs.messageIsSending;\r\nexport const getRecipientName = (state: StateType) => state.dialogs.recipientName;\r\nexport const getMessagesIsLoading = (state: StateType) => state.dialogs.messagesIsLoading;\r\nexport const getMessagesIsDeleting = (state: StateType) => state.dialogs.messagesIsDeleting;\r\nexport const getCurrentDialogsSidebarItem = (state: StateType) => state.dialogs.currentDialogsSidebarItem;\r\nexport const getLoading = (state: StateType) => state.dialogs.messageIsSending ||\r\n    state.dialogs.messagesIsLoading ||\r\n    state.dialogs.messagesIsDeleting;\r\nexport const getDeletedMessages = (state: StateType) => state.dialogs.deletedMessages;\r\nexport const getSpamMessages = (state: StateType) => state.dialogs.spamMessages;\r\n\r\n\r\n\r\n\r\n","import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, input, meta: {touched, invalid, error}, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon &&\r\n            <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                variant=\"outlined\"\r\n                label={label}\r\n\r\n                placeholder={label}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n            width: '100%'\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getId = (state: StateType) => state.auth.id;\r\nexport const getEmail = (state: StateType) => state.auth.email;\r\nexport const getLogin = (state: StateType) => state.auth.login;\r\nexport const getIsAuth = (state: StateType) => state.auth.isAuth;\r\nexport const getCaptchaSelector = (state: StateType) => state.auth.captcha;\r\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, ResponseTypeAPI} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    async getProfile(id: number) {\r\n        let response = await instance.get<ProfileType>(`profile/${id}`)\r\n        return response.data;\r\n    },\r\n    async getStatus(id: number) {\r\n        let response = await instance.get<string>(`profile/status/${id}`)\r\n        return response.data;\r\n    },\r\n    async updateStatus(status: string) {\r\n        let response = await instance.put<ResponseTypeAPI>(`profile/status`, {status: status})\r\n        return response.data;\r\n    },\r\n    async savePhoto(photo: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photo);\r\n        let response = await instance.put('profile/photo', formData);\r\n        return response.data;\r\n    },\r\n    async saveProfile(values: ProfileType) {\r\n        let response = await instance.put<ResponseTypeAPI<SavePhotoResponseDataType>>(`profile`, values)\r\n        return response.data;\r\n    },\r\n    async getFollowed(userId: number) {\r\n        let response = await instance.get<boolean>(`follow/${userId}`)\r\n        return response.data;\r\n    },\r\n};","import {FormAction, stopSubmit} from 'redux-form';\r\nimport {PhotosType, PostType, ProfileSidebarItemEnum, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../DAL/profile-api\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {DATE} from \"../utilities/date\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hello, world', likeCount: 4, likeMe: false, time: '25 September in 10:10'},\r\n    ] as Array<PostType>, // массив постов\r\n    profile: null as null | ProfileType, // прифиль инициализированного пользователя\r\n    currentUserProfile: null as null | ProfileType, // профиль текущего просматриваемого пользователя\r\n    status: null as null | string, // статус\r\n    avatarIsLoading: false, // аватар загружается?\r\n    statusIsLoading: false, //  статус загружается?\r\n    editMode: false, // вкл./выкл. режим редактирования статуса\r\n    currentInfoFormSidebarItem: 0 as ProfileSidebarItemEnum, // текущий элемент бокового меню (все, удаленные, спам)\r\n    followed: null as null | boolean, // пользователь - друг?\r\n    editingPost: false // режим ввода нового поста (false - надпись, true - форма ввода)\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = GetActionsType<typeof profileAC>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction | AppActionsType>\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profile/TOGGLE_LIKE_ME': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(el => {\r\n                    if (el.id === action.postId) {\r\n                        return {...el, likeCount: el.likeMe ? el.likeCount - 1 : el.likeCount + 1, likeMe: !el.likeMe}\r\n                    } else {\r\n                        return el\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case 'profile/SET_EDITING_POST': {\r\n            return {...state, editingPost: action.editingPost}\r\n        }\r\n        case 'profile/SET_CURRENT_USER_PROFILE': {\r\n            return {...state, currentUserProfile: action.currentUserProfile}\r\n        }\r\n        case 'profile/SET_FOLLOWED': {\r\n            return {...state, followed: action.followed}\r\n        }\r\n        case 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM': {\r\n            return {...state, currentInfoFormSidebarItem: action.currentInfoFormSidebarItem}\r\n        }\r\n        case 'profile/SET_EDIT_MODE': {\r\n            return {...state, editMode: action.editMode}\r\n        }\r\n        case 'profile/AVATAR_IS_LOADING': {\r\n            return {...state, avatarIsLoading: action.avatarIsLoading}\r\n        }\r\n        case 'profile/STATUS_IS_LOADING': {\r\n            return {...state, statusIsLoading: action.statusIsLoading}\r\n        }\r\n        case 'profile/ADD_POST': {\r\n            let id = state.posts.length ? state.posts[state.posts.length - 1].id + 1 : 1;\r\n            return {\r\n                ...state,\r\n                posts: [\r\n                    ...state.posts,\r\n                    {\r\n                        id: id,\r\n                        message: action.post,\r\n                        likeMe: false,\r\n                        likeCount: 0,\r\n                        time: action.time\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        case 'profile/DELETE_POST': {\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.id)}\r\n        }\r\n        case 'profile/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'profile/SET_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'profile/SET_PHOTOS': {\r\n            if (state.profile) {\r\n                return {\r\n                    ...state, profile: {...state.profile, photos: action.photos}\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const profileAC = {\r\n    toggleLikeMe: (postId: number) => ({type: 'profile/TOGGLE_LIKE_ME', postId} as const),\r\n    setEditingPost: (editingPost: boolean) => ({type: 'profile/SET_EDITING_POST', editingPost} as const),\r\n    setCurrentUserProfile: (currentUserProfile: ProfileType) => ({\r\n        type: 'profile/SET_CURRENT_USER_PROFILE',\r\n        currentUserProfile\r\n    } as const),\r\n    setFollowed: (followed: null | boolean) => ({type: 'profile/SET_FOLLOWED', followed} as const),\r\n    setCurrentInfoFormSidebarItem: (currentInfoFormSidebarItem: number) => ({\r\n        type: 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM',\r\n        currentInfoFormSidebarItem\r\n    } as const),\r\n    addPost: (post: string) => ({\r\n        type: 'profile/ADD_POST',\r\n        post,\r\n        time: DATE.dateTranslateFromJS(DATE.getCurrentDate())\r\n    } as const),\r\n    deletePost: (id: number) => ({type: 'profile/DELETE_POST', id} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'profile/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\r\n    setPhotos: (photos: PhotosType) => ({type: 'profile/SET_PHOTOS', photos} as const),\r\n    toggleAvatarLoading: (avatarIsLoading: boolean) => ({type: 'profile/AVATAR_IS_LOADING', avatarIsLoading} as const),\r\n    toggleStatusLoading: (statusIsLoading: boolean) => ({type: 'profile/STATUS_IS_LOADING', statusIsLoading} as const),\r\n    setEditMode: (editMode: boolean) => ({type: 'profile/SET_EDIT_MODE', editMode} as const),\r\n};\r\n\r\n\r\nexport const getProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentUserProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setCurrentUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getFollowed = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getFollowed(userId);\r\n        dispatch(profileAC.setFollowed(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.getStatus(id);\r\n        dispatch(profileAC.setStatus(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setStatus(status));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: File): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleAvatarLoading(true));\r\n        const data = await profileAPI.savePhoto(photo);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setPhotos(data.data.photos));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleAvatarLoading(false));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (values: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await profileAPI.saveProfile(values)\r\n        //const id = getState().auth.id;\r\n        const id = values.userId\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(getProfile(id));\r\n        } else {\r\n            //data.messages[0]\r\n            let errorFields = {} as any;\r\n            for (let message of data.messages) {\r\n                let key = message.slice(30, message.length - 1).toLowerCase();\r\n                errorFields[key] = 'Invalid url format';\r\n            }\r\n            //dispatch(stopSubmit('profileAboutMeForm', {_error: 'error'}));\r\n            dispatch(stopSubmit('profileAboutMeForm', {'contacts': errorFields}));\r\n            return Promise.reject(data.messages[0]);\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport default profileReducer;","import {DialogType, MessageType} from \"../DAL/dialogs-api\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n    likeMe: boolean\r\n    time: string\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n}\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n}\r\n\r\nexport type FriendsValuesType = 'all' | 'true' | 'false';\r\n\r\nexport type SearchUsersParamsType = {\r\n    term: string\r\n    friend: FriendsValuesType\r\n}\r\n\r\nexport type SearchFriendsParamsType = {\r\n    term: string\r\n}\r\n\r\nexport type ViewType = 'list' | 'block'\r\n\r\nexport type DeletedMessagesType = Array<DeletedMessagesItem>\r\n\r\nexport type DeletedMessagesItem = {\r\n    dialog: DialogType\r\n    messages: Array<MessageType>\r\n}\r\n\r\nexport enum DialogsSidebarItemEnum {\r\n    all = 0,\r\n    deleted = 1,\r\n    spam = 2\r\n}\r\n\r\nexport enum ProfileSidebarItemEnum {\r\n    main = 0,\r\n    job = 1,\r\n    contacts = 2\r\n}\r\n\r\nexport enum SidebarItemEnum {\r\n    myProfile = 1,\r\n    dialogs = 2,\r\n    users = 3,\r\n    friends = 4,\r\n    settings = 5\r\n}"],"sourceRoot":""}