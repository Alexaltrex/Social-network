{"version":3,"sources":["DAL/profile-api.ts","redux/profile-reducer.ts","DAL/dialogs-api.ts","redux/dialogs-reducer.ts","redux/app-selectors.ts","redux/app-reducer.ts","hoc/withAuthRedirect.tsx","utilities/date.ts","redux/profile-selectors.ts","utilities/objects-helpers.js","DAL/users-api.ts","redux/users-reduser.ts","DAL/api.ts","redux/users-selectors.ts","Components/common/RenderCheckbox.tsx","serviceWorker.js","redux/redux-store.ts","redux/sidebar-selectors.ts","Components/Header/Header.tsx","const/const.js","Components/Sidebar/SidebarItem.tsx","Components/Sidebar/Sidebar.tsx","Components/common/RenderPasswordField.tsx","Components/Login/Login.tsx","Components/Main/Users/User.tsx","Components/common/Paginator.tsx","Components/common/RenderRadioButton.tsx","Components/Main/Users/SearchUsers.tsx","Components/Main/Users/Users.tsx","Components/Main/Friends/FriendsListItem.tsx","Components/Main/Friends/FriendsSearch.tsx","Components/Main/Friends/FriendsList.tsx","Components/Main/Friends/FriendsSidebar.tsx","Components/Main/Friends/FriendsSomethingElse.tsx","Components/Main/Friends/Friends.tsx","Components/Main/Settings/Settings.tsx","Components/Main/Main.tsx","App.tsx","AppContainer.tsx","index.js","redux/sidebar-reducer.ts","Components/common/CircularPreloader.tsx","utilities/validators/validators.ts","DAL/auth-api.ts","DAL/security-api.ts","redux/auth-reducer.ts","Components/common/RenderTextField.tsx","redux/auth-selectors.ts"],"names":["profileAPI","id","instance","get","response","data","status","put","photo","formData","FormData","append","values","userId","initialState","posts","message","likeCount","likeMe","time","profile","currentUserProfile","avatarIsLoading","statusIsLoading","editMode","currentInfoFormSidebarItem","followed","editingPost","profileAC","toggleLikeMe","postId","type","setEditingPost","setCurrentUserProfile","setFollowed","setCurrentInfoFormSidebarItem","addPost","post","DATE","dateTranslateFromJS","getCurrentDate","deletePost","setUserProfile","setStatus","setPhotos","photos","toggleAvatarLoading","toggleStatusLoading","setEditMode","getProfile","dispatch","a","appAC","toggleLoading","setLanError","getCurrentUserProfile","getFollowed","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","errorFields","messages","key","slice","length","toLowerCase","stopSubmit","Promise","reject","profileReducer","state","action","map","el","filter","dialogsAPI","body","messageId","dialogs","currentDialogsListItem","dialogsAC","setDialogs","setCurrentDialogsListItem","getDialogs","console","log","startDialog","sendMessage","getMessages","getIsMessageViewed","signMessageAsSpam","dialogsReducer","getInitialized","app","initialized","getIsLoading","isLoading","globalError","lanError","setInitialized","promise","getAuthUserData","all","then","e","appReducer","mapStateToPropsRedirect","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","Date","getMonthWord","month","date","getMonth","day","getDate","hours","getHours","minutes","getMinutes","monthWord","this","dateTranslateFromAPI","hour","getPosts","getProfileSelector","getCurrentUserProfileSelector","getStatusSelector","getAvatarIsLoading","getStatusIsLoading","getEditMode","getCurrentInfoFormSidebarItem","getFollowedSelector","getEditingPost","updateObjectInArray","items","itemId","objPropName","newObjProps","item","usersAPI","getUsers","currentPage","pageSize","searchUsers","term","friend","url","friendUrl","followUser","unfollowUser","delete","users","pageFriendsSize","totalUsersCount","totalFriendsCount","currentFriendsPage","isFollowing","followingInProgress","friends","searchUsersParams","searchFriendsParams","isFriendsSearching","showUsersFrom","currentFriendsSidebarItem","needToChangeListOfFriends","friendIdToRemove","usersAC","toggleIsFriendsSearching","setNeedToChangeListOfFriends","setCurrentFriendsSidebarItem","setFriends","setSearchFriendsParams","setSearchUsersParams","setFollow","setUnfollow","setUsers","setCurrentPage","setCurrentFriendsPage","setTotalUsersCount","setTotalFriendsCount","toggleFollowing","toggleFollowingProgress","setShowUsersFrom","totalCount","searchFriends","removeAndUpdateFriends","_followUnfollowFlow","apiMethod","actionCreator","getFollow","bind","getUnfollow","usersReducer","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","baseURL","withCredentials","headers","getUsersSelector","getFriendsSelector","getPageSize","getCurrentPage","getCurrentFriendsPage","getFollowingInProgress","getTotalUsersCount","getTotalFriendsCount","getIsFollowing","getSearchUsersParams","getSearchFriendsParams","getShowUsersFrom","getCurrentFriendsSidebarItem","getNeedToChangeListOfFriends","getFriendIdToRemove","getIsFriendsSearching","RenderCheckbox","input","label","icon","classes","useStyles","className","root","iconLeft","control","checked","value","color","onChange","makeStyles","position","left","top","transform","Boolean","window","location","hostname","match","rootReducer","combineReducers","sidebar","sidebarReducer","authReducer","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","getSidebarIsOpen","sidebarIsOpen","getCurrentSidebarItem","currentSidebarItem","theme","createStyles","appBar","transition","transitions","easing","sharp","duration","leavingScreen","backgroundColor","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","display","logo","flexGrow","login","button","borderRadius","minHeight","textTransform","paddingTop","paddingBottom","avatar","height","useStyles2","paper","Header","classes2","useSelector","getIsAuth","getLogin","useDispatch","React","useState","open","setOpen","anchorRef","useRef","handleClose","event","current","contains","target","handleListKeyDown","preventDefault","prevOpen","useEffect","focus","onSettingsClick","onLogoutClick","logout","AppBar","clsx","Toolbar","IconButton","aria-label","onClick","sidebarAC","setSidebarIsOpen","edge","Typography","variant","noWrap","Button","ref","aria-controls","undefined","aria-haspopup","small","Avatar","src","Popper","anchorEl","role","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","ListItemIcon","ListItemText","primary","component","RouterLink","SidebarItem","ownIndex","ListItem","setCurrentSidebarItem","selected","text","indigo","fontWeight","Sidebar","useTheme","Drawer","drawer","paperAnchorDockedLeft","drawerPaper","anchor","drawerHeader","direction","Divider","List","flexShrink","alignItems","padding","mixins","toolbar","justifyContent","border","RenderPasswordField","placeholder","meta","disabled","showPassword","setShowPassword","password","setPassword","FormControl","textField","InputLabel","htmlFor","outlined","OutlinedInput","outlinedInputRoot","outlinedInputInput","error","touched","invalid","endAdornment","InputAdornment","onMouseDown","iconButton","labelWidth","paddingLeft","ReduxLoginForm","reduxForm","handleSubmit","submitting","pristine","captcha","onSubmit","fieldWrapper","Field","name","RenderTextField","validate","required","shouldNotBeEmpty","size","alt","fullWidth","Login","getCaptchaSelector","Card","card","elevation","title","align","email","rememberMe","marginBottom","User","user","buttonLabel","startIcon","Grid","CardActionArea","CardContent","cardContent","CardActions","disableSpacing","cardActions","some","CircularPreloader","media","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","startPortionNumber","endPortionNumber","elements","p","buttonRoot","disableElevation","prevPortionLabelEnd","prevPortionLabel","nextPortionLabelEnd","nextPortionLabel","paginator","iconButtonRoot","paddingRight","minWidth","RenderRadioButton","labels","rest","formControlLabelElements","FormControlLabel","formControlLabel","Radio","FormLabel","formLabel","RadioGroup","radioGroup","SearchUsersReduxForm","reset","classesRadioButton","useStylesRadioButton","submit","SearchUsers","h6","divider","formValue","initialValues","marginTop","margin","flexDirection","searchPanelIsOpen","setSearchPanelIsOpen","usersElements","countTitle","Collapse","in","timeout","unmountOnExit","count","Badge","badgeContent","max","showZero","pageNumber","container","alignContent","justify","wrap","FriendsListItem","useStylesPopper","callbacks","menuItemsElements","listItem","listItemInner","listItemInnerleft","ListItemAvatar","large","Link","popper","zIndex","ReduxForm","FriendsSearch","search","FriendsList","FriendsListElements","titleleft","FriendsSidebar","Tabs","indicator","orientation","newValue","tabs","Tab","wrapper","tabRoot","labelIcon","borderLeft","right","FriendsSomethingElse","leftColumn","rightColumn","flexBasis","Settings","Dialogs","lazy","Profile","Main","content","contentShift","fallback","exact","path","render","App","initializeApp","catchAllUnhandledErrors","alert","addEventListener","removeEventListener","AppContainer","AppGlobal","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","classesAbsolute","useStylesAbsolute","classesStaticCenter","useStylesStaticCenter","classesStaticTop","useStylesStaticTop","circularWrapper","circular","bottom","maxLength","maxLength30","empty","str","test","authAPI","securityAPI","authAC","Success","CaptchaIsRequired","getCaptchaUrl","_error","custom","styles","InputProps","helperText","getId"],"mappings":"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","file":"static/js/main.a5949125.chunk.js","sourcesContent":["import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, ResponseTypeAPI} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    async getProfile(id: number) {\r\n        let response = await instance.get<ProfileType>(`profile/${id}`)\r\n        return response.data;\r\n    },\r\n    async getStatus(id: number) {\r\n        let response = await instance.get<string>(`profile/status/${id}`)\r\n        return response.data;\r\n    },\r\n    async updateStatus(status: string) {\r\n        let response = await instance.put<ResponseTypeAPI>(`profile/status`, {status: status})\r\n        return response.data;\r\n    },\r\n    async savePhoto(photo: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photo);\r\n        let response = await instance.put('profile/photo', formData);\r\n        return response.data;\r\n    },\r\n    async saveProfile(values: ProfileType) {\r\n        let response = await instance.put<ResponseTypeAPI<SavePhotoResponseDataType>>(`profile`, values)\r\n        return response.data;\r\n    },\r\n    async getFollowed(userId: number) {\r\n        let response = await instance.get<boolean>(`follow/${userId}`)\r\n        return response.data;\r\n    },\r\n};","import {FormAction, stopSubmit} from 'redux-form';\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../DAL/profile-api\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {DATE} from \"../utilities/date\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hello, world', likeCount: 4, likeMe: false, time: '25 September in 10:10'},\r\n    ] as Array<PostType>,\r\n    profile: null as null | ProfileType,\r\n    currentUserProfile: null as null | ProfileType,\r\n    status: null as null | string,\r\n    avatarIsLoading: false,\r\n    statusIsLoading: false,\r\n    editMode: false,\r\n    currentInfoFormSidebarItem: 0,\r\n    followed: null as null | boolean,\r\n    editingPost: false\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = GetActionsType<typeof profileAC>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction | AppActionsType>\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profile/TOGGLE_LIKE_ME': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(el => {\r\n                    if (el.id === action.postId) {\r\n                        return {...el, likeCount: el.likeMe ? el.likeCount - 1 : el.likeCount + 1, likeMe: !el.likeMe}\r\n                    } else {\r\n                        return el\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case 'profile/SET_EDITING_POST': {\r\n            return {...state, editingPost: action.editingPost}\r\n        }\r\n        case 'profile/SET_CURRENT_USER_PROFILE': {\r\n            return {...state, currentUserProfile: action.currentUserProfile}\r\n        }\r\n        case 'profile/SET_FOLLOWED': {\r\n            return {...state, followed: action.followed}\r\n        }\r\n        case 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM': {\r\n            return {...state, currentInfoFormSidebarItem: action.currentInfoFormSidebarItem}\r\n        }\r\n        case 'profile/SET_EDIT_MODE': {\r\n            return {...state, editMode: action.editMode}\r\n        }\r\n        case 'profile/AVATAR_IS_LOADING': {\r\n            return {...state, avatarIsLoading: action.avatarIsLoading}\r\n        }\r\n        case 'profile/STATUS_IS_LOADING': {\r\n            return {...state, statusIsLoading: action.statusIsLoading}\r\n        }\r\n        case 'profile/ADD_POST': {\r\n            let id = state.posts.length ? state.posts[state.posts.length - 1].id + 1 : 1;\r\n            return {\r\n                ...state,\r\n                posts: [\r\n                    ...state.posts,\r\n                    {\r\n                        id: id,\r\n                        message: action.post,\r\n                        likeMe: false,\r\n                        likeCount: 0,\r\n                        time: action.time\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        case 'profile/DELETE_POST': {\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.id)}\r\n        }\r\n        case 'profile/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'profile/SET_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'profile/SET_PHOTOS': {\r\n            if (state.profile) {\r\n                return {\r\n                    ...state, profile: {...state.profile, photos: action.photos}\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const profileAC = {\r\n    toggleLikeMe: (postId: number) => ({type: 'profile/TOGGLE_LIKE_ME', postId} as const),\r\n    setEditingPost: (editingPost: boolean) => ({type: 'profile/SET_EDITING_POST', editingPost} as const),\r\n    setCurrentUserProfile: (currentUserProfile: ProfileType) => ({\r\n        type: 'profile/SET_CURRENT_USER_PROFILE',\r\n        currentUserProfile\r\n    } as const),\r\n    setFollowed: (followed: null | boolean) => ({type: 'profile/SET_FOLLOWED', followed} as const),\r\n    setCurrentInfoFormSidebarItem: (currentInfoFormSidebarItem: number) => ({\r\n        type: 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM',\r\n        currentInfoFormSidebarItem\r\n    } as const),\r\n    addPost: (post: string) => ({\r\n        type: 'profile/ADD_POST',\r\n        post,\r\n        time: DATE.dateTranslateFromJS(DATE.getCurrentDate())\r\n    } as const),\r\n    deletePost: (id: number) => ({type: 'profile/DELETE_POST', id} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'profile/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\r\n    setPhotos: (photos: PhotosType) => ({type: 'profile/SET_PHOTOS', photos} as const),\r\n    toggleAvatarLoading: (avatarIsLoading: boolean) => ({type: 'profile/AVATAR_IS_LOADING', avatarIsLoading} as const),\r\n    toggleStatusLoading: (statusIsLoading: boolean) => ({type: 'profile/STATUS_IS_LOADING', statusIsLoading} as const),\r\n    setEditMode: (editMode: boolean) => ({type: 'profile/SET_EDIT_MODE', editMode} as const),\r\n};\r\n\r\n\r\nexport const getProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentUserProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setCurrentUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getFollowed = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getFollowed(userId);\r\n        dispatch(profileAC.setFollowed(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.getStatus(id);\r\n        dispatch(profileAC.setStatus(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setStatus(status));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: File): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleAvatarLoading(true));\r\n        const data = await profileAPI.savePhoto(photo);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setPhotos(data.data.photos));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleAvatarLoading(false));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (values: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await profileAPI.saveProfile(values)\r\n        //const id = getState().auth.id;\r\n        const id = values.userId\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(getProfile(id));\r\n        } else {\r\n            //data.messages[0]\r\n            let errorFields = {} as any;\r\n            for (let message of data.messages) {\r\n                let key = message.slice(30, message.length - 1).toLowerCase();\r\n                errorFields[key] = 'Invalid url format';\r\n            }\r\n            //dispatch(stopSubmit('profileAboutMeForm', {_error: 'error'}));\r\n            dispatch(stopSubmit('profileAboutMeForm', {'contacts': errorFields}));\r\n            return Promise.reject(data.messages[0]);\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport default profileReducer;","import {GetItemsType, instance, ResponseTypeAPI, ResultCodesEnum} from \"./api\";\r\nimport {FriendsValuesType, PhotosType, ProfileType} from \"../types/types\";\r\n\r\nexport const dialogsAPI = {\r\n    // получить массив пользователей с кем есть диалог\r\n    async getDialogs() {\r\n        let response = await instance.get<Array<DialogType>>(`dialogs`);\r\n        return response.data;\r\n    },\r\n\r\n    // ???\r\n    async startDialog(userId: number) {\r\n        let response = await instance.put<SendMessageType>(`dialogs/${userId}`);\r\n        return response.data;\r\n    },\r\n\r\n    // получить массив сообщений из диалога с определенный пользователем\r\n    async getMessages(userId: number) {\r\n        let response = await instance.get<GetMessagesType>(`dialogs/${userId}/messages`)\r\n        return response.data;\r\n    },\r\n\r\n    // послать сообщение пользователю\r\n    async sendMessage(userId: number, message: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/${userId}/messages`,{body: message})\r\n        return response.data;\r\n    },\r\n\r\n    // проверить просмотрено ли мое сообщение\r\n    async getIsMessageViewed(messageId: string) {\r\n        let response = await instance.get<boolean>(`dialogs/messages/${messageId}/viewed`)\r\n        return response.data;\r\n    },\r\n\r\n    // отметить сообщение как спам\r\n    async signMessageAsSpam(messageId: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/messages/${messageId}/spam`)\r\n        return response.data;\r\n    },\r\n\r\n    // удалить сообщение (только для меня, не для собеседника)\r\n    async deleteMessage(messageId: string) {\r\n        let response = await instance.delete(`dialogs/messages/${messageId}`)\r\n        return response.data;\r\n    },\r\n\r\n};\r\n\r\n//================================= TYPE =======================================\r\ntype SendMessageType = {\r\n    data: {message: MessageType}\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: ResultCodesEnum\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    body: string\r\n    translatedBody: any\r\n    addedAt: string\r\n    senderId: number\r\n    senderName: string\r\n    recipientId: number\r\n    recipientName: string\r\n    viewed: boolean\r\n    deletedBySender: boolean\r\n    deletedByRecipient: boolean\r\n    isSpam: boolean\r\n    distributionId: any\r\n}\r\n\r\ntype GetMessagesType = {\r\n    items: Array<MessageType>\r\n    totalCount: number\r\n    error: any\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    userName: string\r\n    hasNewMessages: boolean\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: PhotosType\r\n}\r\n\r\n","import {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {usersAPI} from \"../DAL/users-api\";\r\nimport {usersAC} from \"./users-reduser\";\r\nimport {dialogsAPI, DialogType, MessageType} from \"../DAL/dialogs-api\";\r\nimport {profileAPI} from \"../DAL/profile-api\";\r\nimport {profileAC} from \"./profile-reducer\";\r\n\r\n\r\nlet initialState = {\r\n    dialogs: null as null | Array<DialogType>,\r\n    currentDialogsListItem: 1,\r\n    messages: null as null | Array<MessageType>,\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype DialogsActionsType = GetActionsType<typeof dialogsAC>\r\ntype ThunkType = BaseThunkType<DialogsActionsType | AppActionsType>\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'dialogs/SET_DIALOGS': {\r\n            return {...state, dialogs: action.dialogs}\r\n        }\r\n        case 'dialogs/SET_CURRENT_DIALOGS_LIST_ITEM': {\r\n            return {...state, currentDialogsListItem: action.currentDialogsListItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const dialogsAC = {\r\n    setDialogs: (dialogs: Array<DialogType>) => ({type: 'dialogs/SET_DIALOGS', dialogs} as const),\r\n    setCurrentDialogsListItem: (currentDialogsListItem: number) => ({type: 'dialogs/SET_CURRENT_DIALOGS_LIST_ITEM', currentDialogsListItem} as const)\r\n};\r\n\r\nexport const getDialogs = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await dialogsAPI.getDialogs();\r\n        console.log(data)\r\n        dispatch(dialogsAC.setDialogs(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const startDialog = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(appAC.toggleLoading(true));\r\n        let data = await dialogsAPI.startDialog(userId);\r\n        console.log(data)\r\n        //dispatch(usersAC.setUsers(data.items));\r\n        //dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const sendMessage = (userId: number, message: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await dialogsAPI.sendMessage(userId, message);\r\n        console.log(data)\r\n        // if (data.resultCode === 0) {\r\n        //     dispatch(profileAC.setStatus(status));\r\n        // }\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const getMessages = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await dialogsAPI.getMessages(userId);\r\n        console.log(data)\r\n        // if (data.resultCode === 0) {\r\n        //     dispatch(profileAC.setStatus(status));\r\n        // }\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const getIsMessageViewed = (messageId: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await dialogsAPI.getIsMessageViewed(messageId);\r\n        console.log(data)\r\n        // if (data.resultCode === 0) {\r\n        //     dispatch(profileAC.setStatus(status));\r\n        // }\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const signMessageAsSpam = (messageId: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await dialogsAPI.signMessageAsSpam(messageId);\r\n        console.log(data)\r\n        // if (data.resultCode === 0) {\r\n        //     dispatch(profileAC.setStatus(status));\r\n        // }\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const deleteMessage = (messageId: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await dialogsAPI.deleteMessage(messageId);\r\n        console.log(data)\r\n        // if (data.resultCode === 0) {\r\n        //     dispatch(profileAC.setStatus(status));\r\n        // }\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\n\r\nexport default dialogsReducer;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getInitialized = (state: StateType) => state.app.initialized;\r\nexport const getIsLoading = (state: StateType) => state.app.isLoading;\r\nexport const getLanError = (state: StateType) => state.app.lanError;","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>;\r\ntype ThunkType = BaseThunkType<AppActionsType>\r\n\r\nlet initialState = {\r\n    initialized: true,\r\n    globalError: null,\r\n    isLoading: false,\r\n    lanError: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZED_SUCCESS':\r\n            return {...state, initialized: true};\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        };\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setInitialized: () => ({type: 'APP/INITIALIZED_SUCCESS'} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n};\r\n\r\nexport const getInitialized = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let promise = dispatch(getAuthUserData());\r\n        // dispatch(somethingElse());\r\n        // dispatch(somethingElse());\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(appAC.setInitialized());\r\n            })\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport default appReducer;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsRedirect = (state: StateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n       let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, StateType>(mapStateToPropsRedirect)(RedirectComponent);\r\n};","export const DATE = {\r\n    // получение текущей даты\r\n    // RETURN - JS DATE\r\n    getCurrentDate() {\r\n        return new Date();\r\n    },\r\n\r\n    getMonthWord(month: number) {\r\n        switch (month) {\r\n            case 1: {\r\n                return 'January';\r\n            }\r\n            case 2: {\r\n                return 'February';\r\n            }\r\n            case 3: {\r\n                return 'March';\r\n            }\r\n            case 4: {\r\n                return 'April';\r\n            }\r\n            case 5: {\r\n                return 'May';\r\n            }\r\n            case 6: {\r\n                return 'June';\r\n            }\r\n            case 7: {\r\n                return 'July';\r\n            }\r\n            case 8: {\r\n                return 'August';\r\n            }\r\n            case 9: {\r\n                return 'September';\r\n            }\r\n            case 10: {\r\n                return 'October';\r\n            }\r\n            case 11: {\r\n                return 'November';\r\n            }\r\n            case 12: {\r\n                return 'December';\r\n            }\r\n        }\r\n    },\r\n\r\n    dateTranslateFromJS(date: Date) {\r\n        let month = date.getMonth() + 1;\r\n        let day = date.getDate();\r\n        let hours = date.getHours() as number | string;\r\n        let minutes = date.getMinutes() as number | string;\r\n\r\n        if (hours < 10) {\r\n            hours = `0${hours}`\r\n        };\r\n\r\n        if (minutes < 10) {\r\n            minutes = `0${minutes}`\r\n        };\r\n\r\n        let monthWord = this.getMonthWord(+month);\r\n        return `${day} ${monthWord} in ${hours}:${minutes}`;\r\n    },\r\n\r\n    dateTranslateFromAPI(date: string) {\r\n        const year = date.slice(0, 4);\r\n        const month = date.slice(5, 7);\r\n        const monthWord = this.getMonthWord(+month);\r\n        const day = date.slice(8, 10);\r\n        const hour = date.slice(11, 13);\r\n        const minutes = date.slice(14, 16);\r\n        return `${day} ${monthWord} in ${hour}:${minutes}`\r\n    }\r\n\r\n\r\n}","import {StateType} from \"./redux-store\";\r\n\r\nexport const getPosts = (state: StateType) => state.profile.posts;\r\nexport const getProfileSelector = (state: StateType) => state.profile.profile;\r\nexport const getCurrentUserProfileSelector = (state: StateType) => state.profile.currentUserProfile;\r\nexport const getStatusSelector = (state: StateType) => state.profile.status;\r\nexport const getAvatarIsLoading = (state: StateType) => state.profile.avatarIsLoading;\r\nexport const getStatusIsLoading = (state: StateType) => state.profile.statusIsLoading;\r\nexport const getEditMode = (state: StateType) => state.profile.editMode;\r\nexport const getCurrentInfoFormSidebarItem = (state: StateType) => state.profile.currentInfoFormSidebarItem;\r\nexport const getFollowedSelector = (state: StateType) => state.profile.followed;\r\nexport const getEditingPost = (state: StateType) => state.profile.editingPost;\r\n\r\n\r\n\r\n\r\n","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(item => {\r\n        if (item[objPropName] === itemId) {\r\n            return {...item, ...newObjProps}\r\n        }\r\n        return item;\r\n    })\r\n};","import {GetItemsType, instance, ResponseTypeAPI} from \"./api\";\r\nimport {FriendsValuesType} from \"../types/types\";\r\n\r\nexport const usersAPI = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        let response = await instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`);\r\n        return response.data;\r\n    },\r\n\r\n    async searchUsers(currentPage = 1, pageSize = 10, term: string, friend: FriendsValuesType) {\r\n        let url = `users?page=${currentPage}&count=${pageSize}`;\r\n        if (term) url = url + `&term=${term}`;\r\n        let friendUrl;\r\n        if (friend === 'all') {\r\n            friendUrl = ''\r\n        } else {\r\n            friendUrl = `&friend=${friend}`\r\n        }\r\n        url = url + friendUrl;\r\n        let response = await instance.get<GetItemsType>(url);\r\n        return response.data;\r\n    },\r\n\r\n    async followUser(id: number) {\r\n        let response = await instance.post<ResponseTypeAPI>(`follow/${id}`)\r\n        return response.data;\r\n    },\r\n    async unfollowUser(id: number) {\r\n        let response = await instance.delete(`follow/${id}`) //as AxiosResponse<any>\r\n                return response.data as Promise<ResponseTypeAPI>;\r\n      },\r\n    // async getProfile(id: number) {\r\n    //     let response = await instance.get<>(`profile/${id}`)\r\n    //     return response.data;\r\n    // }\r\n};\r\n\r\n//================================= TYPE =======================================\r\ntype friendType = 'all' | 'friend' | 'not friend';\r\n","import {updateObjectInArray} from \"../utilities/objects-helpers\";\r\nimport {\r\n    FriendsValuesType, SearchFriendsParamsType,\r\n    SearchUsersParamsType,\r\n    UserType\r\n} from \"../types/types\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../DAL/users-api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    users: null as null | Array<UserType>,\r\n    pageSize: 10,\r\n    pageFriendsSize: 10,\r\n    totalUsersCount: 0,\r\n    totalFriendsCount: 0,\r\n    currentPage: 1,\r\n    currentFriendsPage: 1,\r\n    isLoading: false,\r\n    isFollowing: false,\r\n    // массив пользователей, для которых послан запрос на подписку/отписку\r\n    followingInProgress: [] as Array<number>,\r\n    friends: null as null | Array<UserType>,\r\n    searchUsersParams: {term: '', friend: 'all'} as SearchUsersParamsType,\r\n    searchFriendsParams: {term: ''} as SearchFriendsParamsType,\r\n    isFriendsSearching: false,\r\n    showUsersFrom: 'all' as 'all' | 'search',\r\n    currentFriendsSidebarItem: 0,\r\n    needToChangeListOfFriends: false,\r\n    friendIdToRemove: null as null | number\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'USERS/TOGGLE_IS_FRIENDS_SEARCHING': {\r\n            return {...state, isFriendsSearching: action.isFriendsSearching}\r\n        }\r\n        case 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS': {\r\n            return {...state,\r\n                needToChangeListOfFriends: action.needToChangeListOfFriends,\r\n                friendIdToRemove: action.friendIdToRemove\r\n            }\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM': {\r\n            return {...state, currentFriendsSidebarItem: action.currentFriendsSidebarItem}\r\n        }\r\n        case 'USERS/SET_FRIENDS': {\r\n            return {...state, friends: action.friends}\r\n        }\r\n        case 'USERS/SET_SHOW_USERS_FROM': {\r\n            return {...state, showUsersFrom: action.showUsersFrom}\r\n        }\r\n        case 'USERS/SET_SEARCH_FRIENDS_PARAMS': {\r\n            return {...state, searchFriendsParams: action.searchFriendsParams}\r\n        }\r\n        case 'USERS/SET_SEARCH_USERS_PARAMS': {\r\n            return {...state, searchUsersParams: action.searchUsersParams}\r\n        }\r\n        case 'USERS/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        }\r\n        case 'USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        }\r\n        case 'USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage};\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_PAGE': {\r\n            return {...state, currentFriendsPage: action.currentFriendsPage};\r\n        }\r\n        case 'USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        }\r\n        case 'USERS/SET_TOTAL_FRIENDS_COUNT': {\r\n            return {...state, totalFriendsCount: action.totalFriendsCount};\r\n        }\r\n        case 'USERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING': {\r\n            return {...state, isFollowing: action.isFollowing}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                // если запрос на подписку-отписку послан - добавить в массив, иначе удалить из массива\r\n                followingInProgress:\r\n                    action.followingInProgress\r\n                        ? [...state.followingInProgress, action.id]\r\n                        : state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const usersAC = {\r\n    toggleIsFriendsSearching: (isFriendsSearching: boolean) => ({type: 'USERS/TOGGLE_IS_FRIENDS_SEARCHING', isFriendsSearching} as const),\r\n    setNeedToChangeListOfFriends: (needToChangeListOfFriends: boolean, friendIdToRemove: number | null) => ({\r\n        type: 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS',\r\n        needToChangeListOfFriends,\r\n        friendIdToRemove\r\n    } as const),\r\n    setCurrentFriendsSidebarItem: (currentFriendsSidebarItem: number) => ({\r\n        type: 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM',\r\n        currentFriendsSidebarItem\r\n    } as const),\r\n    setFriends: (friends: Array<UserType>) => ({type: 'USERS/SET_FRIENDS', friends} as const),\r\n    setSearchFriendsParams: (searchFriendsParams: SearchFriendsParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_FRIENDS_PARAMS',\r\n        searchFriendsParams\r\n    } as const),\r\n    setSearchUsersParams: (searchUsersParams: SearchUsersParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_USERS_PARAMS',\r\n        searchUsersParams\r\n    } as const),\r\n    setFollow: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    setUnfollow: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setCurrentFriendsPage: (currentFriendsPage: number) => ({type: 'USERS/SET_CURRENT_FRIENDS_PAGE', currentFriendsPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'USERS/SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n    setTotalFriendsCount: (totalFriendsCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_FRIENDS_COUNT',\r\n        totalFriendsCount\r\n    } as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'USERS/TOGGLE_LOADING', isLoading} as const),\r\n    toggleFollowing: (isFollowing: boolean) => ({type: 'USERS/TOGGLE_FOLLOWING', isFollowing} as const),\r\n    toggleFollowingProgress: (followingInProgress: boolean, id: number) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        followingInProgress,\r\n        id\r\n    } as const),\r\n    setShowUsersFrom: (showUsersFrom: 'all' | 'search') => ({type: 'USERS/SET_SHOW_USERS_FROM', showUsersFrom} as const),\r\n    };\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize);\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchUsers = (currentPage: number, pageSize: number, term: string, friend: FriendsValuesType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, friend);\r\n        console.log('searchUsers')\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchFriends = (currentPage: number, pageSize: number, term: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleIsFriendsSearching(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, 'true');\r\n        dispatch(usersAC.setFriends(data.items));\r\n        dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleIsFriendsSearching(false));\r\n    }\r\n};\r\n\r\nexport const removeAndUpdateFriends = (currentPage: number, pageSize: number, id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(true, id));\r\n        let dataFromUnfollow = await usersAPI.unfollowUser(id);\r\n        if (dataFromUnfollow.resultCode === 0) {\r\n            let data = await usersAPI.searchUsers(currentPage, pageSize, '', 'true');\r\n            dispatch(usersAC.setFriends(data.items));\r\n            dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n            dispatch(usersAC.setNeedToChangeListOfFriends(false, null));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(false, id));\r\n    }\r\n};\r\n\r\n\r\ntype FollowUnfollwType = UsersActionsType;//followType | unfollowType\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   id: number,\r\n                                   apiMethod: any,\r\n                                   actionCreator: (id: number) => FollowUnfollwType) => {\r\n    dispatch(usersAC.toggleFollowing(true));\r\n    dispatch(usersAC.toggleFollowingProgress(true, id));\r\n    let data = await apiMethod(id)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(usersAC.toggleFollowingProgress(false, id));\r\n};\r\n\r\nexport const getFollow = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        await _followUnfollowFlow(dispatch, id, usersAPI.followUser.bind(id), usersAC.setFollow);\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(false));\r\n    }\r\n\r\n};\r\n\r\nexport const getUnfollow = (id: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, id, usersAPI.unfollowUser.bind(id), usersAC.setUnfollow);\r\n};\r\n\r\nexport default usersReducer;\r\n\r\n//============================ TYPES ==============================================\r\nexport type initialStateType = typeof initialState;\r\ntype UsersActionsType = GetActionsType<typeof usersAC>\r\ntype DispatchType = Dispatch<UsersActionsType>\r\ntype ThunkType = BaseThunkType<UsersActionsType | AppActionsType>","// DAL - уровень доступа к данным\r\n// упрощенный (через коллбэки) доступ к данным на сервере\r\nimport axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e09d6375-5dac-4dde-95ca-700e186a8f7d'\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseTypeAPI<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","import {StateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: StateType) => state.users.users;\r\nexport const getFriendsSelector = (state: StateType) => state.users.friends;\r\nexport const getPageSize = (state: StateType) => state.users.pageSize;\r\nexport const getCurrentPage = (state: StateType) => state.users.currentPage;\r\nexport const getCurrentFriendsPage = (state: StateType) => state.users.currentFriendsPage;\r\nexport const getFollowingInProgress = (state: StateType) => state.users.followingInProgress;\r\nexport const getTotalUsersCount = (state: StateType) => state.users.totalUsersCount;\r\nexport const getTotalFriendsCount = (state: StateType) => state.users.totalFriendsCount;\r\nexport const getIsLoading = (state: StateType) => state.users.isLoading;\r\nexport const getIsFollowing = (state: StateType) => state.users.isFollowing;\r\nexport const getSearchUsersParams = (state: StateType) => state.users.searchUsersParams;\r\nexport const getSearchFriendsParams = (state: StateType) => state.users.searchFriendsParams;\r\nexport const getShowUsersFrom = (state: StateType) => state.users.showUsersFrom;\r\nexport const getCurrentFriendsSidebarItem = (state: StateType) => state.users.currentFriendsSidebarItem;\r\nexport const getNeedToChangeListOfFriends = (state: StateType) => state.users.needToChangeListOfFriends;\r\nexport const getFriendIdToRemove = (state: StateType) => state.users.friendIdToRemove;\r\nexport const getIsFriendsSearching = (state: StateType) => state.users.isFriendsSearching;\r\n\r\n\r\n\r\n","import {FormControlLabel} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderCheckbox: React.FC<PropsType> = (props) => {\r\n    const {input, label, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {icon && <div className={classes.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={input.value ? true : false}\r\n                        color=\"primary\"\r\n                        onChange={input.onChange}\r\n                    />\r\n                }\r\n                label={label}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RenderCheckbox\r\n\r\n//======================== TYPES ============================\r\ntype PropsType = {\r\n    icon?: React.ReactElement\r\n    label: string\r\n    input: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\n// объединяем редьюсеры в объект\r\nlet rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getSidebarIsOpen = (state: StateType) => state.sidebar.sidebarIsOpen;\r\nexport const getCurrentSidebarItem = (state: StateType) => state.sidebar.currentSidebarItem;","import React from 'react';\r\nimport {drawerWidth} from \"../../const/const\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {AppBar} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsAuth, getLogin} from \"../../redux/auth-selectors\";\r\nimport {getSidebarIsOpen} from \"../../redux/sidebar-selectors\";\r\nimport {getProfileSelector} from \"../../redux/profile-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            backgroundColor: 'darkRed'\r\n        },\r\n        appBarShift: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        logo: {\r\n            flexGrow: 1\r\n        },\r\n        login: {\r\n            marginRight: 10\r\n        },\r\n        button: {\r\n            '&:hover': {\r\n                backgroundColor: 'rgba(0,0,0,0.3)',\r\n                borderRadius: 0,\r\n                minHeight: 64\r\n            },\r\n            textTransform: 'none',\r\n            paddingTop: 0,\r\n            paddingBottom: 0\r\n        },\r\n        label: {\r\n            minHeight: 64\r\n        },\r\n        avatar: {\r\n            width: 50,\r\n            height: 50,\r\n            marginRight: 10\r\n        },\r\n\r\n\r\n    }),\r\n);\r\n\r\nconst useStyles2 = makeStyles({\r\n    paper: {\r\n        backgroundColor: 'green'\r\n    }\r\n})\r\n\r\nconst Header: React.FC = () => {\r\n    const classes = useStyles();\r\n    const classes2 = useStyles2();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const sidebarIsOpen = useSelector(getSidebarIsOpen);\r\n    const login = useSelector(getLogin);\r\n    const profile = useSelector(getProfileSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDrawerOpen = () => {\r\n        dispatch(sidebarAC.setSidebarIsOpen(true));\r\n    };\r\n\r\n    //===================================================================================\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //=========================================================================\r\n    const onSettingsClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event)\r\n    };\r\n    const onLogoutClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event);\r\n        dispatch(logout());\r\n    }\r\n    //==================================================================================\r\n\r\n\r\n    return (\r\n        <AppBar\r\n            position=\"fixed\"\r\n            classes={{\r\n               root: classes2.paper\r\n            }}\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: sidebarIsOpen,\r\n            })}\r\n\r\n        >\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={handleDrawerOpen}\r\n                    edge=\"start\"\r\n                    className={clsx(classes.menuButton, sidebarIsOpen && classes.hide)}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" noWrap className={classes.logo}>\r\n                    Social Network\r\n                </Typography>\r\n\r\n                {\r\n                    isAuth\r\n                        ? <>\r\n                            <Button\r\n                                ref={anchorRef}\r\n                                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleToggle}\r\n                                classes={{\r\n                                    root: classes.button,\r\n                                    label: classes.label\r\n                                }}\r\n                                color=\"inherit\">\r\n                                <Typography variant=\"subtitle1\" noWrap className={classes.login}>\r\n                                    {login}\r\n                                </Typography>\r\n                                {profile && profile.photos.small\r\n                                    ? <Avatar src={profile.photos.small} className={classes.avatar}/>\r\n                                    : <Avatar className={classes.avatar}/>}\r\n                                <ExpandMoreIcon/>\r\n                            </Button>\r\n                            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n                                {({TransitionProps, placement}) => (\r\n                                    <Grow\r\n                                        {...TransitionProps}\r\n                                        style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                    >\r\n                                        <Paper>\r\n                                            <ClickAwayListener onClickAway={handleClose}>\r\n\r\n                                                <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                          onKeyDown={handleListKeyDown}>\r\n                                                    <MenuItem onClick={onSettingsClick}>\r\n                                                        <ListItemIcon>\r\n                                                            <SettingsIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary=\"Settings\"/>\r\n                                                    </MenuItem>\r\n                                                    <MenuItem onClick={onLogoutClick}>\r\n                                                        <ListItemIcon>\r\n                                                            <ExitToAppIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary=\"Logout\"/>\r\n                                                    </MenuItem>\r\n                                                </MenuList>\r\n                                            </ClickAwayListener>\r\n                                        </Paper>\r\n                                    </Grow>\r\n                                )}\r\n                            </Popper>\r\n                        </>\r\n                        : <Button color=\"inherit\" component={RouterLink} to='/login'>\r\n                            Войти\r\n                        </Button>\r\n                }\r\n\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","export const drawerWidth = 180;","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {profileAC} from \"../../redux/profile-reducer\";\r\nimport {usersAC} from \"../../redux/users-reduser\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\nimport {getCurrentSidebarItem} from \"../../redux/sidebar-selectors\";\r\n\r\nconst SidebarItem: React.FC<PropsTypes> = (props) => {\r\n    const {to, primary, icon, ownIndex} = props;\r\n    const classes = useStyles();\r\n    const currentSidebarItem = useSelector(getCurrentSidebarItem)\r\n    const dispatch = useDispatch();\r\n\r\n    const onClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(ownIndex));\r\n        dispatch(profileAC.setEditMode(false));\r\n        dispatch(usersAC.setShowUsersFrom('all'));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n        dispatch(usersAC.setSearchFriendsParams({term: ''}));\r\n    };\r\n\r\n\r\n    return (\r\n        <li>\r\n            <ListItem\r\n                onClick={onClick}\r\n                selected={ownIndex === currentSidebarItem}\r\n                button\r\n                component={RouterLink}\r\n                to={to}>\r\n                {\r\n                    icon\r\n                        ? <ListItemIcon className={clsx(ownIndex === currentSidebarItem && classes.icon)}>\r\n                            {icon}\r\n                        </ListItemIcon>\r\n                        : null\r\n                }\r\n                <ListItemText primary={primary} className={clsx(ownIndex === currentSidebarItem && classes.text)}/>\r\n            </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;\r\n\r\n//============================== TYPES ==================================\r\ntype PropsTypes = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\n//============================== STYLES ===================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    icon: {\r\n        color: indigo[500]\r\n    },\r\n    text: {\r\n        color: indigo[600],\r\n        fontWeight: 900\r\n    }\r\n}));","import React from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SupervisedUserCircleIcon from '@material-ui/icons/SupervisedUserCircle';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {drawerWidth} from \"../../const/const\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getSidebarIsOpen} from \"../../redux/sidebar-selectors\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nconst Sidebar: React.FC = () => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const sidebarIsOpen = useSelector(getSidebarIsOpen);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDrawerClose = () => {\r\n        dispatch(sidebarAC.setSidebarIsOpen(false));\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            classes={{\r\n                root: classes.root,\r\n                paperAnchorDockedLeft: classes.paperAnchorDockedLeft,\r\n                paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={sidebarIsOpen}\r\n        >\r\n            <div className={classes.drawerHeader}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                    {theme.direction === 'ltr' ? <ChevronLeftIcon/> : <ChevronRightIcon/>}\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <List>\r\n                <SidebarItem ownIndex={1} to={\"/profile\"} primary={'My profile'} icon={<HomeIcon/>}/>\r\n                <SidebarItem ownIndex={2} to={\"/dialogs\"} primary={'Dialogs'} icon={<ChatIcon/>}/>\r\n                <SidebarItem ownIndex={3} to={\"/users\"} primary={'Users'} icon={<SupervisedUserCircleIcon/>}/>\r\n                <SidebarItem ownIndex={4} to={\"/friends\"} primary={'Friends'} icon={<AccountCircleIcon/>}/>\r\n                <SidebarItem ownIndex={5} to={\"/settings\"} primary={'Settings'} icon={<SettingsIcon/>}/>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        backgroundColor: indigo[50],\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    paperAnchorDockedLeft: {\r\n        border: 0\r\n    }\r\n}));","import React, {ChangeEvent, SyntheticEvent, useState} from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst RenderPasswordField: React.FC<PropsType> = (props) => {\r\n    const {label, input, placeholder, meta, disabled} = props;\r\n    const classes = useStyles();\r\n\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [password, setPassword] = useState('')\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value);\r\n    };\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LockIcon className={classes.iconLeft}/>\r\n\r\n            <FormControl className={classes.textField}\r\n                         variant=\"outlined\">\r\n\r\n                <InputLabel htmlFor=\"outlined-adornment-password\" classes={{\r\n                    outlined: classes.outlined\r\n                }}>{label}</InputLabel>\r\n\r\n                <OutlinedInput\r\n                    //className={classes.input}\r\n                    classes={{\r\n                        root: classes.outlinedInputRoot,\r\n                        input: classes.outlinedInputInput\r\n                    }}\r\n                    disabled={disabled}\r\n                    id=\"outlined-adornment-password\"\r\n                    placeholder={placeholder}\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    value={password}\r\n                    error={meta.touched && meta.invalid}\r\n                    onChange={handleChange}\r\n\r\n                    {...input}\r\n\r\n\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={handleClickShowPassword}\r\n                                onMouseDown={handleMouseDownPassword}\r\n                                edge=\"end\"\r\n                                className={classes.iconButton}\r\n                            >\r\n                                {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                    labelWidth={73}\r\n                />\r\n\r\n                {meta.touched && meta.invalid && <Typography color='error' variant='caption' className={classes.error}>\r\n                    {meta.error}\r\n                </Typography>}\r\n\r\n            </FormControl>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RenderPasswordField;\r\n\r\n//=============================== TYPES =================================\r\ntype PropsType = {\r\n    label: string\r\n    input: any\r\n    placeholder: string\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    disabled: boolean\r\n}\r\n\r\n//=============================== STYLES ================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        width: '100%'\r\n    },\r\n    iconLeft: {\r\n        position: 'absolute',\r\n        left: -5,\r\n        top: '50%',\r\n        transform: 'translate(-100%, -50%)'\r\n    },\r\n    textField: {\r\n        width: '100%'\r\n    },\r\n    error: {\r\n        paddingLeft: 14,\r\n        paddingTop: 2\r\n    },\r\n    outlinedInputRoot: {\r\n        //height: 40,\r\n        width: '100%'\r\n    },\r\n    outlinedInputInput: {\r\n        height: 40,\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    outlined: {\r\n        transform: 'translate(14px, 12px) scale(1)'\r\n    },\r\n    iconButton: {\r\n        padding: 8\r\n    }\r\n\r\n});","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required, shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getCaptchaSelector, getIsAuth} from \"../../redux/auth-selectors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport RenderTextField from \"../common/RenderTextField\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderPasswordField from \"../common/RenderPasswordField\";\r\nimport RenderCheckbox from \"../common/RenderCheckbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n//=================================== Form =========================================\r\nconst LoginForm: React.FC<LoginFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, error, captcha} = props;\r\n    const classes = useStyles();\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name='email'\r\n                   component={RenderTextField}\r\n                   icon={<MailOutlineIcon/>}\r\n                   className={classes.textField}\r\n                   validate={[required, shouldNotBeEmpty]}\r\n                   label='email'\r\n                   size='small'\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field\r\n                name='password'\r\n                //disabled={isLoading}\r\n                className={classes.textField}\r\n                component={RenderPasswordField}\r\n                placeholder='Enter your password'\r\n                label='Password'\r\n                validate={[required, shouldNotBeEmpty]}\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name=\"rememberMe\" component={RenderCheckbox} label=\"Remember me\"/>\r\n        </div>\r\n\r\n        {\r\n            captcha\r\n            && <>\r\n                <div className={classes.fieldWrapper}>\r\n                    <img src={captcha} alt=\"\"/>\r\n                </div>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field\r\n                        name='captcha'\r\n                        //disabled={isLoading}\r\n                        className={classes.textField}\r\n                        component={RenderTextField}\r\n                        placeholder='Enter symbols from image'\r\n                        label='Captcha'\r\n                        validate={[required, shouldNotBeEmpty]}\r\n                        size='small'\r\n                    />\r\n                </div>\r\n            </>\r\n        }\r\n\r\n        {error && !pristine &&\r\n        <Typography color='error' variant='h6' className={classes.fieldWrapper}>\r\n            {error}\r\n        </Typography>}\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Button type=\"submit\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    fullWidth={true}\r\n                    size='large'\r\n                    className={classes.button}\r\n                    disabled={submitting || pristine}>\r\n                Enter\r\n            </Button>\r\n        </div>\r\n\r\n    </form>\r\n};\r\n\r\n/////////////////////-ReduxLoginForm-////////////////////////////////////////\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n\r\n//========================= COMPONENT =============================================================\r\nconst Login: React.FC = () => {\r\n    const classes = useStyles();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const captcha = useSelector(getCaptchaSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (values: LoginFormValuesType) => {\r\n        dispatch(login(values.email, values.password, values.rememberMe, values.captcha));\r\n    };\r\n    if (isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.card} elevation={6}>\r\n                <Typography\r\n                    className={classes.title}\r\n                    align='center'\r\n                    color='primary'\r\n                    variant='h5'\r\n                >\r\n                    Enter in your profile\r\n                </Typography>\r\n\r\n                <ReduxLoginForm onSubmit={onSubmit}\r\n                                captcha={captcha}/>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Login;\r\n\r\n//========================== TYPES ===============================\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\ntype LoginFormPropsType = InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps;\r\n\r\n//========================== STYLES ==============================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        width: 500,\r\n        padding: '15px 30px 15px 10px',\r\n        borderRadius: 10\r\n    },\r\n    error: {\r\n        width: 300,\r\n        marginBottom: 10,\r\n    },\r\n    textField: {\r\n\r\n        width: '100%',\r\n    },\r\n    fieldWrapper: {\r\n        marginLeft: 35,\r\n        marginBottom: 10\r\n    },\r\n    button: {\r\n        //marginBottom: 10,\r\n    },\r\n    title: {\r\n        marginBottom: 20\r\n    }\r\n});\r\n\r\n\r\n","import React from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\n\r\nconst User: React.FC<PropType> = ({user}) => {\r\n    const classes = useStyles();\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const dispatch = useDispatch();\r\n    const src = user.photos.small;\r\n\r\n    const onFollowUnfollowClick = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n    const buttonLabel = user.followed ? 'UnFollow' : 'Follow';\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card elevation={6} className={classes.root}>\r\n                <CardActionArea component={RouterLink}\r\n                                to={`/users/${user.id}`}>\r\n                    <Avatar className={classes.avatar}\r\n                            src={src ? src : undefined}\r\n                            variant=\"rounded\"/>\r\n                </CardActionArea>\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography color='primary'\r\n                                variant='subtitle2'\r\n                                align='center'>\r\n                        {user.name}\r\n                    </Typography>\r\n                    <Typography //color='primary'\r\n                        variant='body2'\r\n                        align='center'>\r\n                        {user.status}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions disableSpacing className={classes.cardActions}>\r\n                    <Button className={classes.button}\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size='small'\r\n                            fullWidth\r\n                            disabled={followingInProgress.some(item => item === user.id)}\r\n                            onClick={onFollowUnfollowClick}\r\n                            startIcon={startIcon}\r\n                    >\r\n                        {buttonLabel}\r\n                    </Button>\r\n                    {\r\n                        isFollowing\r\n                        && followingInProgress.some(item => item === user.id)\r\n                        &&\r\n                        <CircularPreloader size={20} style={'absolute'}/>\r\n                    }\r\n                </CardActions>\r\n\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default User;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n        padding: 10\r\n    },\r\n    media: {\r\n        height: 150,\r\n        borderRadius: 5\r\n    },\r\n    avatar: {\r\n        width: 150,\r\n        height: 150,\r\n    },\r\n    cardContent: {\r\n        padding: 5\r\n    },\r\n    cardActions: {\r\n        padding: 0,\r\n        position: 'relative'\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    }\r\n});","import React, {useState} from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    const classes = useStyles();\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);// число страниц\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i < pagesCount + 1; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize); // число порций (блоков) страниц\r\n    let [portionNumber, setPortionNumber] = useState(1);// текущий номер порции (начинается с 1)\r\n    let startPortionNumber = (portionNumber - 1) * portionSize + 1; // номер первого элемента в порции\r\n    let endPortionNumber = portionNumber * portionSize; // номер последнего элемента в порции\r\n\r\n    const setPrevPortion = () => {\r\n        setPortionNumber(portionNumber - 1);\r\n        onPageChanged((portionNumber - 2) * portionSize + 1);\r\n    };\r\n\r\n    const setNextPortion = () => {\r\n        setPortionNumber(portionNumber + 1);\r\n        onPageChanged((portionNumber) * portionSize + 1);\r\n    };\r\n\r\n    const setFirstPortion = () => {\r\n        setPortionNumber(1);\r\n        onPageChanged(1);\r\n    };\r\n\r\n    const setLastPortion = () => {\r\n        setPortionNumber(portionCount);\r\n        //onPageChanged((portionCount - 1) * portionSize + 1);\r\n        onPageChanged(pagesCount);\r\n    };\r\n\r\n    const elements = pages\r\n        .filter(p => p >= startPortionNumber && p <= endPortionNumber)\r\n        .map(p => (\r\n                <Button\r\n                    className={classes.buttonRoot}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p)\r\n                    }}\r\n                    size='small'\r\n                    color='primary'\r\n                    disableElevation\r\n                    variant={p === currentPage ? 'contained' : \"outlined\"}\r\n                >\r\n                    {p}\r\n                </Button>\r\n            )\r\n        );\r\n\r\n    const prevPortionLabelStart = (portionNumber - 2) * pageSize + 1;\r\n    const prevPortionLabelEnd = (portionNumber - 1) * pageSize;\r\n    const prevPortionLabel = `${prevPortionLabelStart}...${prevPortionLabelEnd}`;\r\n\r\n    const nextPortionLabelStart = portionNumber * pageSize + 1;\r\n    const nextPortionLabelEnd = (portionNumber < portionCount - 1) ? (portionNumber + 1) * pageSize : pagesCount;\r\n    const nextPortionLabel = `${nextPortionLabelStart}...${nextPortionLabelEnd}`;\r\n\r\n    return (\r\n        <div className={classes.paginator}>\r\n\r\n            {portionNumber > 1 &&\r\n            <IconButton onClick={setFirstPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <FirstPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n            {portionNumber > 1 && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setPrevPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {prevPortionLabel}\r\n            </Button>}\r\n\r\n            {elements}\r\n\r\n            {portionNumber < portionCount && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setNextPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {nextPortionLabel}\r\n            </Button>}\r\n\r\n            {portionNumber < portionCount &&\r\n            <IconButton onClick={setLastPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <LastPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n        </div>)\r\n};\r\n\r\nexport default Paginator;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    paginator: {\r\n        //marginBottom: 10,\r\n    },\r\n    buttonRoot: {\r\n        marginRight: 5,\r\n        paddingLeft: 3,\r\n        paddingRight: 3,\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        minWidth: 24\r\n    },\r\n    iconButtonRoot: {\r\n        borderRadius: 4,\r\n        border: '1px solid rgba(63, 81, 181, 0.5)',\r\n        marginRight: 5,\r\n        padding: 0,\r\n        color: indigo[500]\r\n    },\r\n    icon: {\r\n        width: 22.4,\r\n        height: 22.4\r\n    }\r\n})\r\n","import {FormControl} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\n\r\nconst RenderRadioButton: React.FC<PropsType> = (props) => {\r\n    const {labels, value, input, classes, label, ...rest} = props;\r\n    const formControlLabelElements = labels\r\n        .map((el, i) => <FormControlLabel value={el.value}\r\n                                     key={i}\r\n                                     className={classes.formControlLabel}\r\n                                     control={<Radio/>}\r\n                                     label={el.label}/>)\r\n\r\n    return (\r\n        <FormControl >\r\n            <FormLabel component=\"legend\" className={classes.formLabel}>\r\n                {label}\r\n            </FormLabel>\r\n            <RadioGroup value=\"all\" className={classes.radioGroup}  {...input} {...rest}>\r\n                {formControlLabelElements}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default RenderRadioButton;\r\n\r\n//======================= TYPES ======================================================\r\ntype labelsItemType = {\r\n    value: string\r\n    label: string\r\n}\r\ntype PropsType = {\r\n    value: string\r\n    labels: Array<labelsItemType>\r\n    input: any\r\n    classes: any\r\n    label: string\r\n}","import React, {useRef} from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, submit} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {Button, Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderRadioButton from \"../../common/RenderRadioButton\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {searchUsers, usersAC} from \"../../../redux/users-reduser\";\r\nimport {SearchUsersParamsType} from \"../../../types/types\";\r\n\r\n//========================== FORM =======================================\r\nconst SearchUsersForm: React.FC<SearchUsersFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    const classes = useStyles();\r\n    const classesRadioButton = useStylesRadioButton();\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <Field name='term'\r\n                   component={RenderTextField}\r\n                   fullWidth\r\n                   validate={[shouldNotBeEmpty]}\r\n                   label='User name'\r\n                   size='small'\r\n                   onChange={() => dispatch(submit('searchUsers'))}\r\n            />\r\n\r\n            <Field name='friend'\r\n                   label='User are friend or not'\r\n                   component={RenderRadioButton}\r\n                   classes={classesRadioButton}\r\n                   labels={[\r\n                       {value: \"all\", label: 'All'},\r\n                       {value: \"true\", label: 'Friend'},\r\n                       {value: \"false\", label: 'Not friend'}\r\n                   ]}\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SearchIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    Search\r\n                </Button>\r\n            </div>\r\n\r\n\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst SearchUsersReduxForm = reduxForm<SearchUsersParamsType, SearchUsersFormOwnPropsType>({\r\n    form: 'searchUsers',\r\n    //validate\r\n})(SearchUsersForm);\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst SearchUsers: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: SearchUsersParamsType) => {\r\n        console.log(formValue)\r\n        dispatch(usersAC.setSearchUsersParams(formValue));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n        dispatch(usersAC.setShowUsersFrom('search'));\r\n    };\r\n\r\n    const initialValues = {term: '', friend: 'all'} as SearchUsersParamsType;\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6'\r\n                        color='primary'\r\n                        classes={{\r\n                            h6: classes.title\r\n                        }}>\r\n                Search users\r\n            </Typography>\r\n            <Divider classes={{\r\n                root: classes.divider\r\n            }}/>\r\n            <SearchUsersReduxForm onSubmit={onSubmit} initialValues={initialValues}/>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default SearchUsers;\r\n\r\n//===================================== TYPES====================================================\r\ntype SearchUsersFormPropsType =\r\n    InjectedFormProps<SearchUsersParamsType, SearchUsersFormOwnPropsType>\r\n    & SearchUsersFormOwnPropsType;\r\ntype SearchUsersFormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 10,\r\n        paddingBottom: 10,\r\n        marginBottom: 10\r\n    },\r\n    title: {\r\n        marginLeft: 10,\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    }\r\n});\r\nconst useStylesRadioButton = makeStyles({\r\n    formLabel: {\r\n        margin: '15px 10px 5px',\r\n    },\r\n    radioGroup: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        marginLeft: 10\r\n    },\r\n    formControlLabel: {},\r\n\r\n});","import React, {useEffect, useState} from 'react';\r\nimport User from \"./User\";\r\nimport CircularPreloader from '../../common/CircularPreloader';\r\nimport Paginator from '../../common/Paginator';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getSearchUsersParams, getShowUsersFrom,\r\n    getTotalUsersCount,\r\n    getUsersSelector\r\n} from \"../../../redux/users-selectors\";\r\nimport {getIsLoading} from \"../../../redux/app-selectors\";\r\nimport {getUsers, searchUsers, usersAC} from \"../../../redux/users-reduser\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport SearchUsers from \"./SearchUsers\";\r\n\r\nlet Users: React.FC = () => {\r\n    const classes = useStyles();\r\n    const users = useSelector(getUsersSelector);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const pageSize = useSelector(getPageSize);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const searchUsersParams = useSelector(getSearchUsersParams);\r\n    const showUsersFrom = useSelector(getShowUsersFrom);\r\n    const dispatch = useDispatch();\r\n\r\n    const [searchPanelIsOpen, setSearchPanelIsOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (showUsersFrom === 'all') {\r\n            //console.log('all')\r\n            dispatch(getUsers(currentPage, pageSize));\r\n        } else if (showUsersFrom === 'search') {\r\n            //console.log('search')\r\n            dispatch(searchUsers(currentPage, pageSize, searchUsersParams.term, searchUsersParams.friend));\r\n        }\r\n\r\n    }, [currentPage, pageSize, showUsersFrom, searchUsersParams.term, searchUsersParams.friend]);\r\n\r\n    let usersElements = users && users.map(user => <User\r\n        user={user}\r\n        key={user.id}\r\n    />);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentPage(pageNumber));\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setSearchPanelIsOpen(!searchPanelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        dispatch(usersAC.setShowUsersFrom('all'));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n    };\r\n\r\n    const countTitle = showUsersFrom === 'all' ? 'Total all users count:' : 'Total users count from search:'\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Collapse in={searchPanelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <SearchUsers/>\r\n            </Collapse>\r\n\r\n            <div className={classes.count}>\r\n                <Button onClick={onSearchCharactersClick}\r\n                        size='small'\r\n                        className={classes.button}\r\n                        color='primary'\r\n                        startIcon={searchPanelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {searchPanelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        size='small'\r\n                        color='primary'\r\n                        disabled={showUsersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                <Typography color='primary'\r\n                            variant='subtitle2'\r\n                            className={classes.countTitle}\r\n                >\r\n                    {countTitle}\r\n                </Typography>\r\n\r\n                <Badge badgeContent={totalUsersCount} color=\"primary\" max={99999} showZero>\r\n                    <PeopleIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n\r\n            {\r\n                totalUsersCount !==0 && totalUsersCount && pageSize && currentPage &&\r\n                <div className={classes.paginator}>\r\n                    <Paginator totalItemsCount={totalUsersCount}\r\n                               pageSize={pageSize}\r\n                               currentPage={currentPage}\r\n                               onPageChanged={onPageChanged}\r\n\r\n                    />\r\n                </div>\r\n\r\n            }\r\n\r\n            {isLoading || !users\r\n                ? <CircularPreloader/>\r\n                : <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                    {usersElements}\r\n                </Grid>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Users);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        //padding: 15,\r\n        minHeight: '100vh'\r\n    },\r\n    count: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    },\r\n    countTitle: {\r\n        marginRight: 10\r\n    },\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    paginator: {\r\n        marginBottom: 10\r\n    }\r\n});\r\n\r\n","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport IconButtonWithPopper from \"../../common/IconButtonWithPopper\";\r\nimport {getDialogs, sendMessage} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst FriendsListItem: React.FC<PropsTypes> = (props) => {\r\n    const {friend} = props;\r\n    const classes = useStyles();\r\n    const classesPopper = useStylesPopper();\r\n    const dispatch = useDispatch();\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n\r\n    const onListItemClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(3));\r\n    };\r\n\r\n    //========================= popper ========================================\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //=================================================================================\r\n\r\n    const removeHandle = () => {\r\n        dispatch(usersAC.setNeedToChangeListOfFriends(true, friend.id))\r\n    };\r\n    const sendHandle = () => {\r\n        dispatch(usersAC.setNeedToChangeListOfFriends(true, friend.id))\r\n    };\r\n    const getDialogsHandle = () => {\r\n        //dispatch(getDialogs())\r\n        dispatch(sendMessage(friend.id, 'test'))\r\n    };\r\n\r\n\r\n    const labels = ['Send message', 'Delete from friends', 'Get dialogs'];\r\n    const callbacks = [sendHandle, removeHandle, getDialogsHandle]\r\n\r\n    const menuItemsElements = labels.map((el, i) => {\r\n        const onClickHandle = (event: React.MouseEvent<EventTarget>) => {\r\n            handleClose(event);\r\n            callbacks[i]();\r\n        }\r\n        return (\r\n            <MenuItem key={i}\r\n                      onClick={onClickHandle}\r\n            >\r\n                {labels[i]}\r\n            </MenuItem>\r\n        )\r\n    });\r\n    //===================================================================================\r\n\r\n    return (\r\n        <>\r\n            <Divider className={classes.divider}/>\r\n            <ListItem className={classes.listItem}>\r\n                <div className={classes.listItemInner}>\r\n                    <div className={classes.listItemInnerleft}>\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={friend.photos.large ? friend.photos.large : undefined}\r\n                            />\r\n                        </ListItemAvatar>\r\n                        <Link component={RouterLink} to={`/users/${friend.id}`} onClick={onListItemClick}>\r\n                            {friend.name}\r\n                        </Link>\r\n                    </div>\r\n                    {/*<IconButtonWithPopper*/}\r\n                    {/*    icon={<MoreVertIcon/>}*/}\r\n                    {/*    classes={classesPopper}*/}\r\n                    {/*    labels={labels}*/}\r\n                    {/*    callbacks={callbacks}*/}\r\n                    {/*/>*/}\r\n\r\n                    <div>\r\n                        <IconButton ref={anchorRef}\r\n                                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleToggle}\r\n                                    edge=\"end\"\r\n                                    aria-label=\"delete\"\r\n                                    className={classes.iconButton}>\r\n                            <MoreVertIcon/>\r\n                        </IconButton>\r\n                        <Popper className={classes.popper}\r\n                                open={open}\r\n                                anchorEl={anchorRef.current}\r\n                                role={undefined}\r\n                                transition\r\n                                placement='bottom-end'\r\n                                disablePortal>\r\n                            {({TransitionProps, placement}) => (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                      onKeyDown={handleListKeyDown}>\r\n                                                {menuItemsElements}\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            )}\r\n                        </Popper>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isFollowing && followingInProgress.some(item => item === friend.id)\r\n                    && <CircularPreloader size={80} style={'absolute'}/>\r\n                }\r\n            </ListItem>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FriendsListItem;\r\n\r\n//========================== TYPES =============================================\r\ntype PropsTypes = {\r\n    friend: UserType\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    popper: {\r\n        zIndex: 1000\r\n    },\r\n    listItemInner: {\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    listItemInnerleft: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexGrow: 1\r\n    },\r\n    listItem: {\r\n        position: 'relative'\r\n    }\r\n});\r\n\r\nconst useStylesPopper = makeStyles({\r\n    iconButton: {\r\n        marginRight: 0,\r\n        //zIndex: 1\r\n    },\r\n    popper: {\r\n        //zIndex: 1000\r\n    },\r\n})","//========================== FORM =======================================\r\n\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, reset, submit} from \"redux-form\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {getIsFriendsSearching, getSearchFriendsParams} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\n\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    const classes = useStyles();\r\n    //const classesField = useStylesField();\r\n\r\n    const onChangeHandler = () => {\r\n        dispatch(submit('friends-search'));\r\n        dispatch(usersAC.setCurrentFriendsPage(1))\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div >\r\n                <Field name='term'\r\n                       component={RenderTextField}\r\n                       //classes={classesField}\r\n                       //icon={<SearchIcon/>}\r\n                       fullWidth\r\n                       validate={[shouldNotBeEmpty]}\r\n                       label='Friends name'\r\n                       size='small'\r\n                       onChange={onChangeHandler}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst ReduxForm = reduxForm<FormParamsType, FormOwnPropsType>({\r\n    form: 'friends-search',\r\n    //validate\r\n})(Form);\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst FriendsSearch: React.FC = () => {\r\n    const classes = useStyles();\r\n    const isFriendsSearching = useSelector(getIsFriendsSearching);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const dispatch = useDispatch();\r\n    const onSubmit = (formValue: FormParamsType) => {\r\n        dispatch(usersAC.setSearchFriendsParams({term: formValue.term}))\r\n        console.log(formValue)\r\n    };\r\n    const icon = searchFriendsParams.term === ''\r\n    ? <SearchIcon/>\r\n    : <HighlightOffIcon/>\r\n\r\n    const onClickHandler = () => {\r\n        if (searchFriendsParams.term !== '') {\r\n            dispatch(usersAC.setSearchFriendsParams({term: ''}));\r\n            dispatch(usersAC.setCurrentFriendsPage(1));\r\n            dispatch(reset('friends-search'));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.search}>\r\n            <div className={classes.iconButton}>\r\n                {\r\n                    !isFriendsSearching\r\n                        ? <IconButton onClick={onClickHandler}>{icon}</IconButton>\r\n                        : <CircularPreloader size={20} style='absolute' />\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.form}>\r\n                <ReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default FriendsSearch;\r\n\r\n\r\n//===================================== TYPES====================================================\r\ntype FormPropsType =\r\n    InjectedFormProps<FormParamsType, FormOwnPropsType>\r\n    & FormOwnPropsType;\r\ntype FormParamsType = {\r\n    term: string\r\n}\r\ntype FormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    fieldWrapper: {\r\n        margin: '10px 10px 5px 35px'\r\n    },\r\n    search: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '0 10px'\r\n    },\r\n    form: {\r\n        flexGrow: 1\r\n    },\r\n    iconButton: {\r\n        width: 48,\r\n        height: 48,\r\n        position: 'relative',\r\n        marginRight: 5\r\n    }\r\n\r\n});\r\n// const useStylesField = makeStyles({\r\n//     root: {\r\n//         width: '100%'\r\n//     },\r\n// });","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentFriendsPage,\r\n    getCurrentPage, getFriendIdToRemove,\r\n    getFriendsSelector,\r\n    getNeedToChangeListOfFriends,\r\n    getPageSize, getSearchFriendsParams, getTotalFriendsCount\r\n} from \"../../../redux/users-selectors\";\r\nimport FriendsListItem from \"./FriendsListItem\";\r\nimport React, {useEffect} from \"react\";\r\nimport {searchFriends, removeAndUpdateFriends, usersAC} from \"../../../redux/users-reduser\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsSearch from \"./FriendsSearch\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paginator from \"../../common/Paginator\";\r\n\r\nconst FriendsList: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    const friends = useSelector(getFriendsSelector);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const currentFriendsPage = useSelector(getCurrentFriendsPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const needToChangeListOfFriends = useSelector(getNeedToChangeListOfFriends);\r\n    const friendIdToRemove = useSelector(getFriendIdToRemove);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const totalFriendsCount = useSelector(getTotalFriendsCount);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const FriendsListElements = friends\r\n        && friends.map(el => <FriendsListItem key={el.id} friend={el}/>);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(searchFriends(currentFriendsPage, pageSize, searchFriendsParams.term));\r\n    }, [searchFriendsParams.term, currentFriendsPage]);\r\n\r\n    useEffect(() => {\r\n        if (needToChangeListOfFriends && friendIdToRemove) {\r\n            dispatch(removeAndUpdateFriends(currentPage, pageSize, friendIdToRemove));\r\n        }\r\n    }, [needToChangeListOfFriends]);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentFriendsPage(pageNumber));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <div className={classes.title}>\r\n                <Typography component='span' color='primary' className={classes.titleleft}>\r\n                    Friends\r\n                </Typography>\r\n                <Typography component='span' color='textSecondary'>\r\n                    {totalFriendsCount}\r\n                </Typography>\r\n            </div>\r\n            <FriendsSearch/>\r\n\r\n            <div className={classes.paginator}>\r\n                <Paginator totalItemsCount={totalFriendsCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentFriendsPage}\r\n                           onPageChanged={onPageChanged}\r\n                />\r\n            </div>\r\n\r\n            <List>\r\n                {FriendsListElements}\r\n            </List>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsList;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    title: {\r\n        padding: '5px 10px 5px 10px'\r\n    },\r\n    titleleft: {\r\n        marginRight: 5\r\n    },\r\n    paginator: {\r\n        marginLeft: 10,\r\n        marginTop: 5\r\n    }\r\n\r\n\r\n});","import React, {useEffect} from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\n\r\n\r\nconst FriendsSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(newValue));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Tabs\r\n                classes={{\r\n                    indicator: classes.indicator\r\n                }}\r\n                orientation=\"vertical\"\r\n                value={currentFriendsSidebarItem}\r\n                onChange={handleChange}\r\n                className={classes.tabs}\r\n            >\r\n\r\n                <Tab label=\"Friends\" icon={<GroupIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label=\"Request for friendship\" icon={<PersonAddIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label=\"Something else\" icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label=\"Something else\" icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n\r\n            </Tabs>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid #ccc`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none'\r\n    },\r\n    icon: {\r\n        marginRight: 15,\r\n        marginLeft: 15\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50\r\n    }\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst FriendsSomethingElse: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6' color='primary' align='center'>\r\n                Something else\r\n            </Typography>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSomethingElse;\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsList from \"./FriendsList\";\r\nimport FriendsSidebar from \"./FriendsSidebar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport FriendsSomethingElse from \"./FriendsSomethingElse\";\r\n\r\n\r\nconst Friends = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem)\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.leftColumn}>\r\n                {\r\n                    currentFriendsSidebarItem === 0\r\n                        ? <FriendsList/>\r\n                        : <FriendsSomethingElse/>\r\n                }\r\n            </div>\r\n            <div className={classes.rightColumn}>\r\n                <FriendsSidebar/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Friends);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        display: \"flex\"\r\n    },\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    leftColumn: {\r\n        flexGrow: 1,\r\n        marginRight: 15,\r\n    },\r\n    rightColumn: {\r\n        flexBasis: 240,\r\n    }\r\n});","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst Settings: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6' color='primary' align='center'>\r\n                Settings\r\n            </Typography>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default Settings;\r\n\r\n//================== STYLE =========================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n\r\n    }\r\n});","import React, {Suspense} from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport CircularPreloader from \"../common/CircularPreloader\";\nimport Login from \"../Login/Login\";\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {drawerWidth} from \"../../const/const\";\nimport clsx from \"clsx\";\nimport {useSelector} from \"react-redux\";\nimport {getInitialized} from \"../../redux/app-selectors\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport Users from \"./Users/Users\";\nimport {getSidebarIsOpen} from \"../../redux/sidebar-selectors\";\nimport Friends from \"./Friends/Friends\";\nimport Settings from \"./Settings/Settings\";\n\nconst Dialogs = React.lazy(() => import('./Dialogs/Dialogs'));\nconst Profile = React.lazy(() => import('./Profile/Profile'));\n\nconst Main: React.FC = () => {\n\n    const classes = useStyles();\n\n    const initialized = useSelector(getInitialized);\n    const sidebarIsOpen = useSelector(getSidebarIsOpen);\n\n    if (!initialized) {\n        return <CircularPreloader/>\n    }\n\n    return (\n        <main className={clsx(classes.content, {\n            [classes.contentShift]: sidebarIsOpen,\n        })}>\n            <div className={classes.drawerHeader}/>\n            <Suspense fallback={<CircularPreloader/>}>\n                <Switch>\n                    <Route exact path='/' render={() => <Profile/>}/>\n                    {/*<Route path='/dialogs' render={() => <Dialogs/>}/>*/}\n                    <Route path='/dialogs/:userId?' render={() => <Dialogs/>}/>\n\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route exact path='/users' render={() => <Users/>}/>\n                    <Route path='/users/:userId' render={() => <Profile/>}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/settings' render={() => <Settings/>}/>\n                    <Route path='*' render={() => <div>404 Page not found</div>}/>\n                </Switch>\n            </Suspense>\n        </main>\n    );\n};\n\nexport default Main;\n\n//========================== STYLES ================================================\nconst useStyles = makeStyles((theme: Theme) => ({\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-end',\n    },\n    content: {\n        backgroundColor: indigo[50],\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginLeft: -drawerWidth,\n        minHeight: '100vh',\n        padding: 15\n    },\n    contentShift: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginLeft: 0,\n    },\n}));\n","import React, {useEffect} from 'react';\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport {AppPropsType} from \"./AppContainer\";\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\nimport {Container} from \"@material-ui/core\";\n\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: 'flex',\n            // maxWidth: 800,\n            // width: '100%',\n            // margin: '0 auto'\n        }\n    }),\n);\n\nconst App: React.FC<AppPropsType> = (props) => {\n    const {initializeApp} = props;\n\n    const classes = useStyles();\n\n    const catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(e);\n    };\n\n    useEffect(() => {\n        initializeApp();\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors);\n        return () => {\n            window.removeEventListener('unhandledrejection', catchAllUnhandledErrors);\n        }\n    }, [])\n\n    return (\n        <div className={classes.root}>\n            <Header/>\n            <Sidebar/>\n            <Main/>\n        </div>\n    );\n};\n\nexport default App;\n\n","import {connect, Provider} from \"react-redux\";\r\nimport store, {StateType} from \"./redux/redux-store\";\r\nimport {getInitialized} from \"./redux/app-reducer\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport App from \"./App\";\r\n\r\nconst mapStateToProps = (state: StateType) => ({});\r\n\r\nconst AppContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {initializeApp: getInitialized})(App)\r\n\r\ntype MapStatePropsType = {};\r\n\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n};\r\n\r\nexport type AppPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst AppGlobal = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default AppGlobal;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppGlobal from \"./AppContainer\";\n\nReactDOM.render(\n    <AppGlobal/>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n\n","import {GetActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    sidebarIsOpen: true,\r\n    currentSidebarItem: null as null | number\r\n}\r\n\r\ntype initialStateType = typeof initialState;\r\nexport type SidebarActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: SidebarActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SIDEBAR/SET_SIDEBAR_IS_OPEN': {\r\n            return {...state, sidebarIsOpen: action.sidebarIsOpen}\r\n        }\r\n        case 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM': {\r\n            return {...state, currentSidebarItem: action.currentSidebarItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const sidebarAC = {\r\n    setSidebarIsOpen: (sidebarIsOpen: boolean) => ({type: 'SIDEBAR/SET_SIDEBAR_IS_OPEN', sidebarIsOpen} as const),\r\n    setCurrentSidebarItem: (currentSidebarItem: null | number) => ({type: 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM', currentSidebarItem} as const)\r\n};\r\n\r\nexport default sidebarReducer;","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst CircularPreloader: React.FC<PropsType> = (props) => {\r\n    const {size = 100, style = 'static-center'} = props;\r\n    const classesAbsolute = useStylesAbsolute();\r\n    const classesStaticCenter = useStylesStaticCenter();\r\n    const classesStaticTop = useStylesStaticTop();\r\n    let classes = classesStaticCenter;\r\n    if (style === 'absolute') {\r\n        classes = classesAbsolute;\r\n    }\r\n    if (style === 'static-top') {\r\n        classes = classesStaticTop;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={size} color={'secondary'} className={classes.circular}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CircularPreloader;\r\n\r\n//============================ TYPES ==================================================\r\ntype PropsType = {\r\n    size?: number | undefined\r\n    style?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\n//============================ STYLES =======================================================\r\nconst useStylesAbsolute = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    },\r\n    circular: {}\r\n});\r\nconst useStylesStaticCenter = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    circular: {\r\n\r\n    }\r\n});\r\nconst useStylesStaticTop = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start'\r\n    },\r\n    circular: {\r\n\r\n    }\r\n});\r\n","export const required: FieldValidatorType = (value) =>\r\n    value ? undefined : 'Field is required';\r\n\r\nexport const maxLength = (max: number): FieldValidatorType => (value) =>\r\n    value && value.length > max\r\n        ? `Number of letters is more than ${max}`\r\n        : undefined;\r\nexport const maxLength10 = maxLength(10);\r\nexport const maxLength30 = maxLength(30);\r\nexport const maxLength100 = maxLength(100);\r\n\r\nexport const empty: EmptyType = (str) => /^\\s+$/.test(str);\r\n\r\nexport const shouldNotBeEmpty: FieldValidatorType = (value) =>\r\n    empty(value) && value !== ''\r\n        ? 'Field should not be empty'\r\n        : undefined;\r\n\r\n//=========================== TYPES =====================================\r\ntype EmptyType = (str: string) => boolean\r\nexport type FieldValidatorType = (value: string) => string | undefined","import {instance, ResponseTypeAPI, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\n// type AuthResponseType = {\r\n//     data: {\r\n//         id: number\r\n//         email: string\r\n//         login: string\r\n//     }\r\n//     resultCode: ResultCodesEnum\r\n//     messages: Array<string>\r\n// }\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype AuthResponseType = ResponseTypeAPI<AuthResponseDataType>\r\n\r\n// type LoginResponseType = {\r\n//     data: {\r\n//         userId: number\r\n//     }\r\n//     resultCode: ResultCodesEnum | ResultCodeForCaptchaEnum\r\n//     messages: Array<string>\r\n// }\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LoginResponseType = ResponseTypeAPI<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>\r\n\r\nexport const authAPI = {\r\n    async auth() {\r\n        let response = await instance.get<AuthResponseType>(`auth/me`)\r\n        return response.data;\r\n    },\r\n    async login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        let response = await instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n        return response.data;\r\n    },\r\n    async logout() {\r\n        let response = await instance.delete(`auth/login`)\r\n        return response.data;\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    async getCaptcha() {\r\n        let response = await instance.get<getCaptchaResponseType>(`security/get-captcha-url`);\r\n        return response.data;\r\n    }\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../DAL/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {authAPI} from \"../DAL/auth-api\";\r\nimport {securityAPI} from \"../DAL/security-api\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {sidebarAC, SidebarActionsType} from \"./sidebar-reducer\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as null | string\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype AuthActionsType = GetActionsType<typeof authAC>\r\ntype ThunkType = BaseThunkType<AuthActionsType | FormAction | AppActionsType | SidebarActionsType>\r\n\r\nconst authReducer = (state = initialState, action: AuthActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_AUTH_USER_DATA': {\r\n            return {...state, ...action.data,}\r\n        }\r\n        case 'AUTH/SET_CAPTCHA':\r\n            return {...state, captcha: action.captcha}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const authAC = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH/SET_AUTH_USER_DATA',\r\n        data: {id, email, login, isAuth}\r\n    } as const),\r\n    setCaptchaUrl: (captcha: string) => ({type: 'AUTH/SET_CAPTCHA', captcha} as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.auth();\r\n        //если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            let {id, login, email} = data.data;\r\n            dispatch(authAC.setAuthUserData(id, email, login, true));\r\n        }\r\n        dispatch(appAC.toggleLoading(false));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.login(email, password, rememberMe, captcha);\r\n        // если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n            dispatch(sidebarAC.setCurrentSidebarItem(1))\r\n        } else { // неправильный логин и(или) пароль\r\n            if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) { // необходима каптча\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await securityAPI.getCaptcha();\r\n        dispatch(authAC.setCaptchaUrl(data.url));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.logout();\r\n        // если вылогинись\r\n        if (data.resultCode === 0) {\r\n            dispatch(authAC.setAuthUserData(null, null, null, false));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, input, meta: {touched, invalid, error}, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon &&\r\n            <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                variant=\"outlined\"\r\n                label={label}\r\n\r\n                placeholder={label}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n            width: '100%'\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getId = (state: StateType) => state.auth.id;\r\nexport const getEmail = (state: StateType) => state.auth.email;\r\nexport const getLogin = (state: StateType) => state.auth.login;\r\nexport const getIsAuth = (state: StateType) => state.auth.isAuth;\r\nexport const getCaptchaSelector = (state: StateType) => state.auth.captcha;\r\n"],"sourceRoot":""}