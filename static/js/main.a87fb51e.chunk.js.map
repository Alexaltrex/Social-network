{"version":3,"sources":["redux/dialogs-reducer.ts","api/api.ts","assets/img/user.png","components/Navbar/Navbar.module.css","components/Users/Users.module.css","components/Users/User/User.module.css","assets/img/oval.svg","components/Login/Login.module.css","components/Navbar/Menu/Menu.module.css","components/common/FormsControls/FormControls.tsx","serviceWorker.js","redux/sidebar-reducer.ts","utilities/objects-helpers.js","api/users-api.ts","redux/users-reduser.ts","api/auth-api.ts","api/security-api.ts","redux/auth-reduser.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Menu/Menu.tsx","components/Navbar/Navbar.tsx","components/News/News.jsx","components/Music/Music.jsx","redux/users-selectors.ts","components/Users/User/User.tsx","components/common/Paginator/Paginator.tsx","components/Users/Users.tsx","components/Users/UsersContainerAJAX.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","AppContainer.tsx","index.js","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormControls.module.css","utilities/validators/validators.ts","components/common/Paginator/Paginator.module.css","components/common/Preloader/Preloader.module.css","components/Header/Header.module.css","hoc/withAuthRedirect.tsx","api/profile-api.ts","redux/profile-reducer.ts"],"names":["initialState","dialogs","id","name","messages","text","dialogsAC","addMessage","message","type","dialogsReducer","state","action","length","ResultCodesEnum","ResultCodeForCaptchaEnum","instance","axios","create","baseURL","withCredentials","headers","module","exports","FormControl","props","meta","touched","error","children","hasError","className","style","Textarea","input","restProps","Input","createField","placeholder","validators","component","validate","Boolean","window","location","hostname","match","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","item","usersAPI","getUsers","currentPage","pageSize","get","response","data","followUser","post","unfollowUser","delete","users","totalUsersCount","isLoading","followingInProgress","usersAC","userId","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","authAC","getAuthUserData","Success","getCaptchaUrl","url","authReducer","stateInitial","initialized","globalError","appAC","appReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","SidebarFriends","usersPage","auth","app","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","Menu","s","menu","active","activeClassName","activeLink","to","Navbar","nav","News","Music","getUsersSelector","getPageSize","getCurrentPage","getFollowingInProgress","getTotalUsersCount","getIsLoading","User","status","src","followThunkCreator","unfollowThunkCreator","avatar","userPhoto","alt","disabled","some","onClick","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","startPortionNumber","endPortionNumber","elements","p","key","cn","paginationItem","selected","e","pagination","Users","usersElements","user","photos","small","Preloader","UsersContainerAJAX","pageNumber","setCurrentPage","this","React","Component","UsersContainer","compose","connect","bind","totalCount","withAuthRedirect","Header","logout","header","loginBlock","HeaderContainer","ReduxLoginForm","reduxForm","handleSubmit","onSubmit","required","undefined","summaryError","LoginContainer","CaptchaIsRequired","stopSubmit","_error","styleLogin","values","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","fallback","exact","path","render","AppContainer","promise","Promise","all","then","AppGlobal","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","preloader","img","value","maxLength","max","maxLength30","maxLength100","mapStateToPropsRedirect","WrappedComponent","profileAPI","put","photo","formData","FormData","append","posts","likeCount","profile","profileAC","toggleLoading","addPost","deletePost","setUserProfile","setStatus","setPhotos","getProfile","getStatus","updateStatus","savePhoto","saveProfile","getState","Error","errorFields","slice","toLowerCase","reject"],"mappings":"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","file":"static/js/main.a87fb51e.chunk.js","sourcesContent":["import {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {authAC} from \"./auth-reduser\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimon'},\r\n        {id: 2, name: 'Alex'},\r\n        {id: 3, name: 'John'},\r\n        {id: 4, name: 'Tony'},\r\n    ],\r\n    messages: [\r\n        {id: 1, text: 'Hei-Hei'},\r\n        {id: 2, text: 'Hello'},\r\n        {id: 3, text: 'Yow'}\r\n    ]\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = GetActionsType<typeof dialogsAC>\r\ntype GetStateType = () => StateType\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'dialogs/ADD_MESSAGE': {\r\n            let id = state.messages ? state.messages[state.messages.length - 1].id : 1;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: id, text: action.message}]\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const dialogsAC = {\r\n    addMessage: (message: string) => ({type: 'dialogs/ADD_MESSAGE', message: message} as const)\r\n}\r\n\r\nexport default dialogsReducer;","// DAL - уровень доступа к данным\r\n// упрощенный (через коллбэки) доступ к данным на сервере\r\nimport axios from \"axios\";\r\nimport {userType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e09d6375-5dac-4dde-95ca-700e186a8f7d'\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<userType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseTypeAPI<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","module.exports = __webpack_public_path__ + \"static/media/user.1897f975.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1S7QR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Users_avatar__36OJL\",\"users\":\"Users_users__33_pi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"User_avatar__3Ie1z\"};","module.exports = __webpack_public_path__ + \"static/media/oval.be00fc4a.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__ttFE0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__31oF9\",\"item\":\"Menu_item__3ZhKs\",\"activeLink\":\"Menu_activeLink__4AqXD\"};","import React from 'react';\r\nimport style from './FormControls.module.css';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utilities/validators/validators\";\r\nimport {LoginFormValuesType} from \"../../Login/Login\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = (props) => {\r\n    const {meta: {touched, error}, children} = props;\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={hasError ? style.error : ''}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n//export type\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = '') {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n};\r\n\r\nexport type GetStringKeysType<T> = Extract<keyof T, string>;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nlet initialState = {}\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\n// у state есть значение по умолчанию для инициализации\r\nconst sidebarReducer = (state = initialState, action: any):initialStateType => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(item => {\r\n        if (item[objPropName] === itemId) {\r\n            return {...item, ...newObjProps}\r\n        }\r\n        return item;\r\n    })\r\n};","import {GetItemsType, instance, ResponseTypeAPI} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        let response = await instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`);\r\n        return response.data;\r\n    },\r\n    async followUser(id: number) {\r\n        let response = await instance.post<ResponseTypeAPI>(`follow/${id}`)\r\n        return response.data;\r\n    },\r\n    async unfollowUser(id: number) {\r\n        let response = await instance.delete(`follow/${id}`) //as AxiosResponse<any>\r\n                return response.data as Promise<ResponseTypeAPI>;\r\n      },\r\n    // async getProfile(id: number) {\r\n    //     let response = await instance.get<>(`profile/${id}`)\r\n    //     return response.data;\r\n    // }\r\n};","import {updateObjectInArray} from \"../utilities/objects-helpers\";\r\nimport {photosType, userType} from \"../types/types\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<userType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    // массив пользователей, для которых послан запрос на подписку/отписку\r\n    followingInProgress: [] as Array<number>\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'USERS/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        }\r\n        case 'USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        }\r\n        case 'USERS/SET_USERS': {\r\n            // добавляем новых users\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage};\r\n        }\r\n        case 'USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        }\r\n        case 'USERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                // если запрос на подписку-отписку полсан добавить в массив, иначе удалить из массива\r\n                followingInProgress:\r\n                    action.followingInProgress\r\n                        ? [...state.followingInProgress, action.id]\r\n                        : state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const usersAC = {\r\n    follow: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    unfollow: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<userType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setUsersTotalCount: (totalUsersCount: number) => ({type: 'USERS/SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'USERS/TOGGLE_LOADING', isLoading} as const),\r\n    toggleFollowingProgress: (followingInProgress: boolean, id: number) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        followingInProgress,\r\n        id\r\n    } as const)\r\n};\r\n\r\ntype ActionsType = GetActionsType<typeof usersAC>\r\ntype GetStateType = () => StateType\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\n// первый вариант типизации\r\nexport const getUsers = (currentPage: number, pageSize: number) => async (dispatch: DispatchType) => {\r\n    dispatch(usersAC.toggleLoading(true));\r\n    let data = await usersAPI.getUsers(currentPage, pageSize);\r\n    dispatch(usersAC.setUsers(data.items));\r\n    dispatch(usersAC.setUsersTotalCount(data.totalCount));\r\n    dispatch(usersAC.toggleLoading(false));\r\n};\r\n\r\ntype FollowUnfollwType = ActionsType;//followType | unfollowType\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   id: number,\r\n                                   apiMethod: any,\r\n                                   actionCreator: (id: number) => FollowUnfollwType) => {\r\n    dispatch(usersAC.toggleFollowingProgress(true, id));\r\n    let data = await apiMethod(id)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(usersAC.toggleFollowingProgress(false, id));\r\n};\r\n\r\n// второй вариант типизации\r\n//type ThunkType = ThunkAction<Promise<void>, RootState, unknown, ActionsType>\r\n\r\nexport const followThunkCreator = (id: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, id, usersAPI.unfollowUser.bind(id), usersAC.unfollow);\r\n};\r\n\r\nexport const unfollowThunkCreator = (id: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, id, usersAPI.followUser.bind(id), usersAC.follow);\r\n};\r\n\r\nexport default usersReducer;","import {instance, ResponseTypeAPI, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\n// type AuthResponseType = {\r\n//     data: {\r\n//         id: number\r\n//         email: string\r\n//         login: string\r\n//     }\r\n//     resultCode: ResultCodesEnum\r\n//     messages: Array<string>\r\n// }\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype AuthResponseType = ResponseTypeAPI<AuthResponseDataType>\r\n\r\n// type LoginResponseType = {\r\n//     data: {\r\n//         userId: number\r\n//     }\r\n//     resultCode: ResultCodesEnum | ResultCodeForCaptchaEnum\r\n//     messages: Array<string>\r\n// }\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LoginResponseType = ResponseTypeAPI<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>\r\n\r\nexport const authAPI = {\r\n    async auth() {\r\n        let response = await instance.get<AuthResponseType>(`auth/me`)\r\n        return response.data;\r\n    },\r\n    async login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        let response = await instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n        return response.data;\r\n    },\r\n    async logout() {\r\n        let response = await instance.delete(`auth/login`)\r\n        return response.data;\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    async getCaptcha() {\r\n        let response = await instance.get<getCaptchaResponseType>(`security/get-captcha-url`);\r\n        return response.data;\r\n    }\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit, StopSubmitAction} from 'redux-form';\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isLoading: false,\r\n    isAuth: false,\r\n    captcha: null as null | string // если null, каптчу не показывать, не нужна\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = GetActionsType<typeof authAC>\r\ntype GetStateType = () => StateType\r\ntype DispatchType = Dispatch<ActionsType>\r\n// Расширение типа для stopSubmit из redux-form\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_AUTH_USER_DATA': {\r\n            return {...state, ...action.data,}\r\n        }\r\n        case 'AUTH/SET_CAPTCHA':\r\n            return {...state, captcha: action.captcha}\r\n        case 'AUTH/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const authAC = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH/SET_AUTH_USER_DATA',\r\n        data: {id, email, login, isAuth}\r\n    } as const),\r\n    setCaptchaUrl: (captcha: string) => ({type: 'AUTH/SET_CAPTCHA', captcha} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'AUTH/TOGGLE_LOADING', isLoading} as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    dispatch(authAC.toggleLoading(true));\r\n    let data = await authAPI.auth();\r\n    //если залогинены\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = data.data;\r\n        dispatch(authAC.setAuthUserData(id, login, email, true));\r\n    }\r\n    dispatch(authAC.toggleLoading(false));\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    dispatch(authAC.toggleLoading(true));\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    // если залогинены\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else { // неправильный логин и(или) пароль\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) { // необходима каптча\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n        dispatch(stopSubmit('login', {_error: message}));\r\n    }\r\n    dispatch(authAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    dispatch(authAC.toggleLoading(true));\r\n    const data = await securityAPI.getCaptcha();\r\n    dispatch(authAC.setCaptchaUrl(data.url));\r\n    dispatch(authAC.toggleLoading(false));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    dispatch(authAC.toggleLoading(true));\r\n    let data = await authAPI.logout();\r\n    // если вылогинись\r\n    if (data.resultCode === 0) {\r\n        dispatch(authAC.setAuthUserData(null, null, null, false));\r\n    }\r\n    dispatch(authAC.toggleLoading(false));\r\n};\r\n\r\nexport default authReducer;","import {getAuthUserData} from \"./auth-reduser\";\r\nimport {GetActionsType} from \"./redux-store\";\r\n\r\nexport type stateInitialType = typeof stateInitial\r\n\r\nlet stateInitial = {\r\n    initialized: true,//false,\r\n    globalError: null\r\n};\r\n\r\nconst appReducer = (state = stateInitial, action: ActionsType):stateInitialType => {\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZED_SUCCESS':\r\n            return {...state, initialized: true}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    initializedSuccess: () => ({type: 'APP/INITIALIZED_SUCCESS'} as const)\r\n};\r\n\r\ntype ActionsType = GetActionsType<typeof appAC>\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    // dispatch(somethingElse());\r\n    // dispatch(somethingElse());\r\n    Promise.all([promise])\r\n        .then(()=> {\r\n            dispatch(appAC.initializedSuccess())\r\n        })\r\n};\r\n\r\nexport default appReducer;","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reduser\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\n// объединяем редьюсеры в объект\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    SidebarFriends: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Menu.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Menu: React.FC = () => {\r\n    return (\r\n        <nav className={s.menu}>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink activeClassName={s.activeLink} to=\"/profile\">Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.activeLink} to=\"/dialogs\">Dialogs</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.activeLink} to=\"/news\">News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.activeLink} to=\"/music\">Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.activeLink} to=\"/users\">Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.activeLink} to=\"/settings\">Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Menu;\r\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport Menu from \"./Menu/Menu\";\r\n\r\nconst Navbar:React.FC = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <Menu/>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n//import s from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\n//import s from './Music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: StateType) => state.usersPage.users;\r\nexport const getPageSize = (state: StateType) => state.usersPage.pageSize;\r\nexport const getCurrentPage = (state: StateType) => state.usersPage.currentPage;\r\nexport const getFollowingInProgress = (state: StateType) => state.usersPage.followingInProgress;\r\nexport const getTotalUsersCount = (state: StateType) => state.usersPage.totalUsersCount;\r\nexport const getIsLoading = (state: StateType) => state.usersPage.isLoading;\r\n","import React from 'react';\r\nimport style from './User.module.css';\r\nimport userPhoto from './../../../assets/img/user.png';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    src: string | null\r\n    followed: boolean\r\n    followingInProgress: Array<number>\r\n    unfollowThunkCreator: (id: number) => void\r\n    followThunkCreator: (id: number) => void\r\n }\r\n\r\nconst User: React.FC<PropType> = (props) => {\r\n   const {id, name, status, followed, src, followingInProgress, followThunkCreator, unfollowThunkCreator} = props;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <NavLink to={`/profile/${id}`}>\r\n                        <img className={style.avatar} src={(src !== null) ? src : userPhoto}\r\n                             alt=\"\"/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {followed\r\n                        ? <button disabled={followingInProgress.some(item => item === id)}\r\n                                  onClick={() => {\r\n                                      followThunkCreator(id)\r\n                                  }\r\n                                  }>UnFollow</button>\r\n                        : <button disabled={followingInProgress.some(item => item === id)}\r\n                                  onClick={() => {\r\n                                      unfollowThunkCreator(id);\r\n                                  }}>Follow</button>}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <div>{name}</div>\r\n                    <div>{status}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default User;","import React, {useState} from 'react';\r\nimport style from './Paginator.module.css';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);// число страниц\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i < pagesCount + 1; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize); // число порций (блоков) страниц\r\n    let [portionNumber, setPortionNumber] = useState(1);// текущий номер порции (начинается с 1)\r\n    let startPortionNumber = (portionNumber - 1) * portionSize + 1; // номер первого элемента в порции\r\n    let endPortionNumber = portionNumber * portionSize; // номер последнего элемента в порции\r\n\r\n    const setPrevPortion = () => {\r\n        setPortionNumber(portionNumber - 1);\r\n        onPageChanged((portionNumber - 2) * portionSize + 1);\r\n    };\r\n\r\n    const setNextPortion = () => {\r\n        setPortionNumber(portionNumber + 1);\r\n        onPageChanged((portionNumber) * portionSize + 1);\r\n    };\r\n\r\n    const setFirstPortion = () => {\r\n        setPortionNumber(1);\r\n        onPageChanged(1);\r\n    };\r\n\r\n    const setLastPortion = () => {\r\n        setPortionNumber(portionCount);\r\n        onPageChanged((portionCount - 1) * portionSize + 1);\r\n    }\r\n\r\n\r\n    const elements = pages\r\n        .filter(p => p >= startPortionNumber && p <= endPortionNumber)\r\n        .map(p => {\r\n                return <div\r\n                    key={p}\r\n                    className={cn(style.paginationItem, {[style.selected]: p === currentPage})}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p)\r\n                    }}>{p}</div>\r\n            }\r\n        );\r\n\r\n    return (<div className={style.pagination}>\r\n        {portionNumber > 1 && <button onClick={setFirstPortion}>{'<<'}</button>}\r\n        {portionNumber > 1 && <button onClick={setPrevPortion}>PREV</button>}\r\n        {elements}\r\n        {portionNumber < portionCount && <button onClick={setNextPortion}>NEXT</button>}\r\n        {portionNumber < portionCount && <button onClick={setLastPortion}>{'>>'}</button>}\r\n    </div>)\r\n};\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport style from './Users.module.css';\r\nimport User from \"./User/User\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {userType} from \"../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    users: Array<userType>\r\n    followThunkCreator: (id: number) => void\r\n    unfollowThunkCreator: (id: number) => void\r\n    followingInProgress: Array<number>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    isLoading: boolean\r\n}\r\n\r\nlet Users: React.FC<PropsType> = (props) => {\r\n\r\n    const {\r\n        users, followingInProgress, unfollowThunkCreator, followThunkCreator,\r\n        totalUsersCount, pageSize, currentPage, onPageChanged, isLoading\r\n    } = props;\r\n\r\n    let usersElements = users.map(user => <User\r\n        key={user.id}\r\n        id={user.id}\r\n        src={user.photos.small}\r\n        followingInProgress={followingInProgress}\r\n        unfollowThunkCreator={unfollowThunkCreator}\r\n        followThunkCreator={followThunkCreator}\r\n        name={user.name}\r\n        status={user.status}\r\n        followed={user.followed}\r\n    />);\r\n\r\n\r\n    return (\r\n\r\n        <div className={style.users}>\r\n            {isLoading ? <Preloader/> : null}\r\n            <Paginator totalItemsCount={totalUsersCount}\r\n                       pageSize={pageSize}\r\n                       currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n            />\r\n            {usersElements}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Users;","import React from \"react\";\r\nimport Users from \"./Users\";\r\nimport {UsersOwnPropsType, UsersPropsType} from \"./UsersContainer\";\r\n\r\n\r\nclass UsersContainerAJAX extends React.Component<UsersPropsType & UsersOwnPropsType> {\r\n    componentDidMount() {\r\n        const {getUsers, currentPage, pageSize} = this.props;\r\n        getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {setCurrentPage, pageSize, getUsers} = this.props;\r\n        getUsers(pageNumber, pageSize);\r\n        setCurrentPage(pageNumber);\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            isLoading, followingInProgress, totalUsersCount, pageSize,\r\n            users, followThunkCreator, unfollowThunkCreator, currentPage,\r\n            //pageTitle\r\n        } = this.props;\r\n        return <>\r\n            {/*<h2>{pageTitle}</h2>*/}\r\n\r\n            <Users followingInProgress={followingInProgress}\r\n                   totalUsersCount={totalUsersCount}\r\n                   pageSize={pageSize}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={users}\r\n                   isLoading={isLoading}\r\n                   followThunkCreator={followThunkCreator}\r\n                   unfollowThunkCreator={unfollowThunkCreator}\r\n                   currentPage={currentPage}/>\r\n        </>\r\n    }\r\n};\r\n\r\nexport default UsersContainerAJAX;","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {followThunkCreator, usersAC} from \"../../redux/users-reduser\";\r\nimport {unfollowThunkCreator} from \"../../redux/users-reduser\";\r\nimport {getUsers} from \"../../redux/users-reduser\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress, getIsLoading,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersSelector\r\n} from \"../../redux/users-selectors\";\r\nimport {userType} from \"../../types/types\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport UsersContainerAJAX from \"./UsersContainerAJAX\";\r\n\r\ntype MapStatePropsType = {\r\n    followingInProgress: Array<number>\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    isLoading: boolean\r\n    currentPage: number\r\n    users: Array<userType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    unfollowThunkCreator: (id: number) => void\r\n    followThunkCreator: (id: number) => void\r\n}\r\n\r\nexport type UsersOwnPropsType = {\r\n    //pageTitle: string\r\n}\r\n\r\nexport type UsersPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\n\r\nlet mapStateToProps = (state: StateType): MapStatePropsType => {\r\n    return {\r\n        followingInProgress: getFollowingInProgress(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        pageSize: getPageSize(state),\r\n        users: getUsersSelector(state),\r\n        currentPage: getCurrentPage(state),\r\n        isLoading: getIsLoading(state)\r\n    }\r\n};\r\n\r\nconst setCurrentPage = usersAC.setCurrentPage\r\n\r\nconst UsersContainer = compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, UsersOwnPropsType, StateType>(mapStateToProps,\r\n    {\r\n        followThunkCreator, unfollowThunkCreator, getUsers, setCurrentPage\r\n    }), withAuthRedirect)(UsersContainerAJAX);\r\n\r\nexport default UsersContainer;","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const {isAuth, login, logout} = props\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://i.mycdn.me/image?id=886337513216&ts=0000000000000f0154&plc=WEB&tkn=*u1GpzXPcA82wxOfVLnRWdSlOcvM&fn=sqr_288_2x\"\r\n                alt=\"\"\r\n            />\r\n            <div className={s.loginBlock}>\r\n                {isAuth\r\n                    ? <div>\r\n                        {login} - <button onClick={logout}>\r\n                        Log out\r\n                    </button>\r\n                    </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {authAC, logout} from \"../../redux/auth-reduser\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\n//const setAuthUserData = authAC.setAuthUserData;\r\n\r\nlet HeaderContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {logout})(Header);\r\n\r\nexport default HeaderContainer;\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeysType, Input} from \"../common/FormsControls/FormControls\";\r\nimport {required} from \"../../utilities/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reduser\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from './../common/FormsControls/FormControls.module.css';\r\nimport styleLogin from './Login.module.css';\r\nimport {StateType} from \"../../redux/redux-store\";\r\n\r\n\r\n///////////////////////-LoginForm-//////////////////////\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n//type LoginFormKeysType = 'email' | 'password' | 'rememberMe' | captcha\r\n//type LoginFormKeysType = Extract<keyof LoginFormValuesType, string>;\r\ntype LoginFormKeysType = GetStringKeysType<LoginFormValuesType>;\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = (props) => {\r\n    const {handleSubmit, error, captcha} = props;\r\n    return <form onSubmit={handleSubmit}>\r\n        {createField<LoginFormKeysType>('email', \"email\", [required], Input)}\r\n        {createField<LoginFormKeysType>('Password', 'password', [required], Input, {type: 'password'})}\r\n        {createField<LoginFormKeysType>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n        {error && <div className={style.summaryError}>{error}</div>}\r\n        <div>\r\n            <button>Login</button>\r\n        </div>\r\n        {captcha && <div>\r\n            <img src={captcha} alt=\"\"/>\r\n            <div>\r\n                {createField<LoginFormKeysType>('введите символы с картинки', 'captcha', [required], Input, {})}\r\n            </div>\r\n        </div>}\r\n    </form>\r\n};\r\n\r\n/////////////////////-ReduxLoginForm-////////////////////////////////////////\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n\r\n\r\n////////////////////////////-Login-//////////////////////////////////////////////////////////\r\ntype LoginPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const onSubmit = (values: LoginFormValuesType) => {\r\n        props.login(values.email, values.password, values.rememberMe, values.captcha)\r\n    };\r\n    if (props.isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n    return <div className={styleLogin.login}>\r\n        <h3>Login</h3>\r\n        <ReduxLoginForm onSubmit={onSubmit}\r\n                        captcha={props.captcha}/>\r\n    </div>\r\n};\r\n\r\n////////////////////////-LoginContainer-//////////////////////////////////////////////////////\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captcha: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captcha: state.auth.captcha\r\n});\r\n\r\nconst LoginContainer = connect(mapStateToProps, {login})(Login);\r\n\r\nexport default LoginContainer;\r\n\r\n","import React, {Component, Suspense} from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {Route, Switch} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginContainer from \"./components/Login/Login\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {AppPropsType} from \"./AppContainer\";\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\nclass App extends React.Component<AppPropsType & OwnPropsType, LocalStateType> {\n\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(e);\n    }\n\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Suspense fallback={<div>Загрузка...</div>}>\n                        <Switch>\n                            <Route exact path='/' render={() => <ProfileContainer/>}/>\n                            <Route path='/news' render={() => <News/>}/>\n                            <Route path='/music' component={Music}/>\n                            <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                            <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                            {/*<Route path='/users' render={() => <UsersContainer pageTitle={'Пользователи'}/>}/>*/}\n                            <Route path='/users' render={() => <UsersContainer/>}/>\n                            <Route path='/login' render={() => <LoginContainer/>}/>\n                            <Route path='*' render={() => <div>404 Page not found</div>}/>\n                        </Switch>\n                    </Suspense>\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default App;\n\ntype OwnPropsType = {\n    //pageTitle: string\n}\n\ntype PropsType = {\n    initializeApp: () => void\n    initialized: boolean\n}\n\ntype LocalStateType = {}","import {connect, Provider} from \"react-redux\";\r\nimport store, {StateType} from \"./redux/redux-store\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport App from \"./App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    initialized: state.app.initialized\r\n});\r\n\r\nconst AppContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {initializeApp})(App)\r\n\r\ntype MapStatePropsType = {\r\n    initialized: boolean\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n};\r\n\r\nexport type AppPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst AppGlobal = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default AppGlobal;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppGlobal from \"./AppContainer\";\n\nReactDOM.render(\n    <AppGlobal/>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n\n","import preloader from \"../../../assets/img/oval.svg\";\r\nimport React from \"react\";\r\nimport style from './Preloader.module.css'\r\n\r\nlet Preloader: React.FC = () => {\r\n    return (\r\n        <div className={style.preloader}>\r\n            <img className={style.img} src={preloader} alt=\"\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormControls_error__BPla1\",\"errorText\":\"FormControls_errorText__2oHqt\",\"summaryError\":\"FormControls_summaryError__3XmgK\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) =>\r\n    value ? undefined : 'Field is required';\r\n\r\nexport const maxLength = (max: number): FieldValidatorType => (value) =>\r\n    value && value.length > max\r\n        ? `Количество введенных символов больше, чем ${max}`\r\n        : undefined;\r\n\r\nexport const maxLength30 = maxLength(30);\r\nexport const maxLength100 = maxLength(100);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Paginator_pagination__18p3_\",\"paginationItem\":\"Paginator_paginationItem__30SkM\",\"selected\":\"Paginator_selected__15uXf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__17QRK\",\"img\":\"Preloader_img__3mjMk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3pvtt\",\"loginBlock\":\"Header_loginBlock__2GtUP\"};","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsRedirect = (state: StateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n       let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, StateType>(mapStateToPropsRedirect)(RedirectComponent);\r\n};","import {photosType, ProfileType} from \"../types/types\";\r\nimport {instance, ResponseTypeAPI} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: photosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    async getProfile(id: number) {\r\n        let response = await instance.get<ProfileType>(`profile/${id}`)\r\n        return response.data;\r\n    },\r\n    async getStatus(id: number) {\r\n        let response = await instance.get<string>(`profile/status/${id}`)\r\n        return response.data;\r\n    },\r\n    async updateStatus(status: string) {\r\n        let response = await instance.put<ResponseTypeAPI>(`profile/status`, {status: status})\r\n        return response.data;\r\n    },\r\n    async savePhoto(photo: any) {\r\n        const formData = new FormData();\r\n        formData.append('image', photo);\r\n        let response = await instance.put('profile/photo', formData);\r\n        return response.data;\r\n    },\r\n    async saveProfile(values: ProfileType) {\r\n        let response = await instance.put<ResponseTypeAPI<SavePhotoResponseDataType>>(`profile`, values)\r\n        return response.data;\r\n    }\r\n};","import {FormAction, stopSubmit} from 'redux-form';\r\nimport {photosType, PostType, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Первое сообщение', likeCount: 1},\r\n        {id: 2, message: 'Второе сообщение', likeCount: 2},\r\n        {id: 3, message: 'Третье сообщение', likeCount: 3},\r\n        {id: 4, message: 'Четвертое сообщение', likeCount: 5}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    isLoading: false\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profile/ADD_POST': {\r\n            let id = state.posts ? state.posts[state.posts.length - 1].id + 1 : 1;\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    id: id,\r\n                    message: action.post,\r\n                    likeCount: 0\r\n                }]\r\n\r\n            };\r\n        }\r\n        case 'profile/DELETE_POST': {\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.id)}\r\n        }\r\n        case 'profile/SET_USER_PROFILE': {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case 'profile/SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'profile/SET_PHOTOS': {\r\n            return ({\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as any //profileType\r\n            })\r\n        }\r\n        case 'profile/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport const profileAC = {\r\n    toggleLoading: (isLoading: boolean) => ({type: 'profile/TOGGLE_LOADING', isLoading} as const),\r\n    addPost: (post: string) => ({type: 'profile/ADD_POST', post} as const),\r\n    deletePost: (id: number) => ({type: 'profile/DELETE_POST', id} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'profile/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\r\n    setPhotos: (photos: File) => ({type: 'profile/SET_PHOTOS', photos} as const)\r\n};\r\n\r\ntype ActionsType = GetActionsType<typeof profileAC>\r\ntype GetStateType = () => StateType\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\nexport const getProfile = (id: number): ThunkType => async (dispatch) => {\r\n    dispatch(profileAC.toggleLoading(true));\r\n    let data = await profileAPI.getProfile(id);\r\n    dispatch(profileAC.setUserProfile(data));\r\n    dispatch(profileAC.toggleLoading(false));\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    dispatch(profileAC.toggleLoading(true));\r\n    const data = await profileAPI.getStatus(id);\r\n    dispatch(profileAC.setStatus(data));\r\n    dispatch(profileAC.toggleLoading(false));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleLoading(true));\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setStatus(status));\r\n            dispatch(profileAC.toggleLoading(false));\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(photo);\r\n    if (data.resultCode === 0) {\r\n        dispatch(profileAC.setPhotos(data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (values: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const data = await profileAPI.saveProfile(values)\r\n    const id = getState().auth.id\r\n    if (data.resultCode === 0) {\r\n        if (id !== null) {\r\n            dispatch(getProfile(id));\r\n        } else {\r\n            throw new Error('userId can not be null')\r\n        }\r\n\r\n    } else { // ошибка\r\n        //data.messages[0]\r\n        let errorFields = {} as any;\r\n        for (let message of data.messages) {\r\n            let key = message.slice(30, message.length - 1).toLowerCase();\r\n            errorFields[key] = 'Invalid url format';\r\n        }\r\n        //dispatch(stopSubmit('profileAboutMeForm', {_error: 'error'}));\r\n        dispatch(stopSubmit('profileAboutMeForm', {'contacts': errorFields}));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;"],"sourceRoot":""}