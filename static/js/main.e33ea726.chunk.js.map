{"version":3,"sources":["redux/app-selectors.ts","hoc/withAuthRedirect.tsx","redux/app-reducer.ts","Components/common/SendMessageForm.tsx","utilities/date.ts","utilities/objects-helpers.js","DAL/users-api.ts","redux/users-reduser.ts","redux/profile-selectors.ts","Components/common/RenderTextareaField.tsx","DAL/api.ts","Components/common/RenderNakedTextareaField.tsx","redux/users-selectors.ts","Components/common/RenderCheckbox.tsx","utilities/validators/validators.ts","serviceWorker.js","redux/redux-store.ts","redux/sidebar-selectors.ts","Components/Header/HeaderSearch.tsx","Components/Header/Header.tsx","const/const.js","Components/Sidebar/SidebarItem.tsx","Components/Sidebar/Sidebar.tsx","Components/common/RenderPasswordField.tsx","Components/Login/Login.tsx","Components/Main/Users/User.tsx","Components/common/Paginator.tsx","Components/common/RenderRadioButton.tsx","Components/Main/Users/SearchUsers.tsx","Components/Main/Users/Users.tsx","Components/Main/Friends/FriendsListItem.tsx","Components/Main/Friends/FriendsSearch.tsx","Components/Main/Friends/FriendsList.tsx","Components/Main/Friends/FriendsSidebar.tsx","Components/Main/Friends/FriendsSomethingElse.tsx","Components/Main/Friends/Friends.tsx","Components/Main/Settings/Settings.tsx","Components/Main/Main.tsx","App.tsx","AppContainer.tsx","index.js","redux/sidebar-reducer.ts","Components/common/CircularPreloader.tsx","DAL/dialogs-api.ts","redux/dialogs-reducer.ts","DAL/auth-api.ts","DAL/security-api.ts","redux/auth-reducer.ts","redux/dialogs-selectors.ts","Components/common/RenderTextField.tsx","redux/auth-selectors.ts","DAL/profile-api.ts","redux/profile-reducer.ts"],"names":["getIsInitializedSelector","state","app","isInitialized","getIsLoading","isLoading","mapStateToPropsRedirect","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","initialState","globalError","lanError","appAC","setIsInitialized","type","toggleLoading","setLanError","getIsInitialized","dispatch","a","console","log","promise","getAuthUserData","Promise","all","then","e","appReducer","action","ReduxForm","reduxForm","form","handleSubmit","submitting","pristine","classes","useStyles","classesField","useStylesField","onSubmit","name","component","RenderTextAreaField","validate","shouldNotBeEmpty","autoFocus","className","textArea","label","placeholder","size","color","variant","startIcon","disabled","button","SendMessageForm","open","onClose","id","src","dialogs","useDispatch","dialogIsExist","some","el","paper","dialog","titleWrapper","title","RouterLink","titleLink","onClick","dialogsAC","setCurrentFriendsId","titleIcon","content","friendInfo","avatar","formValue","sendMessage","message","makeStyles","width","display","alignItems","backgroundColor","indigo","padding","flexGrow","marginLeft","marginRight","paddingBottom","marginTop","root","DATE","getCurrentDate","Date","getMonthWord","month","dateTranslateFromJS","date","getMonth","day","getDate","hours","getHours","minutes","getMinutes","monthWord","this","dateTranslateFromAPI","slice","hour","updateObjectInArray","items","itemId","objPropName","newObjProps","map","item","usersAPI","getUsers","currentPage","pageSize","instance","get","response","data","searchUsers","term","friend","url","friendUrl","followUser","post","unfollowUser","delete","users","pageFriendsSize","totalUsersCount","totalFriendsCount","currentFriendsPage","isFollowing","followingInProgress","friends","searchUsersParams","searchFriendsParams","isFriendsSearching","showUsersFrom","currentFriendsSidebarItem","needToChangeListOfFriends","friendIdToRemove","usersAC","toggleIsFriendsSearching","setNeedToChangeListOfFriends","setCurrentFriendsSidebarItem","setFriends","setSearchFriendsParams","setSearchUsersParams","setFollow","userId","setUnfollow","setUsers","setCurrentPage","setCurrentFriendsPage","setTotalUsersCount","setTotalFriendsCount","toggleFollowing","toggleFollowingProgress","setShowUsersFrom","totalCount","searchFriends","removeAndUpdateFriends","resultCode","_followUnfollowFlow","apiMethod","actionCreator","getFollow","bind","getUnfollow","usersReducer","followed","filter","getPosts","profile","posts","getProfileSelector","getCurrentUserProfileSelector","currentUserProfile","getStatusSelector","status","getAvatarIsLoading","avatarIsLoading","getStatusIsLoading","statusIsLoading","getEditMode","editMode","getCurrentInfoFormSidebarItem","currentInfoFormSidebarItem","getFollowedSelector","getEditingPost","editingPost","icon","input","meta","touched","invalid","error","custom","rows","styles","iconLeft","InputProps","multiline","helperText","position","left","top","transform","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","baseURL","withCredentials","headers","RenderNakedTextAreaField","getUsersSelector","getFriendsSelector","getPageSize","getCurrentPage","getCurrentFriendsPage","getFollowingInProgress","getTotalUsersCount","getTotalFriendsCount","getIsFollowing","getSearchUsersParams","getSearchFriendsParams","getShowUsersFrom","getCurrentFriendsSidebarItem","getNeedToChangeListOfFriends","getFriendIdToRemove","getIsFriendsSearching","RenderCheckbox","control","checked","value","onChange","required","undefined","maxLength","max","length","maxLength30","empty","str","test","Boolean","window","location","hostname","match","rootReducer","combineReducers","profileReducer","dialogsReducer","sidebar","sidebarReducer","authReducer","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","getSidebarIsOpen","sidebarIsOpen","getCurrentSidebarItem","currentSidebarItem","fieldWrapper","Field","field","HeaderSearch","height","borderRadius","paddingRight","theme","createStyles","transition","transitions","Header","classes2","useStyles2","useSelector","getIsAuth","login","getLogin","getId","useEffect","getProfile","React","useState","setOpen","anchorRef","useRef","handleClose","event","current","contains","target","handleListKeyDown","key","preventDefault","prevOpen","focus","onSettingsClick","onLogoutClick","logout","AppBar","clsx","appBar","appBarShift","Toolbar","IconButton","aria-label","sidebarAC","setSidebarIsOpen","edge","menuButton","hide","Typography","noWrap","logo","Button","ref","aria-controls","aria-haspopup","photos","small","Avatar","Popper","anchorEl","role","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","ListItemIcon","ListItemText","primary","easing","sharp","duration","leavingScreen","easeOut","enteringScreen","spacing","minHeight","textTransform","paddingTop","SidebarItem","ownIndex","ListItem","setCurrentSidebarItem","profileAC","setEditMode","selected","text","fontWeight","Sidebar","useTheme","Drawer","drawer","paperAnchorDockedLeft","drawerPaper","anchor","drawerHeader","direction","Divider","List","flexShrink","mixins","toolbar","justifyContent","border","RenderPasswordField","showPassword","setShowPassword","password","setPassword","FormControl","textField","InputLabel","htmlFor","outlined","OutlinedInput","outlinedInputRoot","outlinedInputInput","endAdornment","InputAdornment","onMouseDown","iconButton","labelWidth","paddingLeft","ReduxLoginForm","captcha","RenderTextField","alt","fullWidth","Login","getCaptchaSelector","Card","card","elevation","align","values","email","rememberMe","marginBottom","User","user","openSendMessageForm","setOpenSendMessageForm","buttonLabel","Grid","CardActionArea","CardContent","cardContent","CardActions","disableSpacing","cardActions","buttons","buttonWrapper","CircularPreloader","media","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","startPortionNumber","endPortionNumber","elements","p","buttonRoot","disableElevation","prevPortionLabelEnd","prevPortionLabel","nextPortionLabelEnd","nextPortionLabel","paginator","iconButtonRoot","minWidth","RenderRadioButton","labels","rest","formControlLabelElements","FormControlLabel","formControlLabel","Radio","FormLabel","formLabel","RadioGroup","radioGroup","SearchUsersReduxForm","reset","classesRadioButton","useStylesRadioButton","submit","SearchUsers","h6","divider","initialValues","margin","flexDirection","getDialogsSelector","searchPanelIsOpen","setSearchPanelIsOpen","getDialogs","usersElements","countTitle","Collapse","in","timeout","unmountOnExit","count","Badge","badgeContent","showZero","pageNumber","container","alignContent","justify","wrap","FriendsListItem","somethingElseHandle","callbacks","menuItemsElements","listItem","listItemInner","listItemInnerleft","ListItemAvatar","large","Link","popper","zIndex","FriendsSearch","search","FriendsList","FriendsListElements","titleleft","FriendsSidebar","Tabs","indicator","orientation","newValue","tabs","Tab","wrapper","tabRoot","labelIcon","borderLeft","right","FriendsSomethingElse","leftColumn","rightColumn","flexBasis","Settings","Dialogs","lazy","Profile","Main","contentShift","fallback","exact","path","render","withRouter","messageIsSending","getMessageIsSending","recipientName","getRecipientName","showAlert","setShowAlert","catchAllUnhandledErrors","alert","addEventListener","removeEventListener","reason","Snackbar","autoHideDuration","Alert","severity","AppGlobal","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","classesAbsolute","useStylesAbsolute","classesStaticCenter","useStylesStaticCenter","classesStaticTop","useStylesStaticTop","circularWrapper","circular","bottom","dialogsAPI","body","messageId","currentDialogsListItem","currentFriendsId","messages","selectedMessagesId","dialogsIsLoading","messagesIsLoading","deleteAndSpamMessagesId","setMessagesIsLoading","setRecipientName","setMessageIsSending","toggleDialogsIsLoading","cleanSelectedId","addSelectedId","removeSelectedId","setMessages","setDialogs","setCurrentDialogsListItem","getMessages","deleteMessages","arrayOfMessagesId","arrayOfRequests","results","resultCodeFinally","authAPI","securityAPI","authAC","Success","CaptchaIsRequired","getCaptchaUrl","stopSubmit","_error","getMessagesSelector","getCurrentFriendsId","getSelectedMessagesId","getDialogsIsLoading","getMessagesIsLoading","profileAPI","put","photo","formData","FormData","append","likeCount","likeMe","time","toggleLikeMe","postId","setEditingPost","setCurrentUserProfile","setFollowed","setCurrentInfoFormSidebarItem","addPost","deletePost","setUserProfile","setStatus","setPhotos","toggleAvatarLoading","toggleStatusLoading","getCurrentUserProfile","getFollowed","getStatus","updateStatus","savePhoto","saveProfile","getState","errorFields","toLowerCase","reject"],"mappings":"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","file":"static/js/main.e33ea726.chunk.js","sourcesContent":["import {StateType} from \"./redux-store\";\r\n\r\nexport const getIsInitializedSelector = (state: StateType) => state.app.isInitialized;\r\nexport const getIsLoading = (state: StateType) => state.app.isLoading;\r\nexport const getLanError = (state: StateType) => state.app.lanError;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsRedirect = (state: StateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n       let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, StateType>(mapStateToPropsRedirect)(RedirectComponent);\r\n};","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>;\r\ntype ThunkType = BaseThunkType<AppActionsType>\r\n\r\nlet initialState = {\r\n    isInitialized: false,\r\n    globalError: null,\r\n    isLoading: false,\r\n    lanError: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_IS_INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized};\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        };\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setIsInitialized: (isInitialized: boolean) => ({type: 'APP/SET_IS_INITIALIZED', isInitialized} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n};\r\n\r\nexport const getIsInitialized = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        console.log('getInitialized')\r\n        dispatch(appAC.toggleLoading(true));\r\n        let promise = dispatch(getAuthUserData());\r\n        // dispatch(somethingElse());\r\n        // dispatch(somethingElse());\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(appAC.setIsInitialized(true));\r\n            })\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport default appReducer;","import React from \"react\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport RenderTextAreaField from \"./RenderTextareaField\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {dialogsAC, sendMessage} from \"../../redux/dialogs-reducer\";\r\nimport {DialogType} from \"../../DAL/dialogs-api\";\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine} = props;\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field name='message'\r\n                   component={RenderTextAreaField}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   autoFocus={true}\r\n                   className={classes.textArea}\r\n                   classes={classesField}\r\n                   label='Enter your message'\r\n                   placeholder='Enter your message'\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SendIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    Send message\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'send-message',\r\n})(Form);\r\n\r\n//================ COMPONENT =========================================\r\nconst SendMessageForm: React.FC<ComponentPropsType> = ({open, onClose, id, name, src, dialogs}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormCloseHandle = () => {\r\n        onClose(false);\r\n    };\r\n\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(sendMessage(id, formValue.message));\r\n        onClose(false);\r\n    };\r\n\r\n    const onListItemClick = () => {\r\n        dispatch(dialogsAC.setCurrentFriendsId(id))\r\n    };\r\n\r\n    const dialogIsExist = dialogs && dialogs.some(el => el.id === id);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dialogs &&\r\n                <Dialog open={open}\r\n                        classes={{\r\n                            paper: classes.paper\r\n                        }}\r\n                        className={classes.dialog}\r\n                >\r\n                    <div className={classes.titleWrapper}>\r\n                        <Typography className={classes.title}>\r\n                            New message\r\n                        </Typography>\r\n\r\n                        {\r\n                            dialogIsExist &&\r\n                            <Link component={RouterLink}\r\n                                  to={`/dialogs/${id}`}\r\n                                  variant='body2'\r\n                                  className={classes.titleLink}\r\n                                  onClick={onListItemClick}\r\n                            >\r\n                                Go to dialog with {name}\r\n                            </Link>\r\n                        }\r\n\r\n                        <IconButton className={classes.titleIcon}\r\n                                    onClick={onFormCloseHandle}\r\n                        >\r\n                            <HighlightOffIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n\r\n                    <DialogContent className={classes.content}>\r\n                        <div className={classes.friendInfo}>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={src}\r\n                            />\r\n                            <Link component={RouterLink}\r\n                                  to={`/users/${id}`}\r\n                                  variant='subtitle2'\r\n                                //onClick={onListItemClick}\r\n                            >\r\n                                {name}\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <ReduxForm onSubmit={onSubmit}/>\r\n\r\n                    </DialogContent>\r\n\r\n                </Dialog>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SendMessageForm;\r\n\r\n//=========================== TYPE =======================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    message: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {\r\n    open: boolean\r\n    onClose: (openForm: boolean) => void\r\n    id: number\r\n    name: string\r\n    src: string | undefined\r\n    dialogs: Array<DialogType> | null\r\n}\r\n//========================== STYLES ======================\r\nconst useStyles = makeStyles({\r\n    dialog: {\r\n        //width: 500\r\n    },\r\n    paper: {\r\n        width: 500\r\n    },\r\n    titleWrapper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: indigo[500],\r\n        color: 'white',\r\n        padding: '5px 5px 5px 15px',\r\n\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    titleLink: {\r\n        color: 'white',\r\n    },\r\n    titleIcon: {\r\n        color: 'white',\r\n        marginLeft: 10\r\n    },\r\n    friendInfo: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '10px 0 15px 0'\r\n    },\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    content: {\r\n        backgroundColor: indigo[50],\r\n        paddingBottom: 15\r\n    },\r\n    textArea: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        marginTop: 15\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles({\r\n    root: {\r\n        backgroundColor: 'white'\r\n    },\r\n})","export const DATE = {\r\n    // получение текущей даты\r\n    // RETURN - JS DATE\r\n    getCurrentDate() {\r\n        return new Date();\r\n    },\r\n\r\n    getMonthWord(month: number) {\r\n        switch (month) {\r\n            case 1: {\r\n                return 'January';\r\n            }\r\n            case 2: {\r\n                return 'February';\r\n            }\r\n            case 3: {\r\n                return 'March';\r\n            }\r\n            case 4: {\r\n                return 'April';\r\n            }\r\n            case 5: {\r\n                return 'May';\r\n            }\r\n            case 6: {\r\n                return 'June';\r\n            }\r\n            case 7: {\r\n                return 'July';\r\n            }\r\n            case 8: {\r\n                return 'August';\r\n            }\r\n            case 9: {\r\n                return 'September';\r\n            }\r\n            case 10: {\r\n                return 'October';\r\n            }\r\n            case 11: {\r\n                return 'November';\r\n            }\r\n            case 12: {\r\n                return 'December';\r\n            }\r\n        }\r\n    },\r\n\r\n    dateTranslateFromJS(date: Date) {\r\n        let month = date.getMonth() + 1;\r\n        let day = date.getDate();\r\n        let hours = date.getHours() as number | string;\r\n        let minutes = date.getMinutes() as number | string;\r\n\r\n        if (hours < 10) {\r\n            hours = `0${hours}`\r\n        };\r\n\r\n        if (minutes < 10) {\r\n            minutes = `0${minutes}`\r\n        };\r\n\r\n        let monthWord = this.getMonthWord(+month);\r\n        return `${day} ${monthWord} in ${hours}:${minutes}`;\r\n    },\r\n\r\n    dateTranslateFromAPI(date: string) {\r\n        const year = date.slice(0, 4);\r\n        const month = date.slice(5, 7);\r\n        const monthWord = this.getMonthWord(+month);\r\n        const day = date.slice(8, 10);\r\n        const hour = date.slice(11, 13);\r\n        const minutes = date.slice(14, 16);\r\n        return `${day} ${monthWord} in ${hour}:${minutes}`\r\n    }\r\n\r\n\r\n}","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(item => {\r\n        if (item[objPropName] === itemId) {\r\n            return {...item, ...newObjProps}\r\n        }\r\n        return item;\r\n    })\r\n};","import {GetItemsType, instance, ResponseTypeAPI} from \"./api\";\r\nimport {FriendsValuesType} from \"../types/types\";\r\n\r\nexport const usersAPI = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        let response = await instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`);\r\n        return response.data;\r\n    },\r\n\r\n    async searchUsers(currentPage = 1, pageSize = 10, term: string, friend: FriendsValuesType) {\r\n        let url = `users?page=${currentPage}&count=${pageSize}`;\r\n        if (term) url = url + `&term=${term}`;\r\n        let friendUrl;\r\n        if (friend === 'all') {\r\n            friendUrl = ''\r\n        } else {\r\n            friendUrl = `&friend=${friend}`\r\n        }\r\n        url = url + friendUrl;\r\n        let response = await instance.get<GetItemsType>(url);\r\n        return response.data;\r\n    },\r\n\r\n    async followUser(id: number) {\r\n        let response = await instance.post<ResponseTypeAPI>(`follow/${id}`)\r\n        return response.data;\r\n    },\r\n    async unfollowUser(id: number) {\r\n        let response = await instance.delete(`follow/${id}`) //as AxiosResponse<any>\r\n                return response.data as Promise<ResponseTypeAPI>;\r\n      },\r\n    // async getProfile(id: number) {\r\n    //     let response = await instance.get<>(`profile/${id}`)\r\n    //     return response.data;\r\n    // }\r\n};\r\n\r\n//================================= TYPE =======================================\r\ntype friendType = 'all' | 'friend' | 'not friend';\r\n","import {updateObjectInArray} from \"../utilities/objects-helpers\";\r\nimport {\r\n    FriendsValuesType, SearchFriendsParamsType,\r\n    SearchUsersParamsType,\r\n    UserType\r\n} from \"../types/types\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../DAL/users-api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    users: null as null | Array<UserType>,\r\n    pageSize: 10,\r\n    pageFriendsSize: 10,\r\n    totalUsersCount: 0,\r\n    totalFriendsCount: 0,\r\n    currentPage: 1,\r\n    currentFriendsPage: 1,\r\n    isLoading: false,\r\n    isFollowing: false,\r\n    // массив пользователей, для которых послан запрос на подписку/отписку\r\n    followingInProgress: [] as Array<number>,\r\n    friends: null as null | Array<UserType>,\r\n    searchUsersParams: {term: '', friend: 'all'} as SearchUsersParamsType,\r\n    searchFriendsParams: {term: ''} as SearchFriendsParamsType,\r\n    isFriendsSearching: false,\r\n    showUsersFrom: 'all' as 'all' | 'search',\r\n    currentFriendsSidebarItem: 0,\r\n    needToChangeListOfFriends: false,\r\n    friendIdToRemove: null as null | number\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'USERS/TOGGLE_IS_FRIENDS_SEARCHING': {\r\n            return {...state, isFriendsSearching: action.isFriendsSearching}\r\n        }\r\n        case 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS': {\r\n            return {...state,\r\n                needToChangeListOfFriends: action.needToChangeListOfFriends,\r\n                friendIdToRemove: action.friendIdToRemove\r\n            }\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM': {\r\n            return {...state, currentFriendsSidebarItem: action.currentFriendsSidebarItem}\r\n        }\r\n        case 'USERS/SET_FRIENDS': {\r\n            return {...state, friends: action.friends}\r\n        }\r\n        case 'USERS/SET_SHOW_USERS_FROM': {\r\n            return {...state, showUsersFrom: action.showUsersFrom}\r\n        }\r\n        case 'USERS/SET_SEARCH_FRIENDS_PARAMS': {\r\n            return {...state, searchFriendsParams: action.searchFriendsParams}\r\n        }\r\n        case 'USERS/SET_SEARCH_USERS_PARAMS': {\r\n            return {...state, searchUsersParams: action.searchUsersParams}\r\n        }\r\n        case 'USERS/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        }\r\n        case 'USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        }\r\n        case 'USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage};\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_PAGE': {\r\n            return {...state, currentFriendsPage: action.currentFriendsPage};\r\n        }\r\n        case 'USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        }\r\n        case 'USERS/SET_TOTAL_FRIENDS_COUNT': {\r\n            return {...state, totalFriendsCount: action.totalFriendsCount};\r\n        }\r\n        case 'USERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING': {\r\n            return {...state, isFollowing: action.isFollowing}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                // если запрос на подписку-отписку послан - добавить в массив, иначе удалить из массива\r\n                followingInProgress:\r\n                    action.followingInProgress\r\n                        ? [...state.followingInProgress, action.id]\r\n                        : state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const usersAC = {\r\n    toggleIsFriendsSearching: (isFriendsSearching: boolean) => ({type: 'USERS/TOGGLE_IS_FRIENDS_SEARCHING', isFriendsSearching} as const),\r\n    setNeedToChangeListOfFriends: (needToChangeListOfFriends: boolean, friendIdToRemove: number | null) => ({\r\n        type: 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS',\r\n        needToChangeListOfFriends,\r\n        friendIdToRemove\r\n    } as const),\r\n    setCurrentFriendsSidebarItem: (currentFriendsSidebarItem: number) => ({\r\n        type: 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM',\r\n        currentFriendsSidebarItem\r\n    } as const),\r\n    setFriends: (friends: Array<UserType>) => ({type: 'USERS/SET_FRIENDS', friends} as const),\r\n    setSearchFriendsParams: (searchFriendsParams: SearchFriendsParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_FRIENDS_PARAMS',\r\n        searchFriendsParams\r\n    } as const),\r\n    setSearchUsersParams: (searchUsersParams: SearchUsersParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_USERS_PARAMS',\r\n        searchUsersParams\r\n    } as const),\r\n    setFollow: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    setUnfollow: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setCurrentFriendsPage: (currentFriendsPage: number) => ({type: 'USERS/SET_CURRENT_FRIENDS_PAGE', currentFriendsPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'USERS/SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n    setTotalFriendsCount: (totalFriendsCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_FRIENDS_COUNT',\r\n        totalFriendsCount\r\n    } as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'USERS/TOGGLE_LOADING', isLoading} as const),\r\n    toggleFollowing: (isFollowing: boolean) => ({type: 'USERS/TOGGLE_FOLLOWING', isFollowing} as const),\r\n    toggleFollowingProgress: (followingInProgress: boolean, id: number) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        followingInProgress,\r\n        id\r\n    } as const),\r\n    setShowUsersFrom: (showUsersFrom: 'all' | 'search') => ({type: 'USERS/SET_SHOW_USERS_FROM', showUsersFrom} as const),\r\n    };\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize);\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchUsers = (currentPage: number, pageSize: number, term: string, friend: FriendsValuesType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, friend);\r\n        console.log('searchUsers')\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchFriends = (currentPage: number, pageSize: number, term: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleIsFriendsSearching(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, 'true');\r\n        dispatch(usersAC.setFriends(data.items));\r\n        dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleIsFriendsSearching(false));\r\n    }\r\n};\r\n\r\nexport const removeAndUpdateFriends = (currentPage: number, pageSize: number, id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(true, id));\r\n        let dataFromUnfollow = await usersAPI.unfollowUser(id);\r\n        if (dataFromUnfollow.resultCode === 0) {\r\n            let data = await usersAPI.searchUsers(currentPage, pageSize, '', 'true');\r\n            dispatch(usersAC.setFriends(data.items));\r\n            dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n            dispatch(usersAC.setNeedToChangeListOfFriends(false, null));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(false, id));\r\n    }\r\n};\r\n\r\n\r\ntype FollowUnfollwType = UsersActionsType;//followType | unfollowType\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   id: number,\r\n                                   apiMethod: any,\r\n                                   actionCreator: (id: number) => FollowUnfollwType) => {\r\n    dispatch(usersAC.toggleFollowing(true));\r\n    dispatch(usersAC.toggleFollowingProgress(true, id));\r\n    let data = await apiMethod(id)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(usersAC.toggleFollowingProgress(false, id));\r\n};\r\n\r\nexport const getFollow = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        await _followUnfollowFlow(dispatch, id, usersAPI.followUser.bind(id), usersAC.setFollow);\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(false));\r\n    }\r\n\r\n};\r\n\r\nexport const getUnfollow = (id: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, id, usersAPI.unfollowUser.bind(id), usersAC.setUnfollow);\r\n};\r\n\r\nexport default usersReducer;\r\n\r\n//============================ TYPES ==============================================\r\nexport type initialStateType = typeof initialState;\r\ntype UsersActionsType = GetActionsType<typeof usersAC>\r\ntype DispatchType = Dispatch<UsersActionsType>\r\ntype ThunkType = BaseThunkType<UsersActionsType | AppActionsType>","import {StateType} from \"./redux-store\";\r\n\r\nexport const getPosts = (state: StateType) => state.profile.posts;\r\nexport const getProfileSelector = (state: StateType) => state.profile.profile;\r\nexport const getCurrentUserProfileSelector = (state: StateType) => state.profile.currentUserProfile;\r\nexport const getStatusSelector = (state: StateType) => state.profile.status;\r\nexport const getAvatarIsLoading = (state: StateType) => state.profile.avatarIsLoading;\r\nexport const getStatusIsLoading = (state: StateType) => state.profile.statusIsLoading;\r\nexport const getEditMode = (state: StateType) => state.profile.editMode;\r\nexport const getCurrentInfoFormSidebarItem = (state: StateType) => state.profile.currentInfoFormSidebarItem;\r\nexport const getFollowedSelector = (state: StateType) => state.profile.followed;\r\nexport const getEditingPost = (state: StateType) => state.profile.editingPost;\r\n\r\n\r\n\r\n\r\n","import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextAreaField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid, error}, classes, rows = 4, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                multiline\r\n                //rows={4}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n    rows?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","// DAL - уровень доступа к данным\r\n// упрощенный (через коллбэки) доступ к данным на сервере\r\nimport axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e09d6375-5dac-4dde-95ca-700e186a8f7d'\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseTypeAPI<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","import {InputBaseProps, InputProps, OutlinedInputProps} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst RenderNakedTextAreaField = (props: any) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid, error}, rows = 4, multiline = true, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <InputBase\r\n                //InputProps={classes ? {classes} as Partial<InputProps> : null}\r\n                classes={classes ? classes : null}\r\n                multiline={multiline}\r\n                rows={rows}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                //helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderNakedTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    },\r\n    rows?: number\r\n    multiline?: boolean\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: StateType) => state.users.users;\r\nexport const getFriendsSelector = (state: StateType) => state.users.friends;\r\nexport const getPageSize = (state: StateType) => state.users.pageSize;\r\nexport const getCurrentPage = (state: StateType) => state.users.currentPage;\r\nexport const getCurrentFriendsPage = (state: StateType) => state.users.currentFriendsPage;\r\nexport const getFollowingInProgress = (state: StateType) => state.users.followingInProgress;\r\nexport const getTotalUsersCount = (state: StateType) => state.users.totalUsersCount;\r\nexport const getTotalFriendsCount = (state: StateType) => state.users.totalFriendsCount;\r\nexport const getIsLoading = (state: StateType) => state.users.isLoading;\r\nexport const getIsFollowing = (state: StateType) => state.users.isFollowing;\r\nexport const getSearchUsersParams = (state: StateType) => state.users.searchUsersParams;\r\nexport const getSearchFriendsParams = (state: StateType) => state.users.searchFriendsParams;\r\nexport const getShowUsersFrom = (state: StateType) => state.users.showUsersFrom;\r\nexport const getCurrentFriendsSidebarItem = (state: StateType) => state.users.currentFriendsSidebarItem;\r\nexport const getNeedToChangeListOfFriends = (state: StateType) => state.users.needToChangeListOfFriends;\r\nexport const getFriendIdToRemove = (state: StateType) => state.users.friendIdToRemove;\r\nexport const getIsFriendsSearching = (state: StateType) => state.users.isFriendsSearching;\r\n\r\n\r\n\r\n","import {FormControlLabel} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderCheckbox: React.FC<PropsType> = (props) => {\r\n    const {input, label, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {icon && <div className={classes.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={input.value ? true : false}\r\n                        color=\"primary\"\r\n                        onChange={input.onChange}\r\n                    />\r\n                }\r\n                label={label}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RenderCheckbox\r\n\r\n//======================== TYPES ============================\r\ntype PropsType = {\r\n    icon?: React.ReactElement\r\n    label: string\r\n    input: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);","export const required: FieldValidatorType = (value) =>\r\n    value ? undefined : 'Field is required';\r\n\r\nexport const maxLength = (max: number): FieldValidatorType => (value) =>\r\n    value && value.length > max\r\n        ? `Number of letters is more than ${max}`\r\n        : undefined;\r\nexport const maxLength10 = maxLength(10);\r\nexport const maxLength30 = maxLength(30);\r\nexport const maxLength100 = maxLength(100);\r\n\r\nexport const empty: EmptyType = (str) => /^\\s+$/.test(str);\r\n\r\nexport const shouldNotBeEmpty: FieldValidatorType = (value) =>\r\n    empty(value) && value !== ''\r\n        ? 'Field should not be empty'\r\n        : undefined;\r\n\r\n//=========================== TYPES =====================================\r\ntype EmptyType = (str: string) => boolean\r\nexport type FieldValidatorType = (value: string) => string | undefined","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\n// объединяем редьюсеры в объект\r\nlet rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getSidebarIsOpen = (state: StateType) => state.sidebar.sidebarIsOpen;\r\nexport const getCurrentSidebarItem = (state: StateType) => state.sidebar.currentSidebarItem;","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderNakedTextAreaField from \"../common/RenderNakedTextareaField\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine} = props;\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={classes.fieldWrapper}>\r\n                <SearchIcon className={classes.icon}/>\r\n                <Field name='name'\r\n                       component={RenderNakedTextAreaField}\r\n                       validate={[shouldNotBeEmpty]}\r\n                    //autoFocus={true}\r\n                       multiline={false}\r\n                    //rows={1}\r\n                       className={classes.field}\r\n                       classes={classesField}\r\n                    //label='Enter your message'\r\n                       placeholder='Search...'\r\n                       size='small'\r\n                />\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'header-search',\r\n})(Form);\r\n\r\nconst HeaderSearch: React.FC = () => {\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        console.log(formValue);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HeaderSearch;\r\n\r\n//=========================== TYPE =======================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    name: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {\r\n    // open: boolean\r\n    // onClose: (openForm: boolean) => void\r\n    // id: number\r\n    // name: string\r\n    // src: string | undefined\r\n    // dialogs: Array<DialogType> | null\r\n}\r\n//========================== STYLES ======================\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        color: 'white',\r\n    },\r\n    fieldWrapper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: indigo[400],\r\n        height: 40,\r\n        borderRadius: 20,\r\n        paddingRight: 20,\r\n        '&:hover': {\r\n            backgroundColor: indigo[300],\r\n        },\r\n        marginRight: 15\r\n    },\r\n    icon: {\r\n        padding: '0 10px'\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        input: {\r\n            transition: theme.transitions.create('width'),\r\n            width: 200,\r\n            '&:focus': {\r\n                width: 300\r\n            }\r\n        }\r\n    })\r\n)","import React, {useEffect} from 'react';\r\nimport {drawerWidth} from \"../../const/const\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {AppBar} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getId, getIsAuth, getLogin} from \"../../redux/auth-selectors\";\r\nimport {getSidebarIsOpen} from \"../../redux/sidebar-selectors\";\r\nimport {getProfileSelector} from \"../../redux/profile-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\nimport {getProfile} from \"../../redux/profile-reducer\";\r\nimport HeaderSearch from \"./HeaderSearch\";\r\n\r\nconst Header: React.FC = () => {\r\n    const classes = useStyles();\r\n    const classes2 = useStyles2();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const sidebarIsOpen = useSelector(getSidebarIsOpen);\r\n    const login = useSelector(getLogin);\r\n    const profile = useSelector(getProfileSelector);\r\n    const id = useSelector(getId);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getProfile(id))\r\n        }\r\n    }, [id]);\r\n\r\n    const handleDrawerOpen = () => {\r\n        dispatch(sidebarAC.setSidebarIsOpen(true));\r\n    };\r\n\r\n    //===================================================================================\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //=========================================================================\r\n    const onSettingsClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event)\r\n    };\r\n    const onLogoutClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event);\r\n        dispatch(logout());\r\n    }\r\n    //==================================================================================\r\n\r\n\r\n    return (\r\n        <AppBar\r\n            position=\"fixed\"\r\n            classes={{\r\n                root: classes2.paper\r\n            }}\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: sidebarIsOpen,\r\n            })}\r\n\r\n        >\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={handleDrawerOpen}\r\n                    edge=\"start\"\r\n                    className={clsx(classes.menuButton, sidebarIsOpen && classes.hide)}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" noWrap className={classes.logo}>\r\n                    Social Network\r\n                </Typography>\r\n\r\n                <HeaderSearch/>\r\n\r\n                {\r\n                    isAuth\r\n                        ? <>\r\n                            <Button\r\n                                ref={anchorRef}\r\n                                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleToggle}\r\n                                classes={{\r\n                                    root: classes.button,\r\n                                    label: classes.label\r\n                                }}\r\n                                color=\"inherit\">\r\n                                <Typography variant=\"subtitle1\" noWrap className={classes.login}>\r\n                                    {login}\r\n                                </Typography>\r\n                                {profile && profile.photos.small\r\n                                    ? <Avatar src={profile.photos.small} className={classes.avatar}/>\r\n                                    : <Avatar className={classes.avatar}/>}\r\n                                <ExpandMoreIcon/>\r\n                            </Button>\r\n                            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n                                {({TransitionProps, placement}) => (\r\n                                    <Grow\r\n                                        {...TransitionProps}\r\n                                        style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                    >\r\n                                        <Paper>\r\n                                            <ClickAwayListener onClickAway={handleClose}>\r\n\r\n                                                <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                          onKeyDown={handleListKeyDown}>\r\n                                                    <MenuItem onClick={onSettingsClick}>\r\n                                                        <ListItemIcon>\r\n                                                            <SettingsIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary=\"Settings\"/>\r\n                                                    </MenuItem>\r\n                                                    <MenuItem onClick={onLogoutClick}>\r\n                                                        <ListItemIcon>\r\n                                                            <ExitToAppIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary=\"Logout\"/>\r\n                                                    </MenuItem>\r\n                                                </MenuList>\r\n                                            </ClickAwayListener>\r\n                                        </Paper>\r\n                                    </Grow>\r\n                                )}\r\n                            </Popper>\r\n                        </>\r\n                        : <Button color=\"inherit\" component={RouterLink} to='/login'>\r\n                            Войти\r\n                        </Button>\r\n                }\r\n\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n\r\n//================================ STYLES =======================================\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            //backgroundColor: 'darkRed'\r\n        },\r\n        appBarShift: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        logo: {\r\n            flexGrow: 1\r\n        },\r\n        login: {\r\n            marginRight: 10\r\n        },\r\n        button: {\r\n            '&:hover': {\r\n                backgroundColor: 'rgba(0,0,0,0.3)',\r\n                borderRadius: 0,\r\n                minHeight: 64\r\n            },\r\n            textTransform: 'none',\r\n            paddingTop: 0,\r\n            paddingBottom: 0\r\n        },\r\n        label: {\r\n            minHeight: 64\r\n        },\r\n        avatar: {\r\n            width: 50,\r\n            height: 50,\r\n            marginRight: 10\r\n        },\r\n\r\n\r\n    }),\r\n);\r\n\r\nconst useStyles2 = makeStyles({\r\n    paper: {\r\n        //backgroundColor: 'green'\r\n    }\r\n});\r\n","export const drawerWidth = 180;","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {profileAC} from \"../../redux/profile-reducer\";\r\nimport {usersAC} from \"../../redux/users-reduser\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\nimport {getCurrentSidebarItem} from \"../../redux/sidebar-selectors\";\r\n\r\nconst SidebarItem: React.FC<PropsTypes> = (props) => {\r\n    const {to, primary, icon, ownIndex} = props;\r\n    const classes = useStyles();\r\n    const currentSidebarItem = useSelector(getCurrentSidebarItem)\r\n    const dispatch = useDispatch();\r\n\r\n    const onClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(ownIndex));\r\n        dispatch(profileAC.setEditMode(false));\r\n        dispatch(usersAC.setShowUsersFrom('all'));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n        dispatch(usersAC.setSearchFriendsParams({term: ''}));\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(0));\r\n    };\r\n\r\n\r\n    return (\r\n        <li>\r\n            <ListItem\r\n                onClick={onClick}\r\n                selected={ownIndex === currentSidebarItem}\r\n                button\r\n                component={RouterLink}\r\n                to={to}>\r\n                {\r\n                    icon\r\n                        ? <ListItemIcon className={clsx(ownIndex === currentSidebarItem && classes.icon)}>\r\n                            {icon}\r\n                        </ListItemIcon>\r\n                        : null\r\n                }\r\n                <ListItemText primary={primary} className={clsx(ownIndex === currentSidebarItem && classes.text)}/>\r\n            </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;\r\n\r\n//============================== TYPES ==================================\r\ntype PropsTypes = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\n//============================== STYLES ===================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    icon: {\r\n        color: indigo[500]\r\n    },\r\n    text: {\r\n        color: indigo[600],\r\n        fontWeight: 900\r\n    }\r\n}));","import React from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SupervisedUserCircleIcon from '@material-ui/icons/SupervisedUserCircle';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {drawerWidth} from \"../../const/const\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getSidebarIsOpen} from \"../../redux/sidebar-selectors\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nconst Sidebar: React.FC = () => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const sidebarIsOpen = useSelector(getSidebarIsOpen);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDrawerClose = () => {\r\n        dispatch(sidebarAC.setSidebarIsOpen(false));\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            classes={{\r\n                root: classes.root,\r\n                paperAnchorDockedLeft: classes.paperAnchorDockedLeft,\r\n                paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={sidebarIsOpen}\r\n        >\r\n            <div className={classes.drawerHeader}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                    {theme.direction === 'ltr' ? <ChevronLeftIcon/> : <ChevronRightIcon/>}\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <List>\r\n                <SidebarItem ownIndex={1} to={\"/profile\"} primary={'My profile'} icon={<HomeIcon/>}/>\r\n                <SidebarItem ownIndex={2} to={\"/dialogs\"} primary={'Dialogs'} icon={<ChatIcon/>}/>\r\n                <SidebarItem ownIndex={3} to={\"/users\"} primary={'Users'} icon={<SupervisedUserCircleIcon/>}/>\r\n                <SidebarItem ownIndex={4} to={\"/friends\"} primary={'Friends'} icon={<AccountCircleIcon/>}/>\r\n                <SidebarItem ownIndex={5} to={\"/settings\"} primary={'Settings'} icon={<SettingsIcon/>}/>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        backgroundColor: indigo[50],\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    paperAnchorDockedLeft: {\r\n        border: 0\r\n    }\r\n}));","import React, {ChangeEvent, SyntheticEvent, useState} from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst RenderPasswordField: React.FC<PropsType> = (props) => {\r\n    const {label, input, placeholder, meta, disabled} = props;\r\n    const classes = useStyles();\r\n\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [password, setPassword] = useState('')\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value);\r\n    };\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LockIcon className={classes.iconLeft}/>\r\n\r\n            <FormControl className={classes.textField}\r\n                         variant=\"outlined\">\r\n\r\n                <InputLabel htmlFor=\"outlined-adornment-password\" classes={{\r\n                    outlined: classes.outlined\r\n                }}>{label}</InputLabel>\r\n\r\n                <OutlinedInput\r\n                    //className={classes.input}\r\n                    classes={{\r\n                        root: classes.outlinedInputRoot,\r\n                        input: classes.outlinedInputInput\r\n                    }}\r\n                    disabled={disabled}\r\n                    id=\"outlined-adornment-password\"\r\n                    placeholder={placeholder}\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    value={password}\r\n                    error={meta.touched && meta.invalid}\r\n                    onChange={handleChange}\r\n\r\n                    {...input}\r\n\r\n\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={handleClickShowPassword}\r\n                                onMouseDown={handleMouseDownPassword}\r\n                                edge=\"end\"\r\n                                className={classes.iconButton}\r\n                            >\r\n                                {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                    labelWidth={73}\r\n                />\r\n\r\n                {meta.touched && meta.invalid && <Typography color='error' variant='caption' className={classes.error}>\r\n                    {meta.error}\r\n                </Typography>}\r\n\r\n            </FormControl>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RenderPasswordField;\r\n\r\n//=============================== TYPES =================================\r\ntype PropsType = {\r\n    label: string\r\n    input: any\r\n    placeholder: string\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    disabled: boolean\r\n}\r\n\r\n//=============================== STYLES ================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        width: '100%'\r\n    },\r\n    iconLeft: {\r\n        position: 'absolute',\r\n        left: -5,\r\n        top: '50%',\r\n        transform: 'translate(-100%, -50%)'\r\n    },\r\n    textField: {\r\n        width: '100%'\r\n    },\r\n    error: {\r\n        paddingLeft: 14,\r\n        paddingTop: 2\r\n    },\r\n    outlinedInputRoot: {\r\n        //height: 40,\r\n        width: '100%'\r\n    },\r\n    outlinedInputInput: {\r\n        height: 40,\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    outlined: {\r\n        transform: 'translate(14px, 12px) scale(1)'\r\n    },\r\n    iconButton: {\r\n        padding: 8\r\n    }\r\n\r\n});","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required, shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getCaptchaSelector, getIsAuth} from \"../../redux/auth-selectors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport RenderTextField from \"../common/RenderTextField\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderPasswordField from \"../common/RenderPasswordField\";\r\nimport RenderCheckbox from \"../common/RenderCheckbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n//=================================== Form =========================================\r\nconst LoginForm: React.FC<LoginFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, error, captcha} = props;\r\n    const classes = useStyles();\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name='email'\r\n                   component={RenderTextField}\r\n                   icon={<MailOutlineIcon/>}\r\n                   className={classes.textField}\r\n                   validate={[required, shouldNotBeEmpty]}\r\n                   label='email'\r\n                   size='small'\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field\r\n                name='password'\r\n                //disabled={isLoading}\r\n                className={classes.textField}\r\n                component={RenderPasswordField}\r\n                placeholder='Enter your password'\r\n                label='Password'\r\n                validate={[required, shouldNotBeEmpty]}\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name=\"rememberMe\" component={RenderCheckbox} label=\"Remember me\"/>\r\n        </div>\r\n\r\n        {\r\n            captcha\r\n            && <>\r\n                <div className={classes.fieldWrapper}>\r\n                    <img src={captcha} alt=\"\"/>\r\n                </div>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field\r\n                        name='captcha'\r\n                        //disabled={isLoading}\r\n                        className={classes.textField}\r\n                        component={RenderTextField}\r\n                        placeholder='Enter symbols from image'\r\n                        label='Captcha'\r\n                        validate={[required, shouldNotBeEmpty]}\r\n                        size='small'\r\n                    />\r\n                </div>\r\n            </>\r\n        }\r\n\r\n        {error && !pristine &&\r\n        <Typography color='error' variant='h6' className={classes.fieldWrapper}>\r\n            {error}\r\n        </Typography>}\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Button type=\"submit\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    fullWidth={true}\r\n                    size='large'\r\n                    className={classes.button}\r\n                    disabled={submitting || pristine}>\r\n                Enter\r\n            </Button>\r\n        </div>\r\n\r\n    </form>\r\n};\r\n\r\n/////////////////////-ReduxLoginForm-////////////////////////////////////////\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n\r\n//========================= COMPONENT =============================================================\r\nconst Login: React.FC = () => {\r\n    const classes = useStyles();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const captcha = useSelector(getCaptchaSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (values: LoginFormValuesType) => {\r\n        dispatch(login(values.email, values.password, values.rememberMe, values.captcha));\r\n    };\r\n    if (isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.card} elevation={6}>\r\n                <Typography\r\n                    className={classes.title}\r\n                    align='center'\r\n                    color='primary'\r\n                    variant='h5'\r\n                >\r\n                    Enter in your profile\r\n                </Typography>\r\n\r\n                <ReduxLoginForm onSubmit={onSubmit}\r\n                                captcha={captcha}/>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Login;\r\n\r\n//========================== TYPES ===============================\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\ntype LoginFormPropsType = InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps;\r\n\r\n//========================== STYLES ==============================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        width: 500,\r\n        padding: '15px 30px 15px 10px',\r\n        borderRadius: 10\r\n    },\r\n    error: {\r\n        width: 300,\r\n        marginBottom: 10,\r\n    },\r\n    textField: {\r\n\r\n        width: '100%',\r\n    },\r\n    fieldWrapper: {\r\n        marginLeft: 35,\r\n        marginBottom: 10\r\n    },\r\n    button: {\r\n        //marginBottom: 10,\r\n    },\r\n    title: {\r\n        marginBottom: 20\r\n    }\r\n});\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\n\r\nconst User: React.FC<PropType> = ({user, dialogs}) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFollowUnfollowClick = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n\r\n    const onOpenSendMessageFormHandle = () => {\r\n        setOpenSendMessageForm(true)\r\n    };\r\n\r\n    const buttonLabel = user.followed ? 'UnFollow' : 'Follow';\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n    const src = ((user && user.photos.small) ? user.photos.small : undefined) as string | undefined;\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card elevation={6} className={classes.root}>\r\n                <CardActionArea component={RouterLink}\r\n                                to={`/users/${user.id}`}>\r\n                    <Avatar className={classes.avatar}\r\n                            src={src ? src : undefined}\r\n                            variant=\"rounded\"/>\r\n                </CardActionArea>\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography color='primary'\r\n                                variant='subtitle2'\r\n                                align='center'>\r\n                        {user.name}\r\n                    </Typography>\r\n                    <Typography //color='primary'\r\n                        variant='body2'\r\n                        align='center'>\r\n                        {user.status}\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n                <CardActions disableSpacing className={classes.cardActions}>\r\n\r\n                    <div className={classes.buttons}>\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button className={classes.button}\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    size='small'\r\n                                    fullWidth\r\n                                    disabled={followingInProgress.some(item => item === user.id)}\r\n                                    onClick={onFollowUnfollowClick}\r\n                                    startIcon={startIcon}\r\n                            >\r\n                                {buttonLabel}\r\n                            </Button>\r\n\r\n                            {\r\n                                isFollowing\r\n                                && followingInProgress.some(item => item === user.id)\r\n                                &&\r\n                                <CircularPreloader size={20} style={'absolute'}/>\r\n                            }\r\n\r\n                        </div>\r\n\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant='outlined'\r\n                                color=\"primary\"\r\n                                size='small'\r\n                                fullWidth\r\n                                onClick={onOpenSendMessageFormHandle}\r\n                                startIcon={<SendIcon/>}\r\n                            >\r\n                                Send message\r\n                            </Button>\r\n                        </div>\r\n\r\n                        <SendMessageForm open={openSendMessageForm}\r\n                                         onClose={setOpenSendMessageForm}\r\n                                         id={user.id}\r\n                                         name={user.name}\r\n                                         src={src}\r\n                                         dialogs={dialogs}\r\n                        />\r\n\r\n                    </div>\r\n                </CardActions>\r\n\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default User;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n        padding: 10\r\n    },\r\n    media: {\r\n        height: 150,\r\n        borderRadius: 5\r\n    },\r\n    avatar: {\r\n        width: 150,\r\n        height: 150,\r\n    },\r\n    cardContent: {\r\n        padding: 5\r\n    },\r\n    cardActions: {\r\n        padding: 0,\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        marginBottom: 5\r\n    },\r\n    buttons: {\r\n        width: '100%',\r\n        marginTop: 0\r\n    },\r\n});","import React, {useState} from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    const classes = useStyles();\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);// число страниц\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i < pagesCount + 1; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize); // число порций (блоков) страниц\r\n    let [portionNumber, setPortionNumber] = useState(1);// текущий номер порции (начинается с 1)\r\n    let startPortionNumber = (portionNumber - 1) * portionSize + 1; // номер первого элемента в порции\r\n    let endPortionNumber = portionNumber * portionSize; // номер последнего элемента в порции\r\n\r\n    const setPrevPortion = () => {\r\n        setPortionNumber(portionNumber - 1);\r\n        onPageChanged((portionNumber - 2) * portionSize + 1);\r\n    };\r\n\r\n    const setNextPortion = () => {\r\n        setPortionNumber(portionNumber + 1);\r\n        onPageChanged((portionNumber) * portionSize + 1);\r\n    };\r\n\r\n    const setFirstPortion = () => {\r\n        setPortionNumber(1);\r\n        onPageChanged(1);\r\n    };\r\n\r\n    const setLastPortion = () => {\r\n        setPortionNumber(portionCount);\r\n        //onPageChanged((portionCount - 1) * portionSize + 1);\r\n        onPageChanged(pagesCount);\r\n    };\r\n\r\n    const elements = pages\r\n        .filter(p => p >= startPortionNumber && p <= endPortionNumber)\r\n        .map(p => (\r\n                <Button\r\n                    className={classes.buttonRoot}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p)\r\n                    }}\r\n                    size='small'\r\n                    color='primary'\r\n                    disableElevation\r\n                    variant={p === currentPage ? 'contained' : \"outlined\"}\r\n                >\r\n                    {p}\r\n                </Button>\r\n            )\r\n        );\r\n\r\n    const prevPortionLabelStart = (portionNumber - 2) * pageSize + 1;\r\n    const prevPortionLabelEnd = (portionNumber - 1) * pageSize;\r\n    const prevPortionLabel = `${prevPortionLabelStart}...${prevPortionLabelEnd}`;\r\n\r\n    const nextPortionLabelStart = portionNumber * pageSize + 1;\r\n    const nextPortionLabelEnd = (portionNumber < portionCount - 1) ? (portionNumber + 1) * pageSize : pagesCount;\r\n    const nextPortionLabel = `${nextPortionLabelStart}...${nextPortionLabelEnd}`;\r\n\r\n    return (\r\n        <div className={classes.paginator}>\r\n\r\n            {portionNumber > 1 &&\r\n            <IconButton onClick={setFirstPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <FirstPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n            {portionNumber > 1 && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setPrevPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {prevPortionLabel}\r\n            </Button>}\r\n\r\n            {elements}\r\n\r\n            {portionNumber < portionCount && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setNextPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {nextPortionLabel}\r\n            </Button>}\r\n\r\n            {portionNumber < portionCount &&\r\n            <IconButton onClick={setLastPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <LastPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n        </div>)\r\n};\r\n\r\nexport default Paginator;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    paginator: {\r\n        //marginBottom: 10,\r\n    },\r\n    buttonRoot: {\r\n        marginRight: 5,\r\n        paddingLeft: 3,\r\n        paddingRight: 3,\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        minWidth: 24\r\n    },\r\n    iconButtonRoot: {\r\n        borderRadius: 4,\r\n        border: '1px solid rgba(63, 81, 181, 0.5)',\r\n        marginRight: 5,\r\n        padding: 0,\r\n        color: indigo[500]\r\n    },\r\n    icon: {\r\n        width: 22.4,\r\n        height: 22.4\r\n    }\r\n})\r\n","import {FormControl} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\n\r\nconst RenderRadioButton: React.FC<PropsType> = (props) => {\r\n    const {labels, value, input, classes, label, ...rest} = props;\r\n    const formControlLabelElements = labels\r\n        .map((el, i) => <FormControlLabel value={el.value}\r\n                                     key={i}\r\n                                     className={classes.formControlLabel}\r\n                                     control={<Radio/>}\r\n                                     label={el.label}/>)\r\n\r\n    return (\r\n        <FormControl >\r\n            <FormLabel component=\"legend\" className={classes.formLabel}>\r\n                {label}\r\n            </FormLabel>\r\n            <RadioGroup value=\"all\" className={classes.radioGroup}  {...input} {...rest}>\r\n                {formControlLabelElements}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default RenderRadioButton;\r\n\r\n//======================= TYPES ======================================================\r\ntype labelsItemType = {\r\n    value: string\r\n    label: string\r\n}\r\ntype PropsType = {\r\n    value: string\r\n    labels: Array<labelsItemType>\r\n    input: any\r\n    classes: any\r\n    label: string\r\n}","import React, {useRef} from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, submit} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {Button, Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderRadioButton from \"../../common/RenderRadioButton\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {searchUsers, usersAC} from \"../../../redux/users-reduser\";\r\nimport {SearchUsersParamsType} from \"../../../types/types\";\r\n\r\n//========================== FORM =======================================\r\nconst SearchUsersForm: React.FC<SearchUsersFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    const classes = useStyles();\r\n    const classesRadioButton = useStylesRadioButton();\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <Field name='term'\r\n                   component={RenderTextField}\r\n                   fullWidth\r\n                   validate={[shouldNotBeEmpty]}\r\n                   label='User name'\r\n                   size='small'\r\n                   onChange={() => dispatch(submit('searchUsers'))}\r\n            />\r\n\r\n            <Field name='friend'\r\n                   label='User are friend or not'\r\n                   component={RenderRadioButton}\r\n                   classes={classesRadioButton}\r\n                   labels={[\r\n                       {value: \"all\", label: 'All'},\r\n                       {value: \"true\", label: 'Friend'},\r\n                       {value: \"false\", label: 'Not friend'}\r\n                   ]}\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SearchIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    Search\r\n                </Button>\r\n            </div>\r\n\r\n\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst SearchUsersReduxForm = reduxForm<SearchUsersParamsType, SearchUsersFormOwnPropsType>({\r\n    form: 'searchUsers',\r\n    //validate\r\n})(SearchUsersForm);\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst SearchUsers: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: SearchUsersParamsType) => {\r\n        console.log(formValue)\r\n        dispatch(usersAC.setSearchUsersParams(formValue));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n        dispatch(usersAC.setShowUsersFrom('search'));\r\n    };\r\n\r\n    const initialValues = {term: '', friend: 'all'} as SearchUsersParamsType;\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6'\r\n                        color='primary'\r\n                        classes={{\r\n                            h6: classes.title\r\n                        }}>\r\n                Search users\r\n            </Typography>\r\n            <Divider classes={{\r\n                root: classes.divider\r\n            }}/>\r\n            <SearchUsersReduxForm onSubmit={onSubmit} initialValues={initialValues}/>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default SearchUsers;\r\n\r\n//===================================== TYPES====================================================\r\ntype SearchUsersFormPropsType =\r\n    InjectedFormProps<SearchUsersParamsType, SearchUsersFormOwnPropsType>\r\n    & SearchUsersFormOwnPropsType;\r\ntype SearchUsersFormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 10,\r\n        paddingBottom: 10,\r\n        marginBottom: 10\r\n    },\r\n    title: {\r\n        marginLeft: 10,\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    }\r\n});\r\nconst useStylesRadioButton = makeStyles({\r\n    formLabel: {\r\n        margin: '15px 10px 5px',\r\n    },\r\n    radioGroup: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        marginLeft: 10\r\n    },\r\n    formControlLabel: {},\r\n\r\n});","import React, {useEffect, useState} from 'react';\r\nimport User from \"./User\";\r\nimport CircularPreloader from '../../common/CircularPreloader';\r\nimport Paginator from '../../common/Paginator';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getSearchUsersParams, getShowUsersFrom,\r\n    getTotalUsersCount,\r\n    getUsersSelector\r\n} from \"../../../redux/users-selectors\";\r\nimport {getIsLoading} from \"../../../redux/app-selectors\";\r\nimport {getUsers, searchUsers, usersAC} from \"../../../redux/users-reduser\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport SearchUsers from \"./SearchUsers\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\n\r\nlet Users: React.FC = () => {\r\n    const classes = useStyles();\r\n    const users = useSelector(getUsersSelector);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const pageSize = useSelector(getPageSize);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const searchUsersParams = useSelector(getSearchUsersParams);\r\n    const showUsersFrom = useSelector(getShowUsersFrom);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    const [searchPanelIsOpen, setSearchPanelIsOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (showUsersFrom === 'all') {\r\n            dispatch(getUsers(currentPage, pageSize));\r\n        } else if (showUsersFrom === 'search') {\r\n            dispatch(searchUsers(currentPage, pageSize, searchUsersParams.term, searchUsersParams.friend));\r\n        }\r\n\r\n    }, [currentPage, pageSize, showUsersFrom, searchUsersParams.term, searchUsersParams.friend]);\r\n\r\n    let usersElements = users && users.map(user => <User\r\n        user={user}\r\n        key={user.id}\r\n        dialogs={dialogs}\r\n    />);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentPage(pageNumber));\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setSearchPanelIsOpen(!searchPanelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        dispatch(usersAC.setShowUsersFrom('all'));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n    };\r\n\r\n    const countTitle = showUsersFrom === 'all' ? 'Total all users count:' : 'Total users count from search:'\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Collapse in={searchPanelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <SearchUsers/>\r\n            </Collapse>\r\n\r\n            <div className={classes.count}>\r\n                <Button onClick={onSearchCharactersClick}\r\n                        size='small'\r\n                        className={classes.button}\r\n                        color='primary'\r\n                        startIcon={searchPanelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {searchPanelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        size='small'\r\n                        color='primary'\r\n                        disabled={showUsersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                <Typography color='primary'\r\n                            variant='subtitle2'\r\n                            className={classes.countTitle}\r\n                >\r\n                    {countTitle}\r\n                </Typography>\r\n\r\n                <Badge badgeContent={totalUsersCount} color=\"primary\" max={99999} showZero>\r\n                    <PeopleIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n\r\n            {\r\n                totalUsersCount !==0 && totalUsersCount && pageSize && currentPage &&\r\n                <div className={classes.paginator}>\r\n                    <Paginator totalItemsCount={totalUsersCount}\r\n                               pageSize={pageSize}\r\n                               currentPage={currentPage}\r\n                               onPageChanged={onPageChanged}\r\n\r\n                    />\r\n                </div>\r\n\r\n            }\r\n\r\n            {isLoading || !users\r\n                ? <CircularPreloader/>\r\n                : <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                    {usersElements}\r\n                </Grid>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Users);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        //padding: 15,\r\n        minHeight: '100vh'\r\n    },\r\n    count: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    },\r\n    countTitle: {\r\n        marginRight: 10\r\n    },\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    paginator: {\r\n        marginBottom: 10\r\n    }\r\n});\r\n\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\n\r\nconst FriendsListItem: React.FC<PropsTypes> = ({friend, dialogs}) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n\r\n    const onListItemClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(3));\r\n    };\r\n\r\n    const onOpenSendMessageFormHandle = (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        setOpenSendMessageForm(true)\r\n    };\r\n\r\n    const src = (friend ? friend.photos.small : undefined) as string | undefined;\r\n\r\n    //========================= popper ========================================\r\n    const [open, setOpen] = useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    //============================== IconButton ===================================================\r\n    const removeHandle = () => {\r\n        dispatch(usersAC.setNeedToChangeListOfFriends(true, friend.id))\r\n    };\r\n    const somethingElseHandle = () => {};\r\n    // const getDialogsHandle = () => {\r\n    //     //dispatch(getDialogs())\r\n    //     dispatch(sendMessage(friend.id, 'test'))\r\n    // };\r\n    const labels = ['Remove from friends', 'Something else', 'Something else'];\r\n    const callbacks = [removeHandle, somethingElseHandle, somethingElseHandle]\r\n    const menuItemsElements = labels.map((el, i) => {\r\n        const onClickHandle = (event: React.MouseEvent<EventTarget>) => {\r\n            handleClose(event);\r\n            callbacks[i]();\r\n        };\r\n        return (\r\n            <MenuItem key={i}\r\n                      onClick={onClickHandle}\r\n            >\r\n                {labels[i]}\r\n            </MenuItem>\r\n        )\r\n    });\r\n    //===================================================================================\r\n\r\n    return (\r\n        <>\r\n            <Divider className={classes.divider}/>\r\n            <ListItem className={classes.listItem}>\r\n                <div className={classes.listItemInner}>\r\n                    <div className={classes.listItemInnerleft}>\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={friend.photos.large ? friend.photos.large : undefined}\r\n                            />\r\n                        </ListItemAvatar>\r\n                        <div className={classes.text}>\r\n                            <Link component={RouterLink} to={`/users/${friend.id}`} variant='subtitle2' onClick={onListItemClick}>\r\n                                {friend.name}\r\n                            </Link>\r\n                            <Link component={RouterLink} to='#' variant='body2' onClick={onOpenSendMessageFormHandle}>\r\n                                Send message\r\n                            </Link>\r\n                        </div>\r\n                        <SendMessageForm open={openSendMessageForm}\r\n                                         onClose={setOpenSendMessageForm}\r\n                                         id={friend.id}\r\n                                         name={friend.name}\r\n                                         src={src}\r\n                                         dialogs={dialogs}\r\n                        />\r\n\r\n                    </div>\r\n                    {/*<IconButtonWithPopper*/}\r\n                    {/*    icon={<MoreVertIcon/>}*/}\r\n                    {/*    classes={classesPopper}*/}\r\n                    {/*    labels={labels}*/}\r\n                    {/*    callbacks={callbacks}*/}\r\n                    {/*/>*/}\r\n\r\n                    <div>\r\n                        <IconButton ref={anchorRef}\r\n                                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleToggle}\r\n                                    edge=\"end\"\r\n                                    aria-label=\"delete\"\r\n                                    className={classes.iconButton}>\r\n                            <MoreVertIcon/>\r\n                        </IconButton>\r\n                        <Popper className={classes.popper}\r\n                                open={open}\r\n                                anchorEl={anchorRef.current}\r\n                                role={undefined}\r\n                                transition\r\n                                placement='bottom-end'\r\n                                disablePortal>\r\n                            {({TransitionProps, placement}) => (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                      onKeyDown={handleListKeyDown}>\r\n                                                {menuItemsElements}\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            )}\r\n                        </Popper>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isFollowing && followingInProgress.some(item => item === friend.id)\r\n                    && <CircularPreloader size={80} style={'absolute'}/>\r\n                }\r\n            </ListItem>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FriendsListItem;\r\n\r\n//========================== TYPES =============================================\r\ntype PropsTypes = {\r\n    friend: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    popper: {\r\n        zIndex: 1000\r\n    },\r\n    listItemInner: {\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    listItemInnerleft: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexGrow: 1\r\n    },\r\n    listItem: {\r\n        position: 'relative'\r\n    },\r\n    text: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }\r\n\r\n});\r\n\r\nconst useStylesPopper = makeStyles({\r\n    iconButton: {\r\n        marginRight: 0,\r\n        //zIndex: 1\r\n    },\r\n    popper: {\r\n        //zIndex: 1000\r\n    },\r\n})","//========================== FORM =======================================\r\n\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, reset, submit} from \"redux-form\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {getIsFriendsSearching, getSearchFriendsParams} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\n\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    const classes = useStyles();\r\n    //const classesField = useStylesField();\r\n\r\n    const onChangeHandler = () => {\r\n        dispatch(submit('friends-search'));\r\n        dispatch(usersAC.setCurrentFriendsPage(1))\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div >\r\n                <Field name='term'\r\n                       component={RenderTextField}\r\n                       //classes={classesField}\r\n                       //icon={<SearchIcon/>}\r\n                       fullWidth\r\n                       validate={[shouldNotBeEmpty]}\r\n                       label='Friends name'\r\n                       size='small'\r\n                       onChange={onChangeHandler}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst ReduxForm = reduxForm<FormParamsType, FormOwnPropsType>({\r\n    form: 'friends-search',\r\n    //validate\r\n})(Form);\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst FriendsSearch: React.FC = () => {\r\n    const classes = useStyles();\r\n    const isFriendsSearching = useSelector(getIsFriendsSearching);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const dispatch = useDispatch();\r\n    const onSubmit = (formValue: FormParamsType) => {\r\n        dispatch(usersAC.setSearchFriendsParams({term: formValue.term}))\r\n        console.log(formValue)\r\n    };\r\n    const icon = searchFriendsParams.term === ''\r\n    ? <SearchIcon/>\r\n    : <HighlightOffIcon/>\r\n\r\n    const onClickHandler = () => {\r\n        if (searchFriendsParams.term !== '') {\r\n            dispatch(usersAC.setSearchFriendsParams({term: ''}));\r\n            dispatch(usersAC.setCurrentFriendsPage(1));\r\n            dispatch(reset('friends-search'));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.search}>\r\n            <div className={classes.iconButton}>\r\n                {\r\n                    !isFriendsSearching\r\n                        ? <IconButton onClick={onClickHandler}>{icon}</IconButton>\r\n                        : <CircularPreloader size={20} style='absolute' />\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.form}>\r\n                <ReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default FriendsSearch;\r\n\r\n\r\n//===================================== TYPES====================================================\r\ntype FormPropsType =\r\n    InjectedFormProps<FormParamsType, FormOwnPropsType>\r\n    & FormOwnPropsType;\r\ntype FormParamsType = {\r\n    term: string\r\n}\r\ntype FormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    fieldWrapper: {\r\n        margin: '10px 10px 5px 35px'\r\n    },\r\n    search: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '0 10px'\r\n    },\r\n    form: {\r\n        flexGrow: 1\r\n    },\r\n    iconButton: {\r\n        width: 48,\r\n        height: 48,\r\n        position: 'relative',\r\n        marginRight: 5\r\n    }\r\n\r\n});\r\n// const useStylesField = makeStyles({\r\n//     root: {\r\n//         width: '100%'\r\n//     },\r\n// });","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentFriendsPage,\r\n    getCurrentPage, getFriendIdToRemove,\r\n    getFriendsSelector,\r\n    getNeedToChangeListOfFriends,\r\n    getPageSize, getSearchFriendsParams, getTotalFriendsCount\r\n} from \"../../../redux/users-selectors\";\r\nimport FriendsListItem from \"./FriendsListItem\";\r\nimport React, {useEffect} from \"react\";\r\nimport {searchFriends, removeAndUpdateFriends, usersAC} from \"../../../redux/users-reduser\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsSearch from \"./FriendsSearch\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paginator from \"../../common/Paginator\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\n\r\nconst FriendsList: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    const friends = useSelector(getFriendsSelector);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const currentFriendsPage = useSelector(getCurrentFriendsPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const needToChangeListOfFriends = useSelector(getNeedToChangeListOfFriends);\r\n    const friendIdToRemove = useSelector(getFriendIdToRemove);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const totalFriendsCount = useSelector(getTotalFriendsCount);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const FriendsListElements = friends\r\n        && friends.map(el => <FriendsListItem key={el.id} friend={el} dialogs={dialogs}/>);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(searchFriends(currentFriendsPage, pageSize, searchFriendsParams.term));\r\n    }, [searchFriendsParams.term, currentFriendsPage]);\r\n\r\n    useEffect(() => {\r\n        if (needToChangeListOfFriends && friendIdToRemove) {\r\n            dispatch(removeAndUpdateFriends(currentPage, pageSize, friendIdToRemove));\r\n        }\r\n    }, [needToChangeListOfFriends]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs());\r\n    }, []);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentFriendsPage(pageNumber));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <div className={classes.title}>\r\n                <Typography component='span' color='primary' className={classes.titleleft}>\r\n                    Friends\r\n                </Typography>\r\n                <Typography component='span' color='textSecondary'>\r\n                    {totalFriendsCount}\r\n                </Typography>\r\n            </div>\r\n            <FriendsSearch/>\r\n\r\n            <div className={classes.paginator}>\r\n                <Paginator totalItemsCount={totalFriendsCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentFriendsPage}\r\n                           onPageChanged={onPageChanged}\r\n                />\r\n            </div>\r\n\r\n            <List>\r\n                {FriendsListElements}\r\n            </List>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsList;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    title: {\r\n        padding: '5px 10px 5px 10px'\r\n    },\r\n    titleleft: {\r\n        marginRight: 5\r\n    },\r\n    paginator: {\r\n        marginLeft: 10,\r\n        marginTop: 5\r\n    }\r\n\r\n\r\n});","import React, {useEffect} from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\n\r\n\r\nconst FriendsSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(newValue));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Tabs\r\n                classes={{\r\n                    indicator: classes.indicator\r\n                }}\r\n                orientation=\"vertical\"\r\n                value={currentFriendsSidebarItem}\r\n                onChange={handleChange}\r\n                className={classes.tabs}\r\n            >\r\n\r\n                <Tab label=\"Friends\" icon={<GroupIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label=\"Request for friendship\" icon={<PersonAddIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label=\"Something else\" icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label=\"Something else\" icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n\r\n            </Tabs>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid #ccc`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none'\r\n    },\r\n    icon: {\r\n        marginRight: 15,\r\n        marginLeft: 15\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50\r\n    }\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst FriendsSomethingElse: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6' color='primary' align='center'>\r\n                Something else\r\n            </Typography>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSomethingElse;\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsList from \"./FriendsList\";\r\nimport FriendsSidebar from \"./FriendsSidebar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport FriendsSomethingElse from \"./FriendsSomethingElse\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\n\r\n\r\nconst Friends = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.leftColumn}>\r\n                {\r\n                    currentFriendsSidebarItem === 0\r\n                        ? <FriendsList/>\r\n                        : <FriendsSomethingElse/>\r\n                }\r\n            </div>\r\n            <div className={classes.rightColumn}>\r\n                <FriendsSidebar/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Friends);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        display: \"flex\"\r\n    },\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    leftColumn: {\r\n        flexGrow: 1,\r\n        marginRight: 15,\r\n    },\r\n    rightColumn: {\r\n        flexBasis: 240,\r\n    }\r\n});","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst Settings: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6' color='primary' align='center'>\r\n                Settings\r\n            </Typography>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default Settings;\r\n\r\n//================== STYLE =========================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n\r\n    }\r\n});","import React, {Suspense} from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport CircularPreloader from \"../common/CircularPreloader\";\nimport Login from \"../Login/Login\";\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {drawerWidth} from \"../../const/const\";\nimport clsx from \"clsx\";\nimport {useSelector} from \"react-redux\";\nimport {getIsInitializedSelector} from \"../../redux/app-selectors\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport Users from \"./Users/Users\";\nimport {getSidebarIsOpen} from \"../../redux/sidebar-selectors\";\nimport Friends from \"./Friends/Friends\";\nimport Settings from \"./Settings/Settings\";\n\nconst Dialogs = React.lazy(() => import('./Dialogs/Dialogs'));\nconst Profile = React.lazy(() => import('./Profile/Profile'));\n\nconst Main: React.FC = () => {\n\n    const classes = useStyles();\n\n    const isInitialized = useSelector(getIsInitializedSelector);\n    const sidebarIsOpen = useSelector(getSidebarIsOpen);\n\n    if (!isInitialized) {\n        return <CircularPreloader/>\n    }\n\n    return (\n        <main className={clsx(classes.content, {\n            [classes.contentShift]: sidebarIsOpen,\n        })}>\n            <div className={classes.drawerHeader}/>\n            <Suspense fallback={<CircularPreloader/>}>\n                <Switch>\n                    <Route exact path='/' render={() => <Profile/>}/>\n                    {/*<Route path='/dialogs' render={() => <Dialogs/>}/>*/}\n                    <Route path='/dialogs/:userId?' render={() => <Dialogs/>}/>\n\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route exact path='/users' render={() => <Users/>}/>\n                    <Route path='/users/:userId' render={() => <Profile/>}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/settings' render={() => <Settings/>}/>\n                    <Route path='*' render={() => <div>404 Page not found</div>}/>\n                </Switch>\n            </Suspense>\n        </main>\n    );\n};\n\nexport default Main;\n\n//========================== STYLES ================================================\nconst useStyles = makeStyles((theme: Theme) => ({\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-end',\n    },\n    content: {\n        backgroundColor: indigo[50],\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginLeft: -drawerWidth,\n        minHeight: '100vh',\n        padding: 15\n    },\n    contentShift: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginLeft: 0,\n    },\n}));\n","import React, {useEffect} from 'react';\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\";\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getMessageIsSending, getRecipientName} from \"./redux/dialogs-selectors\";\nimport {Snackbar} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\nimport {dialogsAC} from \"./redux/dialogs-reducer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {withRouter} from \"react-router-dom\";\nimport {getIsInitialized} from \"./redux/app-reducer\";\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n    const messageIsSending = useSelector(getMessageIsSending);\n    const recipientName = useSelector(getRecipientName);\n\n    const [showAlert, setShowAlert] = React.useState(false);\n    const dispatch = useDispatch();\n\n\n    const catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(e);\n    };\n\n    useEffect(() => {\n        dispatch(getIsInitialized())\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors);\n        return () => {\n            window.removeEventListener('unhandledrejection', catchAllUnhandledErrors);\n        }\n    }, []);\n\n    useEffect(() => {\n        console.log(`messageIsSending - ${messageIsSending}`);\n        console.log(`recipientName - ${recipientName}`);\n        if (!messageIsSending && recipientName) {\n            setShowAlert(true);\n        }\n        return () => {\n            //dispatch(dialogsAC.setRecipientName(null))\n        }\n    }, [messageIsSending])\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setShowAlert(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Header/>\n            <Sidebar/>\n            <Main/>\n\n            <Snackbar open={showAlert}\n                      //anchorOrigin={{vertical: 'bottom', horizontal: 'left'}}\n                      autoHideDuration={6000}\n                      onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"success\">\n                    <Typography component='span'>Message to </Typography>\n                    <Typography component='span' color='primary'>{recipientName}</Typography>\n                    <Typography component='span'> is sent!</Typography>\n                </Alert>\n            </Snackbar>\n\n        </div>\n    );\n};\n\nexport default withRouter(App);\n\n//============================= STYLE ==========================\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: 'flex',\n            // maxWidth: 800,\n            // width: '100%',\n            // margin: '0 auto'\n        }\n    }),\n);\n\n","import {Provider} from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport App from \"./App\";\r\n\r\nconst AppGlobal = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default AppGlobal;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppGlobal from \"./AppContainer\";\n\nReactDOM.render(\n    <AppGlobal/>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n\n","import {GetActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    sidebarIsOpen: true,\r\n    currentSidebarItem: null as null | number\r\n}\r\n\r\ntype initialStateType = typeof initialState;\r\nexport type SidebarActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: SidebarActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SIDEBAR/SET_SIDEBAR_IS_OPEN': {\r\n            return {...state, sidebarIsOpen: action.sidebarIsOpen}\r\n        }\r\n        case 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM': {\r\n            return {...state, currentSidebarItem: action.currentSidebarItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const sidebarAC = {\r\n    setSidebarIsOpen: (sidebarIsOpen: boolean) => ({type: 'SIDEBAR/SET_SIDEBAR_IS_OPEN', sidebarIsOpen} as const),\r\n    setCurrentSidebarItem: (currentSidebarItem: null | number) => ({type: 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM', currentSidebarItem} as const)\r\n};\r\n\r\nexport default sidebarReducer;","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst CircularPreloader: React.FC<PropsType> = (props) => {\r\n    const {size = 100, style = 'static-center'} = props;\r\n    const classesAbsolute = useStylesAbsolute();\r\n    const classesStaticCenter = useStylesStaticCenter();\r\n    const classesStaticTop = useStylesStaticTop();\r\n    let classes = classesStaticCenter;\r\n    if (style === 'absolute') {\r\n        classes = classesAbsolute;\r\n    }\r\n    if (style === 'static-top') {\r\n        classes = classesStaticTop;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={size} color={'secondary'} className={classes.circular}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CircularPreloader;\r\n\r\n//============================ TYPES ==================================================\r\ntype PropsType = {\r\n    size?: number | undefined\r\n    style?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\n//============================ STYLES =======================================================\r\nconst useStylesAbsolute = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    },\r\n    circular: {}\r\n});\r\nconst useStylesStaticCenter = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    circular: {\r\n\r\n    }\r\n});\r\nconst useStylesStaticTop = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start'\r\n    },\r\n    circular: {\r\n\r\n    }\r\n});\r\n","import {GetItemsType, instance, ResponseTypeAPI, ResultCodesEnum} from \"./api\";\r\nimport {FriendsValuesType, PhotosType, ProfileType} from \"../types/types\";\r\n\r\nexport const dialogsAPI = {\r\n    // получить массив пользователей с кем ведется диалог\r\n    async getDialogs() {\r\n        let response = await instance.get<Array<DialogType>>(`dialogs`);\r\n        return response.data;\r\n    },\r\n\r\n    // ???\r\n    async startDialog(userId: number) {\r\n        let response = await instance.put<SendMessageType>(`dialogs/${userId}`);\r\n        return response.data;\r\n    },\r\n\r\n    // получить массив сообщений из диалога с определенный пользователем\r\n    async getMessages(userId: number) {\r\n        let response = await instance.get<GetMessagesType>(`dialogs/${userId}/messages`)\r\n        return response.data;\r\n    },\r\n\r\n    // послать сообщение пользователю\r\n    async sendMessage(userId: number, message: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/${userId}/messages`,{body: message})\r\n        return response.data;\r\n    },\r\n\r\n    // проверить просмотрено ли мое сообщение\r\n    async getIsMessageViewed(messageId: string) {\r\n        let response = await instance.get<boolean>(`dialogs/messages/${messageId}/viewed`)\r\n        return response.data;\r\n    },\r\n\r\n    // отметить сообщение как спам\r\n    async signMessageAsSpam(messageId: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/messages/${messageId}/spam`)\r\n        return response.data;\r\n    },\r\n\r\n    // удалить сообщение (только для меня, не для собеседника)\r\n    async deleteMessage(messageId: string) {\r\n        let response = await instance.delete<SendMessageType>(`dialogs/messages/${messageId}`)\r\n        return response.data;\r\n    },\r\n\r\n};\r\n\r\n//================================= TYPE =======================================\r\ntype SendMessageType = {\r\n    data: {message: MessageType}\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: ResultCodesEnum\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    body: string\r\n    translatedBody: any\r\n    addedAt: string\r\n    senderId: number\r\n    senderName: string\r\n    recipientId: number\r\n    recipientName: string\r\n    viewed: boolean\r\n    deletedBySender: boolean\r\n    deletedByRecipient: boolean\r\n    isSpam: boolean\r\n    distributionId: any\r\n}\r\n\r\ntype GetMessagesType = {\r\n    items: Array<MessageType>\r\n    totalCount: number\r\n    error: any\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    userName: string\r\n    hasNewMessages: boolean\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: PhotosType\r\n}\r\n\r\n","import {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {dialogsAPI, DialogType, MessageType} from \"../DAL/dialogs-api\";\r\n\r\nlet initialState = {\r\n    dialogs: null as null | Array<DialogType>,\r\n    currentDialogsListItem: 0,\r\n    currentFriendsId: null as null | number,\r\n    messages: null as null | Array<MessageType>,\r\n    selectedMessagesId: [] as Array<string>,\r\n    dialogsIsLoading: false, // диалоги загружаются\r\n    messagesIsLoading: false, // сообщения загружаются?\r\n    deleteAndSpamMessagesId: [] as Array<string>,\r\n    messageIsSending: false, // используется для всплывающего сообщения об отправке сообщения\r\n    recipientName: null as null |string // имя получателя, используется для всплывающего сообщения об отправке сообщения\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype DialogsActionsType = GetActionsType<typeof dialogsAC>\r\ntype ThunkType = BaseThunkType<DialogsActionsType | AppActionsType>\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'dialogs/SET_MESSAGES_IS_LOADING': {\r\n            return {...state, messagesIsLoading: action.messagesIsLoading}\r\n        }\r\n        case 'dialogs/SET_RECIPIENT_NAME': {\r\n            return {...state, recipientName: action.recipientName}\r\n        }\r\n        case 'dialogs/SET_MESSAGE_IS_SENDING': {\r\n            return {...state, messageIsSending: action.messageIsSending}\r\n        }\r\n        case 'dialogs/TOGGLE_DIALOGS_IS_LOADING': {\r\n            return {...state, dialogsIsLoading: action.dialogsIsLoading}\r\n        }\r\n        case 'dialogs/CLEAN_SELECTED_ID': {\r\n            return {...state, selectedMessagesId: []}\r\n        }\r\n        case 'dialogs/REMOVE_SELECTED_ID': {\r\n            return {...state, selectedMessagesId: state.selectedMessagesId.filter(el => el !== action.id)}\r\n        }\r\n        case 'dialogs/ADD_SELECTED_ID': {\r\n            return {...state, selectedMessagesId: [...state.selectedMessagesId, action.id]}\r\n        }\r\n        case 'dialogs/SET_MESSAGES': {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case 'dialogs/SET_CURRENT_FRIEND_ID': {\r\n            return {...state, currentFriendsId: action.currentFriendsId}\r\n        }\r\n        case 'dialogs/SET_DIALOGS': {\r\n            return {...state, dialogs: action.dialogs}\r\n        }\r\n        case 'dialogs/SET_CURRENT_DIALOGS_LIST_ITEM': {\r\n            return {...state, currentDialogsListItem: action.currentDialogsListItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const dialogsAC = {\r\n    setMessagesIsLoading: (messagesIsLoading: boolean) => ({type: 'dialogs/SET_MESSAGES_IS_LOADING', messagesIsLoading} as const),\r\n    setRecipientName: (recipientName: null | string) => ({type: 'dialogs/SET_RECIPIENT_NAME', recipientName} as const),\r\n    setMessageIsSending: (messageIsSending: boolean) => ({type: 'dialogs/SET_MESSAGE_IS_SENDING', messageIsSending} as const),\r\n    toggleDialogsIsLoading: (dialogsIsLoading: boolean) => ({type: 'dialogs/TOGGLE_DIALOGS_IS_LOADING', dialogsIsLoading} as const),\r\n    cleanSelectedId: () => ({type: 'dialogs/CLEAN_SELECTED_ID'} as const),\r\n    addSelectedId: (id: string) => ({type: 'dialogs/ADD_SELECTED_ID', id} as const),\r\n    removeSelectedId: (id: string) => ({type: 'dialogs/REMOVE_SELECTED_ID', id} as const),\r\n    setMessages: (messages: Array<MessageType>) => ({type: 'dialogs/SET_MESSAGES', messages} as const),\r\n    setCurrentFriendsId: (currentFriendsId: number) => ({\r\n        type: 'dialogs/SET_CURRENT_FRIEND_ID',\r\n        currentFriendsId\r\n    } as const),\r\n    setDialogs: (dialogs: Array<DialogType>) => ({type: 'dialogs/SET_DIALOGS', dialogs} as const),\r\n    setCurrentDialogsListItem: (currentDialogsListItem: number) => ({\r\n        type: 'dialogs/SET_CURRENT_DIALOGS_LIST_ITEM',\r\n        currentDialogsListItem\r\n    } as const)\r\n};\r\n\r\n// получить массив пользователей с кем ведется диалог\r\nexport const getDialogs = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.toggleDialogsIsLoading(true));\r\n        let data = await dialogsAPI.getDialogs();\r\n        dispatch(dialogsAC.setDialogs(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.toggleDialogsIsLoading(false));\r\n    }\r\n};\r\n\r\n// ???\r\nexport const startDialog = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(appAC.toggleLoading(true));\r\n        let data = await dialogsAPI.startDialog(userId);\r\n        console.log(data)\r\n        //dispatch(usersAC.setUsers(data.items));\r\n        //dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\n// послать сообщение пользователю\r\nexport const sendMessage = (userId: number, message: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessageIsSending(true)); // сообщение отправляется\r\n        const data = await dialogsAPI.sendMessage(userId, message);// post-запрос на сервер\r\n        if (data.resultCode === 0) { // если запрос удачный\r\n            dispatch(dialogsAC.setRecipientName(data.data.message.recipientName)); // установить имя адресата сообщения\r\n            await dispatch(getMessages(userId)); // обновить список сообщения - послать get-запрос\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessageIsSending(false));\r\n    }\r\n};\r\n\r\n// получить массив сообщений из диалога с определенный пользователем\r\nexport const getMessages = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessagesIsLoading(true));\r\n        const data = await dialogsAPI.getMessages(userId);\r\n        if (data.error === null) {\r\n            dispatch(dialogsAC.setMessages(data.items));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessagesIsLoading(false));\r\n    }\r\n};\r\n\r\nexport const getIsMessageViewed = (messageId: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await dialogsAPI.getIsMessageViewed(messageId);\r\n        console.log(data)\r\n        // if (data.resultCode === 0) {\r\n        //     dispatch(profileAC.setStatus(status));\r\n        // }\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const signMessageAsSpam = (messageId: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await dialogsAPI.signMessageAsSpam(messageId);\r\n        console.log(data)\r\n        // if (data.resultCode === 0) {\r\n        //     dispatch(profileAC.setStatus(status));\r\n        // }\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const deleteMessages = (arrayOfMessagesId: Array<string>, userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n        const arrayOfRequests = arrayOfMessagesId\r\n            .map(id => dialogsAPI.deleteMessage(id));\r\n        const results = await Promise.all(arrayOfRequests);\r\n\r\n        let resultCodeFinally = 0;\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === 1) {\r\n                resultCodeFinally = 1;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (resultCodeFinally === 0) {\r\n            dispatch(dialogsAC.cleanSelectedId()); // очистка массива ид на удаление\r\n            await dispatch(getMessages(userId)); // обновление массива сообщений\r\n        }\r\n\r\n        console.log(results)\r\n        // if (data.resultCode === 0) {\r\n        //     dispatch(profileAC.setStatus(status));\r\n        // }\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\n\r\nexport default dialogsReducer;","import {instance, ResponseTypeAPI, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\n// type AuthResponseType = {\r\n//     data: {\r\n//         id: number\r\n//         email: string\r\n//         login: string\r\n//     }\r\n//     resultCode: ResultCodesEnum\r\n//     messages: Array<string>\r\n// }\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype AuthResponseType = ResponseTypeAPI<AuthResponseDataType>\r\n\r\n// type LoginResponseType = {\r\n//     data: {\r\n//         userId: number\r\n//     }\r\n//     resultCode: ResultCodesEnum | ResultCodeForCaptchaEnum\r\n//     messages: Array<string>\r\n// }\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LoginResponseType = ResponseTypeAPI<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>\r\n\r\nexport const authAPI = {\r\n    async auth() {\r\n        let response = await instance.get<AuthResponseType>(`auth/me`)\r\n        return response.data;\r\n    },\r\n    async login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        let response = await instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n        return response.data;\r\n    },\r\n    async logout() {\r\n        let response = await instance.delete(`auth/login`)\r\n        return response.data;\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    async getCaptcha() {\r\n        let response = await instance.get<getCaptchaResponseType>(`security/get-captcha-url`);\r\n        return response.data;\r\n    }\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../DAL/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {authAPI} from \"../DAL/auth-api\";\r\nimport {securityAPI} from \"../DAL/security-api\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {sidebarAC, SidebarActionsType} from \"./sidebar-reducer\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as null | string\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype AuthActionsType = GetActionsType<typeof authAC>\r\ntype ThunkType = BaseThunkType<AuthActionsType | FormAction | AppActionsType | SidebarActionsType>\r\n\r\nconst authReducer = (state = initialState, action: AuthActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_AUTH_USER_DATA': {\r\n            return {...state, ...action.data,}\r\n        }\r\n        case 'AUTH/SET_CAPTCHA':\r\n            return {...state, captcha: action.captcha}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const authAC = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH/SET_AUTH_USER_DATA',\r\n        data: {id, email, login, isAuth}\r\n    } as const),\r\n    setCaptchaUrl: (captcha: string) => ({type: 'AUTH/SET_CAPTCHA', captcha} as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.auth();\r\n        //если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            let {id, login, email} = data.data;\r\n            dispatch(authAC.setAuthUserData(id, email, login, true));\r\n        }\r\n        dispatch(appAC.toggleLoading(false));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.login(email, password, rememberMe, captcha);\r\n        // если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n            dispatch(sidebarAC.setCurrentSidebarItem(1))\r\n        } else { // неправильный логин и(или) пароль\r\n            if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) { // необходима каптча\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await securityAPI.getCaptcha();\r\n        dispatch(authAC.setCaptchaUrl(data.url));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.logout();\r\n        // если вылогинись\r\n        if (data.resultCode === 0) {\r\n            dispatch(authAC.setAuthUserData(null, null, null, false));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getDialogsSelector = (state: StateType) => state.dialogs.dialogs;\r\nexport const getMessagesSelector = (state: StateType) => state.dialogs.messages;\r\nexport const getCurrentDialogsListItem = (state: StateType) => state.dialogs.currentDialogsListItem;\r\nexport const getCurrentFriendsId = (state: StateType) => state.dialogs.currentFriendsId;\r\nexport const getSelectedMessagesId = (state: StateType) => state.dialogs.selectedMessagesId;\r\nexport const getDialogsIsLoading = (state: StateType) => state.dialogs.dialogsIsLoading;\r\nexport const getMessageIsSending = (state: StateType) => state.dialogs.messageIsSending;\r\nexport const getRecipientName = (state: StateType) => state.dialogs.recipientName;\r\nexport const getMessagesIsLoading = (state: StateType) => state.dialogs.messagesIsLoading;\r\n\r\n\r\n\r\n\r\n","import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, input, meta: {touched, invalid, error}, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon &&\r\n            <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                variant=\"outlined\"\r\n                label={label}\r\n\r\n                placeholder={label}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n            width: '100%'\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getId = (state: StateType) => state.auth.id;\r\nexport const getEmail = (state: StateType) => state.auth.email;\r\nexport const getLogin = (state: StateType) => state.auth.login;\r\nexport const getIsAuth = (state: StateType) => state.auth.isAuth;\r\nexport const getCaptchaSelector = (state: StateType) => state.auth.captcha;\r\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, ResponseTypeAPI} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    async getProfile(id: number) {\r\n        let response = await instance.get<ProfileType>(`profile/${id}`)\r\n        return response.data;\r\n    },\r\n    async getStatus(id: number) {\r\n        let response = await instance.get<string>(`profile/status/${id}`)\r\n        return response.data;\r\n    },\r\n    async updateStatus(status: string) {\r\n        let response = await instance.put<ResponseTypeAPI>(`profile/status`, {status: status})\r\n        return response.data;\r\n    },\r\n    async savePhoto(photo: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photo);\r\n        let response = await instance.put('profile/photo', formData);\r\n        return response.data;\r\n    },\r\n    async saveProfile(values: ProfileType) {\r\n        let response = await instance.put<ResponseTypeAPI<SavePhotoResponseDataType>>(`profile`, values)\r\n        return response.data;\r\n    },\r\n    async getFollowed(userId: number) {\r\n        let response = await instance.get<boolean>(`follow/${userId}`)\r\n        return response.data;\r\n    },\r\n};","import {FormAction, stopSubmit} from 'redux-form';\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../DAL/profile-api\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {DATE} from \"../utilities/date\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hello, world', likeCount: 4, likeMe: false, time: '25 September in 10:10'},\r\n    ] as Array<PostType>,\r\n    profile: null as null | ProfileType,\r\n    currentUserProfile: null as null | ProfileType,\r\n    status: null as null | string,\r\n    avatarIsLoading: false,\r\n    statusIsLoading: false,\r\n    editMode: false,\r\n    currentInfoFormSidebarItem: 0,\r\n    followed: null as null | boolean,\r\n    editingPost: false\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = GetActionsType<typeof profileAC>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction | AppActionsType>\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profile/TOGGLE_LIKE_ME': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(el => {\r\n                    if (el.id === action.postId) {\r\n                        return {...el, likeCount: el.likeMe ? el.likeCount - 1 : el.likeCount + 1, likeMe: !el.likeMe}\r\n                    } else {\r\n                        return el\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case 'profile/SET_EDITING_POST': {\r\n            return {...state, editingPost: action.editingPost}\r\n        }\r\n        case 'profile/SET_CURRENT_USER_PROFILE': {\r\n            return {...state, currentUserProfile: action.currentUserProfile}\r\n        }\r\n        case 'profile/SET_FOLLOWED': {\r\n            return {...state, followed: action.followed}\r\n        }\r\n        case 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM': {\r\n            return {...state, currentInfoFormSidebarItem: action.currentInfoFormSidebarItem}\r\n        }\r\n        case 'profile/SET_EDIT_MODE': {\r\n            return {...state, editMode: action.editMode}\r\n        }\r\n        case 'profile/AVATAR_IS_LOADING': {\r\n            return {...state, avatarIsLoading: action.avatarIsLoading}\r\n        }\r\n        case 'profile/STATUS_IS_LOADING': {\r\n            return {...state, statusIsLoading: action.statusIsLoading}\r\n        }\r\n        case 'profile/ADD_POST': {\r\n            let id = state.posts.length ? state.posts[state.posts.length - 1].id + 1 : 1;\r\n            return {\r\n                ...state,\r\n                posts: [\r\n                    ...state.posts,\r\n                    {\r\n                        id: id,\r\n                        message: action.post,\r\n                        likeMe: false,\r\n                        likeCount: 0,\r\n                        time: action.time\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        case 'profile/DELETE_POST': {\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.id)}\r\n        }\r\n        case 'profile/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'profile/SET_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'profile/SET_PHOTOS': {\r\n            if (state.profile) {\r\n                return {\r\n                    ...state, profile: {...state.profile, photos: action.photos}\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const profileAC = {\r\n    toggleLikeMe: (postId: number) => ({type: 'profile/TOGGLE_LIKE_ME', postId} as const),\r\n    setEditingPost: (editingPost: boolean) => ({type: 'profile/SET_EDITING_POST', editingPost} as const),\r\n    setCurrentUserProfile: (currentUserProfile: ProfileType) => ({\r\n        type: 'profile/SET_CURRENT_USER_PROFILE',\r\n        currentUserProfile\r\n    } as const),\r\n    setFollowed: (followed: null | boolean) => ({type: 'profile/SET_FOLLOWED', followed} as const),\r\n    setCurrentInfoFormSidebarItem: (currentInfoFormSidebarItem: number) => ({\r\n        type: 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM',\r\n        currentInfoFormSidebarItem\r\n    } as const),\r\n    addPost: (post: string) => ({\r\n        type: 'profile/ADD_POST',\r\n        post,\r\n        time: DATE.dateTranslateFromJS(DATE.getCurrentDate())\r\n    } as const),\r\n    deletePost: (id: number) => ({type: 'profile/DELETE_POST', id} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'profile/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\r\n    setPhotos: (photos: PhotosType) => ({type: 'profile/SET_PHOTOS', photos} as const),\r\n    toggleAvatarLoading: (avatarIsLoading: boolean) => ({type: 'profile/AVATAR_IS_LOADING', avatarIsLoading} as const),\r\n    toggleStatusLoading: (statusIsLoading: boolean) => ({type: 'profile/STATUS_IS_LOADING', statusIsLoading} as const),\r\n    setEditMode: (editMode: boolean) => ({type: 'profile/SET_EDIT_MODE', editMode} as const),\r\n};\r\n\r\n\r\nexport const getProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentUserProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setCurrentUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getFollowed = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getFollowed(userId);\r\n        dispatch(profileAC.setFollowed(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.getStatus(id);\r\n        dispatch(profileAC.setStatus(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setStatus(status));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: File): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleAvatarLoading(true));\r\n        const data = await profileAPI.savePhoto(photo);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setPhotos(data.data.photos));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleAvatarLoading(false));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (values: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await profileAPI.saveProfile(values)\r\n        //const id = getState().auth.id;\r\n        const id = values.userId\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(getProfile(id));\r\n        } else {\r\n            //data.messages[0]\r\n            let errorFields = {} as any;\r\n            for (let message of data.messages) {\r\n                let key = message.slice(30, message.length - 1).toLowerCase();\r\n                errorFields[key] = 'Invalid url format';\r\n            }\r\n            //dispatch(stopSubmit('profileAboutMeForm', {_error: 'error'}));\r\n            dispatch(stopSubmit('profileAboutMeForm', {'contacts': errorFields}));\r\n            return Promise.reject(data.messages[0]);\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport default profileReducer;"],"sourceRoot":""}