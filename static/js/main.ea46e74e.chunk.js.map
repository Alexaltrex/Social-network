{"version":3,"sources":["Components/common/RenderTextField.tsx","redux/auth-selectors.ts","DAL/profile-api.ts","redux/profile-reducer.ts","types/types.ts","Components/common/SendMessageForm.tsx","redux/app-reducer.ts","hoc/withAuthRedirect.tsx","utilities/objects-helpers.js","DAL/users-api.ts","redux/users-reduser.ts","DAL/api.ts","utilities/date.ts","redux/app-selectors.ts","redux/users-selectors.ts","redux/profile-selectors.ts","Components/common/RenderTextareaField.tsx","Components/common/RenderNakedTextareaField.tsx","Components/common/RenderCheckbox.tsx","utilities/validators/validators.ts","Components/common/CircularPreloader.tsx","serviceWorker.js","redux/settings-reducer.ts","redux/redux-store.ts","Components/Header/HeaderSearch.tsx","redux/settings-selectors.ts","Components/Header/HeaderLang.tsx","Components/Header/Header.tsx","redux/sidebar-selectors.ts","Components/Sidebar/SidebarItem.tsx","Components/Sidebar/Sidebar.tsx","Components/common/RenderPasswordField.tsx","Components/Login/Login.tsx","Components/common/Paginator.tsx","Components/common/RenderRadioButton.tsx","Components/Main/Users/UsersSearch.tsx","Components/common/ViewSwitcher.tsx","Components/Main/Users/UserBlockItem.tsx","Components/Main/Users/UserListItem.tsx","Components/Main/Users/UsersList.tsx","Components/Main/Users/Users.tsx","Components/Main/Friends/FriendsListItem.tsx","Components/Main/Friends/FriendsSearch.tsx","Components/Main/Friends/FriendsList.tsx","Components/Main/Friends/FriendsSidebar.tsx","Components/Main/Friends/FriendsSomethingElse.tsx","Components/Main/Friends/Friends.tsx","Components/Main/Settings/SettingsRow.tsx","const/const.js","Components/Main/Settings/Settings.tsx","Components/common/PageNotFound.tsx","Components/Main/Main.tsx","App.tsx","Components/common/ErrorBoundary.tsx","AppContainer.tsx","index.js","redux/sidebar-reducer.ts","DAL/dialogs-api.ts","redux/dialogs-reducer.ts","const/lang.ts","DAL/auth-api.ts","DAL/security-api.ts","redux/auth-reducer.ts","redux/dialogs-selectors.ts"],"names":["RenderTextField","props","icon","label","input","meta","touched","invalid","error","classes","custom","styles","useStyles","className","root","iconLeft","InputProps","variant","placeholder","helperText","makeStyles","position","width","left","top","transform","getId","state","auth","id","getLogin","login","getIsAuth","isAuth","getCaptchaSelector","captcha","profileAPI","instance","get","response","data","status","put","photo","formData","FormData","append","values","userId","initialState","posts","message","likeCount","likeMe","time","profile","currentUserProfile","avatarIsLoading","statusIsLoading","editMode","currentInfoFormSidebarItem","followed","editingPost","profileAC","toggleLikeMe","postId","type","setEditingPost","setCurrentUserProfile","setFollowed","setCurrentInfoFormSidebarItem","addPost","post","lang","DATE","dateTranslateFromJS","getCurrentDate","deletePost","setUserProfile","setStatus","setPhotos","photos","toggleAvatarLoading","toggleStatusLoading","setEditMode","getProfile","dispatch","a","appAC","toggleLoading","setLanError","getCurrentUserProfile","getFollowed","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","errorFields","messages","key","slice","length","toLowerCase","stopSubmit","Promise","reject","profileReducer","action","map","el","filter","DialogsSidebarItemEnum","ProfileSidebarItemEnum","SidebarItemEnum","ReduxForm","reduxForm","form","handleSubmit","submitting","pristine","useSelector","getLang","classesField","useStylesField","onSubmit","name","component","RenderTextAreaField","validate","shouldNotBeEmpty","autoFocus","textArea","translate","size","color","startIcon","disabled","button","SendMessageForm","open","onClose","src","dialogs","useDispatch","dialogIsExist","some","paper","titleWrapper","title","RouterLink","to","titleLink","titleIcon","onClick","content","friendInfo","avatar","formValue","sendMessage","display","alignItems","backgroundColor","indigo","padding","flexGrow","marginLeft","marginRight","paddingBottom","marginTop","isInitialized","globalError","isLoading","lanError","setIsInitialized","setLang","getIsInitialized","promise","getAuthUserData","all","then","e","appReducer","console","log","mapStateToPropsRedirect","withAuthRedirect","WrappedComponent","connect","restProps","updateObjectInArray","items","itemId","objPropName","newObjProps","item","usersAPI","getUsers","currentPage","pageSize","searchUsers","term","friend","url","friendUrl","followUser","unfollowUser","delete","users","pageFriendsSize","totalUsersCount","totalFriendsCount","currentFriendsPage","isFollowing","followingInProgress","friends","searchUsersParams","searchFriendsParams","isFriendsSearching","showUsersFrom","currentFriendsSidebarItem","needToChangeListOfFriends","friendIdToRemove","valueFromHeaderSearch","usersAC","setValueFromHeaderSearch","toggleIsFriendsSearching","setNeedToChangeListOfFriends","setCurrentFriendsSidebarItem","setFriends","setSearchFriendsParams","setSearchUsersParams","setFollow","setUnfollow","setUsers","setCurrentPage","setCurrentFriendsPage","setTotalUsersCount","setTotalFriendsCount","toggleFollowing","toggleFollowingProgress","setShowUsersFrom","totalCount","searchFriends","removeAndUpdateFriends","_followUnfollowFlow","apiMethod","actionCreator","getFollow","bind","getUnfollow","usersReducer","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","baseURL","withCredentials","headers","Date","getMonthWord","month","monthArray","eng","rus","date","getMonth","day","getDate","hours","getHours","minutes","getMinutes","monthWord","this","dateTranslateFromAPI","hour","getIsInitializedSelector","app","getIsLoading","getUsersSelector","getFriendsSelector","getPageSize","getCurrentPage","getCurrentFriendsPage","getFollowingInProgress","getTotalUsersCount","getTotalFriendsCount","getIsFollowing","getSearchUsersParams","getSearchFriendsParams","getShowUsersFrom","getCurrentFriendsSidebarItem","getNeedToChangeListOfFriends","getFriendIdToRemove","getIsFriendsSearching","getValueFromHeaderSearch","getPosts","getProfileSelector","getCurrentUserProfileSelector","getStatusSelector","getAvatarIsLoading","getStatusIsLoading","getEditMode","getCurrentInfoFormSidebarItem","getFollowedSelector","getEditingPost","rows","multiline","RenderNakedTextAreaField","RenderCheckbox","control","checked","value","onChange","max","required","undefined","maxLength30","empty","str","test","CircularPreloader","styleType","classesAbsolute","useStylesAbsolute","classesStaticCenter","useStylesStaticCenter","classesStaticTop","useStylesStaticTop","circularWrapper","bottom","right","justifyContent","zIndex","Boolean","window","location","hostname","match","theme","menuBackgroundColor","displayBackgroundColor","settingsAC","settingsReducer","rootReducer","combineReducers","dialogsReducer","sidebar","sidebarReducer","authReducer","settings","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","onSubmitSuccess","result","reset","Lang","fieldWrapper","Field","field","HeaderSearch","history","useHistory","push","height","borderRadius","paddingRight","createStyles","transition","transitions","getTheme","HeaderLang","React","useState","anchorEl","setAnchorEl","Tooltip","placement","Button","endIcon","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","MenuItem","selected","textTransform","Header","useEffect","setOpen","anchorRef","useRef","handleClose","current","contains","target","handleListKeyDown","preventDefault","prevOpen","focus","onSettingsClick","onLogoutClick","logout","classesSettings","wrapper","useStylesSettings","Toolbar","toolBar","Typography","noWrap","logo","ref","small","Avatar","Popper","popper","role","disablePortal","TransitionProps","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","ListItemIcon","ListItemText","primary","maxWidth","margin","boxSizing","minHeight","paddingTop","boxShadow","getCurrentSidebarItem","currentSidebarItem","SidebarItem","ownIndex","ListItem","sidebarAC","setCurrentSidebarItem","listItem","clsx","iconSelected","text","minWidth","fontWeight","Sidebar","profileLabel","profileDialogs","profileUsers","profileFriends","profileSettings","List","list","flexBasis","flexShrink","RenderPasswordField","showPassword","setShowPassword","password","setPassword","FormControl","textField","InputLabel","htmlFor","outlined","OutlinedInput","outlinedInputRoot","outlinedInputInput","endAdornment","InputAdornment","IconButton","aria-label","onMouseDown","edge","iconButton","labelWidth","paddingLeft","ReduxLoginForm","emailLabel","passwordLabel","rememberMeLabel","сaptchaLabel","сaptchaText","buttonLabel","alt","fullWidth","Login","Card","card","elevation","align","email","rememberMe","marginBottom","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","startPortionNumber","endPortionNumber","elements","p","buttonRoot","disableElevation","prevPortionLabelEnd","prevPortionLabel","nextPortionLabelEnd","nextPortionLabel","iconButtonRoot","border","RenderRadioButton","labels","rest","formControlLabelElements","FormControlLabel","formControlLabel","Radio","FormLabel","formLabel","RadioGroup","radioGroup","SearchUsersReduxForm","classesRadioButton","useStylesRadioButton","submit","UsersSearch","initialValues","h6","Divider","divider","flexDirection","ViewSwitcher","view","setView","ToggleButtonGroup","exclusive","newView","ToggleButton","fontSize","UserBlockItem","user","openSendMessageForm","setOpenSendMessageForm","Grid","CardActionArea","CardContent","cardContent","CardActions","disableSpacing","cardActions","buttons","buttonWrapper","media","UserListItem","followLabel","Link","UsersList","usersBlockItems","usersListItems","allIsLoaded","skeletonBlockItems","Skeleton","skeletonBlockItem","skeletonListItems","skeletonListItem","container","alignContent","justify","wrap","spacing","disablePadding","getDialogsSelector","searchPanelIsOpen","setSearchPanelIsOpen","getDialogs","pageNumber","countTitle","Collapse","in","timeout","unmountOnExit","topPanel","Badge","badgeContent","showZero","paginatorTopWrapper","paginator","paginatorBottomWrapper","FriendsListItem","somethingElseHandle","callbacks","menuItemsElements","listItemInner","listItemInnerleft","large","FriendsSearch","search","FriendsList","FriendsListElements","titleLeft","paginatorTop","paginatorBottom","FriendsSidebar","Tabs","indicator","orientation","newValue","tabs","Tab","tabRoot","labelIcon","borderLeft","FriendsSomethingElse","leftColumn","rightColumn","SettingsRow","onChangeHandler","resetToDefaultHandle","probeBackgroundColor","defaultColor","probe","default","row","defaultValue","defaultTheme","Settings","PageNotFound","Dialogs","lazy","Profile","Main","main","fallback","exact","path","render","withRouter","messageIsSending","getMessageIsSending","recipientName","getRecipientName","showAlert","setShowAlert","catchAllUnhandledErrors","alert","addEventListener","removeEventListener","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","severity","ErrorBoundary","errorInfo","setState","whiteSpace","toString","children","AppGlobal","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","dialogsAPI","body","messageId","selectedMessages","selectedDeletedMessages","selectedSpamMessages","dialogsIsLoading","messagesIsLoading","messagesIsDeleting","currentDialogsSidebarItem","deletedMessages","spamMessages","dialogsAC","removeFromDeletedMessages","removeFromSpamMessages","addToDeletedMessages","dialog","addToSpamMessages","setCurrentDialogsSidebarItem","setMessagesIsDeleting","setMessagesIsLoading","setRecipientName","setMessageIsSending","toggleDialogsIsLoading","cleanSelectedMessages","cleanSelectedDeletedMessages","addToSelectedMessages","addToSelectedDeletedMessages","removeFromSelectedMessages","removeFromSelectedDeletedMessages","setMessages","setDialogs","dataSend","Success","getMessages","signMessageAsSpam","arrayOfRequests","results","resultCodeFinally","Error","deleteMessages","restoreMessages","j","index","findIndex","phrase","authAPI","securityAPI","authAC","myProfile","CaptchaIsRequired","getCaptchaUrl","_error","getMessagesSelector","getSelectedMessages","getSelectedDeletedMessages","getDialogsIsLoading","getMessagesIsLoading","getMessagesIsDeleting","getCurrentDialogsSidebarItem","getLoading","getDeletedMessages","getSpamMessages"],"mappings":"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","file":"static/js/main.ea46e74e.chunk.js","sourcesContent":["import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, input, meta: {touched, invalid, error}, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon &&\r\n            <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={label}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n            width: '100%'\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getId = (state: StateType) => state.auth.id;\r\nexport const getEmail = (state: StateType) => state.auth.email;\r\nexport const getLogin = (state: StateType) => state.auth.login;\r\nexport const getIsAuth = (state: StateType) => state.auth.isAuth;\r\nexport const getCaptchaSelector = (state: StateType) => state.auth.captcha;\r\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, ResponseTypeAPI} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    async getProfile(id: number) {\r\n        let response = await instance.get<ProfileType>(`profile/${id}`)\r\n        return response.data;\r\n    },\r\n    async getStatus(id: number) {\r\n        let response = await instance.get<string>(`profile/status/${id}`)\r\n        return response.data;\r\n    },\r\n    async updateStatus(status: string) {\r\n        let response = await instance.put<ResponseTypeAPI>(`profile/status`, {status: status})\r\n        return response.data;\r\n    },\r\n    async savePhoto(photo: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photo);\r\n        let response = await instance.put('profile/photo', formData);\r\n        return response.data;\r\n    },\r\n    async saveProfile(values: ProfileType) {\r\n        let response = await instance.put<ResponseTypeAPI<SavePhotoResponseDataType>>(`profile`, values)\r\n        return response.data;\r\n    },\r\n    async getFollowed(userId: number) {\r\n        let response = await instance.get<boolean>(`follow/${userId}`)\r\n        return response.data;\r\n    },\r\n};","import {FormAction, stopSubmit} from 'redux-form';\r\nimport {LangType, PhotosType, PostType, ProfileSidebarItemEnum, ProfileType} from \"../types/types\";\r\nimport {profileAPI} from \"../DAL/profile-api\";\r\nimport {BaseThunkType, GetActionsType, StateType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {DATE} from \"../utilities/date\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hello, world', likeCount: 4, likeMe: false, time: '2020-09-25T10:19'},\r\n    ] as Array<PostType>, // массив постов\r\n    profile: null as null | ProfileType, // прифиль инициализированного пользователя\r\n    currentUserProfile: null as null | ProfileType, // профиль текущего просматриваемого пользователя\r\n    status: null as null | string, // статус\r\n    avatarIsLoading: false, // аватар загружается?\r\n    statusIsLoading: false, //  статус загружается?\r\n    editMode: false, // вкл./выкл. режим редактирования статуса\r\n    currentInfoFormSidebarItem: 0 as ProfileSidebarItemEnum, // текущий элемент бокового меню (все, удаленные, спам)\r\n    followed: null as null | boolean, // пользователь - друг?\r\n    editingPost: false // режим ввода нового поста (false - надпись, true - форма ввода)\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = GetActionsType<typeof profileAC>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction | AppActionsType>\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profile/TOGGLE_LIKE_ME': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(el => {\r\n                    if (el.id === action.postId) {\r\n                        return {...el, likeCount: el.likeMe ? el.likeCount - 1 : el.likeCount + 1, likeMe: !el.likeMe}\r\n                    } else {\r\n                        return el\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case 'profile/SET_EDITING_POST': {\r\n            return {...state, editingPost: action.editingPost}\r\n        }\r\n        case 'profile/SET_CURRENT_USER_PROFILE': {\r\n            return {...state, currentUserProfile: action.currentUserProfile}\r\n        }\r\n        case 'profile/SET_FOLLOWED': {\r\n            return {...state, followed: action.followed}\r\n        }\r\n        case 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM': {\r\n            return {...state, currentInfoFormSidebarItem: action.currentInfoFormSidebarItem}\r\n        }\r\n        case 'profile/SET_EDIT_MODE': {\r\n            return {...state, editMode: action.editMode}\r\n        }\r\n        case 'profile/AVATAR_IS_LOADING': {\r\n            return {...state, avatarIsLoading: action.avatarIsLoading}\r\n        }\r\n        case 'profile/STATUS_IS_LOADING': {\r\n            return {...state, statusIsLoading: action.statusIsLoading}\r\n        }\r\n        case 'profile/ADD_POST': {\r\n            let id = state.posts.length ? state.posts[state.posts.length - 1].id + 1 : 1;\r\n            return {\r\n                ...state,\r\n                posts: [\r\n                    ...state.posts,\r\n                    {\r\n                        id: id,\r\n                        message: action.post,\r\n                        likeMe: false,\r\n                        likeCount: 0,\r\n                        time: action.time\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        case 'profile/DELETE_POST': {\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.id)}\r\n        }\r\n        case 'profile/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'profile/SET_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'profile/SET_PHOTOS': {\r\n            if (state.profile) {\r\n                return {\r\n                    ...state, profile: {...state.profile, photos: action.photos}\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const profileAC = {\r\n    toggleLikeMe: (postId: number) => ({type: 'profile/TOGGLE_LIKE_ME', postId} as const),\r\n    setEditingPost: (editingPost: boolean) => ({type: 'profile/SET_EDITING_POST', editingPost} as const),\r\n    setCurrentUserProfile: (currentUserProfile: ProfileType) => ({\r\n        type: 'profile/SET_CURRENT_USER_PROFILE',\r\n        currentUserProfile\r\n    } as const),\r\n    setFollowed: (followed: null | boolean) => ({type: 'profile/SET_FOLLOWED', followed} as const),\r\n    setCurrentInfoFormSidebarItem: (currentInfoFormSidebarItem: number) => ({\r\n        type: 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM',\r\n        currentInfoFormSidebarItem\r\n    } as const),\r\n    addPost: (post: string, lang: LangType) => ({\r\n        type: 'profile/ADD_POST',\r\n        post,\r\n        time: DATE.dateTranslateFromJS(DATE.getCurrentDate(), lang)\r\n    } as const),\r\n    deletePost: (id: number) => ({type: 'profile/DELETE_POST', id} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'profile/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\r\n    setPhotos: (photos: PhotosType) => ({type: 'profile/SET_PHOTOS', photos} as const),\r\n    toggleAvatarLoading: (avatarIsLoading: boolean) => ({type: 'profile/AVATAR_IS_LOADING', avatarIsLoading} as const),\r\n    toggleStatusLoading: (statusIsLoading: boolean) => ({type: 'profile/STATUS_IS_LOADING', statusIsLoading} as const),\r\n    setEditMode: (editMode: boolean) => ({type: 'profile/SET_EDIT_MODE', editMode} as const),\r\n};\r\n\r\n\r\nexport const getProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentUserProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setCurrentUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\n// определение явдяется ли другом пользователь\r\nexport const getFollowed = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getFollowed(userId);\r\n        dispatch(profileAC.setFollowed(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.getStatus(id);\r\n        dispatch(profileAC.setStatus(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setStatus(status));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: File): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleAvatarLoading(true));\r\n        const data = await profileAPI.savePhoto(photo);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setPhotos(data.data.photos));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleAvatarLoading(false));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (values: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await profileAPI.saveProfile(values)\r\n        //const id = getState().auth.id;\r\n        const id = values.userId\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(getProfile(id));\r\n        } else {\r\n            //data.messages[0]\r\n            let errorFields = {} as any;\r\n            for (let message of data.messages) {\r\n                let key = message.slice(30, message.length - 1).toLowerCase();\r\n                errorFields[key] = 'Invalid url format';\r\n            }\r\n            //dispatch(stopSubmit('profileAboutMeForm', {_error: 'error'}));\r\n            dispatch(stopSubmit('profileAboutMeForm', {'contacts': errorFields}));\r\n            return Promise.reject(data.messages[0]);\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport default profileReducer;","import {DialogType, MessageType} from \"../DAL/dialogs-api\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n    likeMe: boolean\r\n    time: string\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n}\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n}\r\n\r\nexport type FriendsValuesType = 'all' | 'true' | 'false';\r\n\r\nexport type SearchUsersParamsType = {\r\n    term: string\r\n    friend: FriendsValuesType\r\n}\r\n\r\nexport type SearchFriendsParamsType = {\r\n    term: string\r\n}\r\n\r\nexport type ViewType = 'list' | 'block'\r\n\r\nexport type DeletedMessagesType = Array<DeletedMessagesItem>\r\n\r\nexport type DeletedMessagesItem = {\r\n    dialog: DialogType\r\n    messages: Array<MessageType>\r\n}\r\n\r\nexport enum DialogsSidebarItemEnum {\r\n    all = 0,\r\n    deleted = 1,\r\n    spam = 2\r\n}\r\n\r\nexport enum ProfileSidebarItemEnum {\r\n    main = 0,\r\n    job = 1,\r\n    contacts = 2\r\n}\r\n\r\nexport enum SidebarItemEnum {\r\n    myProfile = 1,\r\n    dialogs = 2,\r\n    users = 3,\r\n    friends = 4,\r\n    settings = 5\r\n}\r\n\r\nexport type LangType = 'eng' | 'rus'\r\n\r\nexport type UseParamsType = {\r\n    userId: string | undefined\r\n}","import React from \"react\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport RenderTextAreaField from \"./RenderTextareaField\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage} from \"../../redux/dialogs-reducer\";\r\nimport {DialogType} from \"../../DAL/dialogs-api\";\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine} = props;\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const classesField = useStylesField();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field name='message'\r\n                   component={RenderTextAreaField}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   autoFocus={true}\r\n                   className={classes.textArea}\r\n                   classes={classesField}\r\n                   label={translate(lang, 'Enter your message')}\r\n                   placeholder={translate(lang, 'Enter your message')}\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SendIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    {translate(lang, 'Send message')}\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'send-message',\r\n})(Form);\r\n\r\n//================ COMPONENT =========================================\r\nconst SendMessageForm: React.FC<ComponentPropsType> = ({open, onClose, id, name, src, dialogs}) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector(getLang);\r\n\r\n    const onFormCloseHandle = () => {\r\n        onClose(false);\r\n    };\r\n\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(sendMessage(id, formValue.message));\r\n        onClose(false);\r\n    };\r\n\r\n    const dialogIsExist = dialogs && dialogs.some(el => el.id === id);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dialogs &&\r\n                <Dialog open={open}\r\n                        classes={{\r\n                            paper: classes.paper\r\n                        }}\r\n                >\r\n                    <div className={classes.titleWrapper}>\r\n                        <Typography className={classes.title}>\r\n                            {translate(lang, 'New message')}\r\n                        </Typography>\r\n\r\n                        {\r\n                            dialogIsExist &&\r\n                            <Link component={RouterLink}\r\n                                  to={`/dialogs/${id}`}\r\n                                  variant='body2'\r\n                                  className={classes.titleLink}\r\n                            >\r\n                                {`${translate(lang, 'Go to dialog with')} ${name}`}\r\n                            </Link>\r\n                        }\r\n\r\n                        <IconButton className={classes.titleIcon}\r\n                                    onClick={onFormCloseHandle}\r\n                        >\r\n                            <HighlightOffIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n\r\n                    <DialogContent className={classes.content}>\r\n                        <div className={classes.friendInfo}>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={src}\r\n                            />\r\n                            <Link component={RouterLink}\r\n                                  to={`/users/${id}`}\r\n                                  variant='subtitle2'\r\n                                //onClick={onListItemClick}\r\n                            >\r\n                                {name}\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <ReduxForm onSubmit={onSubmit}/>\r\n\r\n                    </DialogContent>\r\n\r\n                </Dialog>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SendMessageForm;\r\n\r\n//=========================== TYPE =======================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    message: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {\r\n    open: boolean\r\n    onClose: (openForm: boolean) => void\r\n    id: number\r\n    name: string\r\n    src: string | undefined\r\n    dialogs: Array<DialogType> | null\r\n}\r\n//========================== STYLES ======================\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        width: 500\r\n    },\r\n    titleWrapper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: indigo[500],\r\n        color: 'white',\r\n        padding: '5px 5px 5px 15px',\r\n\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    titleLink: {\r\n        color: 'white',\r\n    },\r\n    titleIcon: {\r\n        color: 'white',\r\n        marginLeft: 10\r\n    },\r\n    friendInfo: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '10px 0 15px 0'\r\n    },\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    content: {\r\n        backgroundColor: indigo[50],\r\n        paddingBottom: 15\r\n    },\r\n    textArea: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        marginTop: 15\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles({\r\n    root: {\r\n        backgroundColor: 'white'\r\n    },\r\n})","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {LangType} from \"../types/types\";\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>;\r\ntype ThunkType = BaseThunkType<AppActionsType>\r\n\r\nlet initialState = {\r\n    isInitialized: false, // приложение проинициализировано (получены инициализационные данные)?\r\n    globalError: null,\r\n    isLoading: false, // загрузка происходит?\r\n    lanError: false, // ошибка сети\r\n    lang: 'eng' as LangType // язык приложения\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_LANG':\r\n            console.log('APP/SET_LANG')\r\n            return {...state, lang: action.lang}\r\n        case 'APP/SET_IS_INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setIsInitialized: (isInitialized: boolean) => ({type: 'APP/SET_IS_INITIALIZED', isInitialized} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n    setLang: (lang: LangType) => ({type: 'APP/SET_LANG', lang} as const),\r\n};\r\n\r\nexport const getIsInitialized = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let promise = dispatch(getAuthUserData());\r\n        // dispatch(somethingElse());\r\n        // dispatch(somethingElse());\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(appAC.setIsInitialized(true));\r\n            })\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport default appReducer;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsRedirect = (state: StateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n       let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n    return connect<MapStatePropsType, MapDispatchPropsType, WCP, StateType>(mapStateToPropsRedirect)(RedirectComponent);\r\n};","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(item => {\r\n        if (item[objPropName] === itemId) {\r\n            return {...item, ...newObjProps}\r\n        }\r\n        return item;\r\n    })\r\n};","import {GetItemsType, instance, ResponseTypeAPI} from \"./api\";\r\nimport {FriendsValuesType} from \"../types/types\";\r\n\r\nexport const usersAPI = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        let response = await instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`);\r\n        return response.data;\r\n    },\r\n\r\n    async searchUsers(currentPage = 1, pageSize = 10, term: string, friend: FriendsValuesType) {\r\n        let url = `users?page=${currentPage}&count=${pageSize}`;\r\n        if (term) url = url + `&term=${term}`;\r\n        let friendUrl;\r\n        if (friend === 'all') {\r\n            friendUrl = ''\r\n        } else {\r\n            friendUrl = `&friend=${friend}`\r\n        }\r\n        url = url + friendUrl;\r\n        let response = await instance.get<GetItemsType>(url);\r\n        return response.data;\r\n    },\r\n\r\n    async followUser(id: number) {\r\n        let response = await instance.post<ResponseTypeAPI>(`follow/${id}`)\r\n        return response.data;\r\n    },\r\n\r\n    async unfollowUser(id: number) {\r\n        let response = await instance.delete(`follow/${id}`) //as AxiosResponse<any>\r\n                return response.data as Promise<ResponseTypeAPI>;\r\n      },\r\n    };\r\n\r\n","import {updateObjectInArray} from \"../utilities/objects-helpers\";\r\nimport {\r\n    FriendsValuesType, SearchFriendsParamsType,\r\n    SearchUsersParamsType,\r\n    UserType\r\n} from \"../types/types\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../DAL/users-api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    users: null as null | Array<UserType>, // массив пользователей\r\n    pageSize: 10, // количество пользователей на одной странице\r\n    pageFriendsSize: 10, // количество друзей на одной странице\r\n    totalUsersCount: 0, // общее число пользователей\r\n    totalFriendsCount: 0, // общее число друзей\r\n    currentPage: 1, // номер текущей страницы пользователей\r\n    currentFriendsPage: 1, // номер текущей страницы друзей\r\n    isLoading: false, // загрузка происходит?\r\n    isFollowing: false, // отписка/подписка происходит?\r\n    followingInProgress: [] as Array<number>, // массив пользователей, для которых послан запрос на подписку/отписку\r\n    friends: null as null | Array<UserType>, // массив друзей\r\n    searchUsersParams: {term: '', friend: 'all'} as SearchUsersParamsType, // параметры поиска пользователей\r\n    searchFriendsParams: {term: ''} as SearchFriendsParamsType, // параметры поиска друзей\r\n    isFriendsSearching: false, // поиск друзей происходит?\r\n    showUsersFrom: 'all' as 'all' | 'search', // откуда показывать пользователей - всех или из поиска\r\n    currentFriendsSidebarItem: 0, // номер элемента бокового меню\r\n    needToChangeListOfFriends: false, // список друзей нужно изменить (используется для обновления после удаления)?\r\n    friendIdToRemove: null as null | number, // id друга, которого удаляем\r\n    valueFromHeaderSearch: null as null | string // страка поиска пользователя из header\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'USERS/SET_VALUE_FROM_HEADER_SEARCH': {\r\n            return {...state, valueFromHeaderSearch: action.valueFromHeaderSearch}\r\n        }\r\n        case 'USERS/TOGGLE_IS_FRIENDS_SEARCHING': {\r\n            return {...state, isFriendsSearching: action.isFriendsSearching}\r\n        }\r\n        case 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS': {\r\n            return {...state,\r\n                needToChangeListOfFriends: action.needToChangeListOfFriends,\r\n                friendIdToRemove: action.friendIdToRemove\r\n            }\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM': {\r\n            return {...state, currentFriendsSidebarItem: action.currentFriendsSidebarItem}\r\n        }\r\n        case 'USERS/SET_FRIENDS': {\r\n            return {...state, friends: action.friends}\r\n        }\r\n        case 'USERS/SET_SHOW_USERS_FROM': {\r\n            return {...state, showUsersFrom: action.showUsersFrom}\r\n        }\r\n        case 'USERS/SET_SEARCH_FRIENDS_PARAMS': {\r\n            return {...state, searchFriendsParams: action.searchFriendsParams}\r\n        }\r\n        case 'USERS/SET_SEARCH_USERS_PARAMS': {\r\n            return {...state, searchUsersParams: action.searchUsersParams}\r\n        }\r\n        case 'USERS/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        }\r\n        case 'USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        }\r\n        case 'USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage};\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_PAGE': {\r\n            return {...state, currentFriendsPage: action.currentFriendsPage};\r\n        }\r\n        case 'USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        }\r\n        case 'USERS/SET_TOTAL_FRIENDS_COUNT': {\r\n            return {...state, totalFriendsCount: action.totalFriendsCount};\r\n        }\r\n        case 'USERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING': {\r\n            return {...state, isFollowing: action.isFollowing}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                // если запрос на подписку-отписку послан - добавить в массив, иначе удалить из массива\r\n                followingInProgress:\r\n                    action.followingInProgress\r\n                        ? [...state.followingInProgress, action.id]\r\n                        : state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const usersAC = {\r\n    setValueFromHeaderSearch: (valueFromHeaderSearch: string | null) => ({type: 'USERS/SET_VALUE_FROM_HEADER_SEARCH', valueFromHeaderSearch} as const),\r\n    toggleIsFriendsSearching: (isFriendsSearching: boolean) => ({type: 'USERS/TOGGLE_IS_FRIENDS_SEARCHING', isFriendsSearching} as const),\r\n    setNeedToChangeListOfFriends: (needToChangeListOfFriends: boolean, friendIdToRemove: number | null) => ({\r\n        type: 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS',\r\n        needToChangeListOfFriends,\r\n        friendIdToRemove\r\n    } as const),\r\n    setCurrentFriendsSidebarItem: (currentFriendsSidebarItem: number) => ({\r\n        type: 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM',\r\n        currentFriendsSidebarItem\r\n    } as const),\r\n    setFriends: (friends: Array<UserType>) => ({type: 'USERS/SET_FRIENDS', friends} as const),\r\n    setSearchFriendsParams: (searchFriendsParams: SearchFriendsParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_FRIENDS_PARAMS',\r\n        searchFriendsParams\r\n    } as const),\r\n    setSearchUsersParams: (searchUsersParams: SearchUsersParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_USERS_PARAMS',\r\n        searchUsersParams\r\n    } as const),\r\n    setFollow: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    setUnfollow: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setCurrentFriendsPage: (currentFriendsPage: number) => ({type: 'USERS/SET_CURRENT_FRIENDS_PAGE', currentFriendsPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'USERS/SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n    setTotalFriendsCount: (totalFriendsCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_FRIENDS_COUNT',\r\n        totalFriendsCount\r\n    } as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'USERS/TOGGLE_LOADING', isLoading} as const),\r\n    toggleFollowing: (isFollowing: boolean) => ({type: 'USERS/TOGGLE_FOLLOWING', isFollowing} as const),\r\n    toggleFollowingProgress: (followingInProgress: boolean, id: number) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        followingInProgress,\r\n        id\r\n    } as const),\r\n    setShowUsersFrom: (showUsersFrom: 'all' | 'search') => ({type: 'USERS/SET_SHOW_USERS_FROM', showUsersFrom} as const),\r\n    };\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize);\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchUsers = (currentPage: number, pageSize: number, term: string, friend: FriendsValuesType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, friend);\r\n        console.log('searchUsers')\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchFriends = (currentPage: number, pageSize: number, term: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleIsFriendsSearching(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, 'true');\r\n        dispatch(usersAC.setFriends(data.items));\r\n        dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleIsFriendsSearching(false));\r\n    }\r\n};\r\n\r\nexport const removeAndUpdateFriends = (currentPage: number, pageSize: number, id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(true, id));\r\n        let dataFromUnfollow = await usersAPI.unfollowUser(id);\r\n        if (dataFromUnfollow.resultCode === 0) {\r\n            let data = await usersAPI.searchUsers(currentPage, pageSize, '', 'true');\r\n            dispatch(usersAC.setFriends(data.items));\r\n            dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n            dispatch(usersAC.setNeedToChangeListOfFriends(false, null));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(false, id));\r\n    }\r\n};\r\n\r\ntype FollowUnfollwType = UsersActionsType;//followType | unfollowType\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   id: number,\r\n                                   apiMethod: any,\r\n                                   actionCreator: (id: number) => FollowUnfollwType) => {\r\n    dispatch(usersAC.toggleFollowing(true));\r\n    dispatch(usersAC.toggleFollowingProgress(true, id));\r\n    let data = await apiMethod(id)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(usersAC.toggleFollowingProgress(false, id));\r\n};\r\n\r\nexport const getFollow = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        await _followUnfollowFlow(dispatch, id, usersAPI.followUser.bind(id), usersAC.setFollow);\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(false));\r\n    }\r\n\r\n};\r\n\r\nexport const getUnfollow = (id: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, id, usersAPI.unfollowUser.bind(id), usersAC.setUnfollow);\r\n};\r\n\r\nexport default usersReducer;\r\n\r\n//============================ TYPES ==============================================\r\nexport type initialStateType = typeof initialState;\r\ntype UsersActionsType = GetActionsType<typeof usersAC>\r\ntype DispatchType = Dispatch<UsersActionsType>\r\ntype ThunkType = BaseThunkType<UsersActionsType | AppActionsType>","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e09d6375-5dac-4dde-95ca-700e186a8f7d'\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseTypeAPI<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","import {LangType} from \"../types/types\";\r\nimport {translate} from \"../const/lang\";\r\n\r\n// получение текущей даты\r\n// RETURN - JS DATE\r\nexport const DATE = {\r\n    getCurrentDate(): Date {\r\n        return new Date();\r\n    },\r\n\r\n    getMonthWord(month: number, lang: LangType): string {\r\n        const monthArray = [\r\n            {'eng': \"January\", 'rus': 'Января'},\r\n            {'eng': \"February\", 'rus': 'Февраля'},\r\n            {'eng': \"March\", 'rus': 'Марта'},\r\n            {'eng': \"April\", 'rus': 'Апреля'},\r\n            {'eng': \"May\", 'rus': 'Мая'},\r\n            {'eng': \"June\", 'rus': 'Июня'},\r\n            {'eng': \"July\", 'rus': 'Июля'},\r\n            {'eng': \"August\", 'rus': 'Августа'},\r\n            {'eng': \"September\", 'rus': 'Сентября'},\r\n            {'eng': \"October\", 'rus': 'Октября'},\r\n            {'eng': \"November\", 'rus': 'Ноября'},\r\n            {'eng': \"December\", 'rus': 'Декабря'},\r\n           ];\r\n        return lang === 'eng' ? monthArray[month].eng : monthArray[month].rus\r\n    },\r\n\r\n    dateTranslateFromJS(date: Date, lang: LangType): string {\r\n        let month = date.getMonth() + 1;\r\n        let day = date.getDate();\r\n        let hours = date.getHours() as number | string;\r\n        let minutes = date.getMinutes() as number | string;\r\n\r\n        if (hours < 10) {\r\n            hours = `0${hours}`\r\n        };\r\n\r\n        if (minutes < 10) {\r\n            minutes = `0${minutes}`\r\n        };\r\n\r\n        let monthWord = this.getMonthWord(month, lang);\r\n        return `${day} ${monthWord} in ${hours}:${minutes}`;\r\n    },\r\n\r\n    dateTranslateFromAPI(date: string, lang: LangType) {\r\n        //const year = date.slice(0, 4);\r\n        const month = date.slice(5, 7);\r\n        const monthWord = this.getMonthWord(+month, lang);\r\n        const day = date[8] === '0' ? date.slice(9, 10) : date.slice(8, 10);\r\n        const hour = date.slice(11, 13);\r\n        const minutes = date.slice(14, 16);\r\n        return `${day} ${monthWord} ${translate(lang, 'in')} ${hour}:${minutes}`\r\n    }\r\n};\r\n\r\n//======================== TYPE =======================\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getIsInitializedSelector = (state: StateType) => state.app.isInitialized;\r\nexport const getIsLoading = (state: StateType) => state.app.isLoading;\r\nexport const getLanError = (state: StateType) => state.app.lanError;\r\nexport const getLang = (state: StateType) => state.app.lang;\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: StateType) => state.users.users;\r\nexport const getFriendsSelector = (state: StateType) => state.users.friends;\r\nexport const getPageSize = (state: StateType) => state.users.pageSize;\r\nexport const getCurrentPage = (state: StateType) => state.users.currentPage;\r\nexport const getCurrentFriendsPage = (state: StateType) => state.users.currentFriendsPage;\r\nexport const getFollowingInProgress = (state: StateType) => state.users.followingInProgress;\r\nexport const getTotalUsersCount = (state: StateType) => state.users.totalUsersCount;\r\nexport const getTotalFriendsCount = (state: StateType) => state.users.totalFriendsCount;\r\nexport const getIsLoading = (state: StateType) => state.users.isLoading;\r\nexport const getIsFollowing = (state: StateType) => state.users.isFollowing;\r\nexport const getSearchUsersParams = (state: StateType) => state.users.searchUsersParams;\r\nexport const getSearchFriendsParams = (state: StateType) => state.users.searchFriendsParams;\r\nexport const getShowUsersFrom = (state: StateType) => state.users.showUsersFrom;\r\nexport const getCurrentFriendsSidebarItem = (state: StateType) => state.users.currentFriendsSidebarItem;\r\nexport const getNeedToChangeListOfFriends = (state: StateType) => state.users.needToChangeListOfFriends;\r\nexport const getFriendIdToRemove = (state: StateType) => state.users.friendIdToRemove;\r\nexport const getIsFriendsSearching = (state: StateType) => state.users.isFriendsSearching;\r\nexport const getValueFromHeaderSearch = (state: StateType) => state.users.valueFromHeaderSearch;\r\n\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getPosts = (state: StateType) => state.profile.posts;\r\nexport const getProfileSelector = (state: StateType) => state.profile.profile;\r\nexport const getCurrentUserProfileSelector = (state: StateType) => state.profile.currentUserProfile;\r\nexport const getStatusSelector = (state: StateType) => state.profile.status;\r\nexport const getAvatarIsLoading = (state: StateType) => state.profile.avatarIsLoading;\r\nexport const getStatusIsLoading = (state: StateType) => state.profile.statusIsLoading;\r\nexport const getEditMode = (state: StateType) => state.profile.editMode;\r\nexport const getCurrentInfoFormSidebarItem = (state: StateType) => state.profile.currentInfoFormSidebarItem;\r\nexport const getFollowedSelector = (state: StateType) => state.profile.followed;\r\nexport const getEditingPost = (state: StateType) => state.profile.editingPost;\r\n\r\n\r\n\r\n\r\n","import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextAreaField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid, error}, classes, rows = 4, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                multiline\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n    rows?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst RenderNakedTextAreaField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid}, rows = 4, multiline = true, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <InputBase\r\n                classes={classes ? classes : null}\r\n                multiline={multiline}\r\n                rows={rows}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderNakedTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n    },\r\n    rows?: number\r\n    multiline?: boolean\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import {FormControlLabel} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderCheckbox: React.FC<PropsType> = (props) => {\r\n    const {input, label, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {icon && <div className={classes.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={input.value ? true : false}\r\n                        color=\"primary\"\r\n                        onChange={input.onChange}\r\n                    />\r\n                }\r\n                label={label}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RenderCheckbox\r\n\r\n//======================== TYPES ============================\r\ntype PropsType = {\r\n    icon?: React.ReactElement\r\n    label: string\r\n    input: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);","import {LangType} from \"../../types/types\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\nexport const required: FieldValidatorType = (value) =>\r\n    value ? undefined : 'Field is required';\r\n\r\nexport const maxLength = (max: number) => (value: string) =>\r\n    value && value.length > max\r\n        ? `Number of letters is more than ${max}`\r\n        : undefined;\r\n\r\nexport const maxLength10 = (max: number): FieldValidatorType => (value: string) =>\r\n    value && value.length > max\r\n        ? `Number of letters is more than ${max}`\r\n        : undefined;\r\n\r\nexport const maxLength30 = maxLength(30);\r\n\r\nexport const empty: EmptyType = (str: string): boolean => /^\\s+$/.test(str);\r\n\r\nexport const shouldNotBeEmpty: FieldValidatorType = (value) =>\r\n    empty(value) && value !== ''\r\n        ? 'Field should not be empty'\r\n        : undefined;\r\n\r\n//=========================== TYPES =====================================\r\ntype EmptyType = (str: string) => boolean\r\nexport type FieldValidatorType = (value: string) => string | undefined","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst CircularPreloader: React.FC<PropsType> = (props) => {\r\n    const {size = 100, styleType = 'static-center'} = props;\r\n    const classesAbsolute = useStylesAbsolute();\r\n    const classesStaticCenter = useStylesStaticCenter();\r\n    const classesStaticTop = useStylesStaticTop();\r\n    let classes = classesStaticCenter;\r\n    if (styleType === 'absolute') {\r\n        classes = classesAbsolute;\r\n    }\r\n    if (styleType === 'static-top') {\r\n        classes = classesStaticTop;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={size} color={'secondary'}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CircularPreloader;\r\n\r\n//============================ TYPES ==================================================\r\ntype PropsType = {\r\n    size?: number | undefined\r\n    styleType?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\n//============================ STYLES =======================================================\r\nconst useStylesAbsolute = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    }\r\n});\r\nconst useStylesStaticCenter = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n});\r\nconst useStylesStaticTop = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start'\r\n    }\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {GetActionsType} from \"./redux-store\";\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type SettingsActionsType = GetActionsType<typeof settingsAC>;\r\n\r\nlet initialState = {\r\n    theme: {\r\n        menuBackgroundColor: '#3f50b5',\r\n        displayBackgroundColor: '#e8eaf6',\r\n    }\r\n};\r\n\r\nconst settingsReducer = (state = initialState, action: SettingsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'Settings/SET_MENU_BACKGROUND_COLOR':\r\n            return {...state, theme: {...state.theme, menuBackgroundColor: action.menuBackgroundColor}};\r\n        case 'Settings/SET_DISPLAY_BACKGROUND_COLOR':\r\n            return {...state, theme: {...state.theme, displayBackgroundColor: action.displayBackgroundColor}};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const settingsAC = {\r\n    setMenuBackgroundColor: (menuBackgroundColor: string) => ({\r\n        type: 'Settings/SET_MENU_BACKGROUND_COLOR',\r\n        menuBackgroundColor\r\n    } as const),\r\n    setDisplayBackgroundColor: (displayBackgroundColor: string) => ({\r\n        type: 'Settings/SET_DISPLAY_BACKGROUND_COLOR',\r\n        displayBackgroundColor\r\n    } as const),\r\n};\r\n\r\n\r\nexport default settingsReducer;","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport settingsReducer from \"./settings-reducer\";\r\n\r\n// объединяем редьюсеры в объект\r\nlet rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    settings: settingsReducer,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n\r\n//======================== TYPE ==========================\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, reset} from \"redux-form\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderNakedTextAreaField from \"../common/RenderNakedTextareaField\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {usersAC} from \"../../redux/users-reduser\";\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {Lang} from \"../../const/lang\";\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit} = props;\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    const lang = useSelector(getLang);\r\n    const placeholder = lang === 'rus' ? Lang['Search...'].rus : Lang['Search...'].eng;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={classes.fieldWrapper}>\r\n                <SearchIcon className={classes.icon}/>\r\n                <Field name='name'\r\n                       component={RenderNakedTextAreaField}\r\n                       validate={[shouldNotBeEmpty]}\r\n                       multiline={false}\r\n                       className={classes.field}\r\n                       classes={classesField}\r\n                       placeholder={placeholder}\r\n                       size='small'\r\n                />\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n    dispatch(reset('header-search'));\r\n};\r\n\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'header-search',\r\n    onSubmitSuccess: afterSubmit,\r\n})(Form);\r\n\r\n\r\n//============================ COMPONENT ============================================\r\nconst HeaderSearch: React.FC<ComponentPropsType> = ({}) => {\r\n    const dispatch = useDispatch();\r\n    let history = useHistory();\r\n\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(usersAC.setValueFromHeaderSearch(formValue.name))\r\n        history.push('/users');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HeaderSearch;\r\n\r\n//=========================== TYPE =======================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    name: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {}\r\n//========================== STYLES ======================\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        color: 'white',\r\n    },\r\n    fieldWrapper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: indigo[400],\r\n        height: 40,\r\n        borderRadius: 20,\r\n        paddingRight: 20,\r\n        '&:hover': {\r\n            backgroundColor: indigo[300],\r\n        },\r\n        marginRight: 15\r\n    },\r\n    icon: {\r\n        padding: '0 10px',\r\n        color: 'white'\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        input: {\r\n            transition: theme.transitions.create('width'),\r\n            backgroundColor: 'none',\r\n            width: 200,\r\n            '&:focus': {\r\n                width: 300\r\n            }\r\n        }\r\n    })\r\n)","import {StateType} from \"./redux-store\";\r\n\r\nexport const getTheme = (state: StateType) => state.settings.theme;\r\n","import Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { appAC } from \"../../redux/app-reducer\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\nconst HeaderLang: React.FC<PropsType> = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector(getLang);\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleCloseRus = () => {\r\n        dispatch(appAC.setLang('rus'));\r\n        setAnchorEl(null);\r\n    };\r\n    const handleCloseEng = () => {\r\n        dispatch(appAC.setLang('eng'));\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={translate(lang, 'Change language')} placement=\"bottom-start\">\r\n                <Button\r\n                    className={classes.button}\r\n                    startIcon={<LanguageIcon/>}\r\n                    endIcon={<ExpandMoreIcon/>}\r\n                    aria-controls=\"simple-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleClick}\r\n                >\r\n                    {translate(lang, 'English')}\r\n                </Button>\r\n            </Tooltip>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={handleCloseEng}\r\n                          selected={lang === 'eng'}\r\n                >\r\n                    English\r\n                </MenuItem>\r\n                <MenuItem onClick={handleCloseRus}\r\n                          selected={lang === 'rus'}\r\n                >\r\n                    Русский\r\n                </MenuItem>\r\n            </Menu>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default HeaderLang;\r\n\r\n\r\n//========================== TYPE ========================\r\ntype PropsType = {}\r\n\r\n//================================ STYLES =======================================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        color: 'white',\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n})","import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getId, getIsAuth, getLogin} from \"../../redux/auth-selectors\";\r\nimport {getProfileSelector} from \"../../redux/profile-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {getProfile} from \"../../redux/profile-reducer\";\r\nimport HeaderSearch from \"./HeaderSearch\";\r\nimport {getTheme} from \"../../redux/settings-selectors\";\r\nimport HeaderLang from \"./HeaderLang\";\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {Lang, translate} from \"../../const/lang\";\r\n\r\nconst Header: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    const isAuth = useSelector(getIsAuth);\r\n    const login = useSelector(getLogin);\r\n    const profile = useSelector(getProfileSelector);\r\n    const id = useSelector(getId);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getProfile(id))\r\n        }\r\n    }, [id]);\r\n\r\n    //===================================================================================\r\n    const [open, setOpen] = useState(false);\r\n    const icon = open ? <ExpandLessIcon className={classes.icon}/> : <ExpandMoreIcon className={classes.icon}/>\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //=========================================================================\r\n    const onSettingsClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event)\r\n    };\r\n    const onLogoutClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event);\r\n        dispatch(logout());\r\n    }\r\n    //==================================================================================\r\n    const theme = useSelector(getTheme);\r\n    const useStylesSettings = makeStyles({\r\n        wrapper: {\r\n            backgroundColor: theme.menuBackgroundColor,\r\n            position: 'fixed',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            zIndex: 10\r\n        }\r\n    });\r\n    const classesSettings = useStylesSettings();\r\n\r\n    const lang = useSelector(getLang);\r\n\r\n    return (\r\n        <div className={classesSettings.wrapper}>\r\n            <Toolbar className={classes.toolBar}>\r\n                <Typography variant=\"h6\" noWrap className={classes.logo}>\r\n                    {translate(lang, 'Social Network')}\r\n                </Typography>\r\n\r\n                <HeaderSearch/>\r\n\r\n                <HeaderLang/>\r\n\r\n                {\r\n                    isAuth\r\n                        ? <>\r\n                            <Button\r\n                                ref={anchorRef}\r\n                                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleToggle}\r\n                                classes={{\r\n                                    root: classes.button,\r\n                                    label: classes.label\r\n                                }}\r\n                                color=\"inherit\">\r\n                                <Typography variant=\"subtitle1\" noWrap className={classes.login}>\r\n                                    {login}\r\n                                </Typography>\r\n                                {profile && profile.photos.small\r\n                                    ? <Avatar src={profile.photos.small} className={classes.avatar}/>\r\n                                    : <Avatar className={classes.avatar}/>}\r\n                                {icon}\r\n                            </Button>\r\n                            <Popper open={open}\r\n                                    className={classes.popper}\r\n                                    anchorEl={anchorRef.current}\r\n                                    role={undefined}\r\n                                    transition\r\n                                    disablePortal>\r\n                                {({TransitionProps, placement}) => (\r\n                                    <Grow\r\n                                        {...TransitionProps}\r\n                                        style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                    >\r\n                                        <Paper>\r\n                                            <ClickAwayListener onClickAway={handleClose}>\r\n\r\n                                                <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                          onKeyDown={handleListKeyDown}>\r\n                                                    <MenuItem onClick={onLogoutClick}>\r\n                                                        <ListItemIcon>\r\n                                                            <ExitToAppIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary={translate(lang, 'Logout')}/>\r\n                                                    </MenuItem>\r\n                                                    <MenuItem onClick={onSettingsClick}\r\n                                                              component={RouterLink}\r\n                                                              to='/settings'\r\n                                                    >\r\n                                                        <ListItemIcon>\r\n                                                            <SettingsIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary={translate(lang, 'Settings')}/>\r\n                                                    </MenuItem>\r\n                                                </MenuList>\r\n                                            </ClickAwayListener>\r\n                                        </Paper>\r\n                                    </Grow>\r\n                                )}\r\n                            </Popper>\r\n                        </>\r\n                        : <Button color=\"inherit\"\r\n                                  className={classes.login}\r\n                                  component={RouterLink}\r\n                                  to='/login'>\r\n                            {translate(lang, 'Login')}\r\n                        </Button>\r\n                }\r\n\r\n            </Toolbar>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Header;\r\n\r\n//================================ STYLES =======================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {},\r\n    toolBar: {\r\n        maxWidth: 1000,\r\n        width: '100%',\r\n        margin: '0 auto',\r\n        boxSizing: 'border-box',\r\n        padding: '0 0 0 10px',\r\n    },\r\n    logo: {\r\n        flexGrow: 1,\r\n        color: 'white'\r\n    },\r\n    login: {\r\n        color: 'white'\r\n    },\r\n    button: {\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(0,0,0,0.3)',\r\n            borderRadius: 0,\r\n            minHeight: 64\r\n        },\r\n        textTransform: 'none',\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    label: {\r\n        minHeight: 64\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50,\r\n        margin: '0 10px'\r\n    },\r\n    icon: {\r\n        color: 'white'\r\n    },\r\n    popper: {\r\n        boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)'\r\n    }\r\n});\r\n\r\n\r\n","import {StateType} from \"./redux-store\";\r\n\r\nexport const getCurrentSidebarItem = (state: StateType) => state.sidebar.currentSidebarItem;","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {profileAC} from \"../../redux/profile-reducer\";\r\nimport {usersAC} from \"../../redux/users-reduser\";\r\nimport {sidebarAC} from \"../../redux/sidebar-reducer\";\r\nimport {getCurrentSidebarItem} from \"../../redux/sidebar-selectors\";\r\n\r\nconst SidebarItem: React.FC<PropsTypes> = (props) => {\r\n    const {to, primary, icon, ownIndex} = props;\r\n    const classes = useStyles();\r\n    const currentSidebarItem = useSelector(getCurrentSidebarItem)\r\n    const dispatch = useDispatch();\r\n\r\n    const onClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(ownIndex));// установить номер текущего элемнта бокового меню\r\n        dispatch(profileAC.setEditMode(false)); // выключить режим редактирования профиля\r\n        dispatch(usersAC.setShowUsersFrom('all')); // показывать всех пользователей (обнуления поиска)\r\n        dispatch(usersAC.setCurrentPage(1)); // установить текущую страницу пользователей - первую\r\n        dispatch(usersAC.setSearchFriendsParams({term: ''})); // обнуления параметров поиска друзей\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(0)); // переключение на первый элмемент бокового меню\r\n        dispatch(usersAC.setValueFromHeaderSearch('')); // обнуление строки поиска пользователей из заголовка\r\n    };\r\n\r\n    return (\r\n        <li>\r\n            <ListItem\r\n                onClick={onClick}\r\n                className={classes.listItem}\r\n                selected={ownIndex === currentSidebarItem}\r\n                button\r\n                component={RouterLink}\r\n                to={to}>\r\n                {\r\n                    icon\r\n                        ? <ListItemIcon className={clsx(ownIndex === currentSidebarItem && classes.iconSelected, classes.icon)}>\r\n                            {icon}\r\n                        </ListItemIcon>\r\n                        : null\r\n                }\r\n                <ListItemText primary={primary} className={clsx(ownIndex === currentSidebarItem && classes.text)}/>\r\n            </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;\r\n\r\n//============================== TYPES ==================================\r\ntype PropsTypes = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\n//============================== STYLES ===================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    icon: {\r\n       minWidth: 'inherit',\r\n        marginRight: 10\r\n    },\r\n    iconSelected: {\r\n        color: indigo[500]\r\n    },\r\n    text: {\r\n        color: indigo[600],\r\n        fontWeight: 900\r\n    },\r\n    listItem: {\r\n        padding: '5px 5px 5px 10px'\r\n    }\r\n}));","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SupervisedUserCircleIcon from '@material-ui/icons/SupervisedUserCircle';\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport { useSelector } from 'react-redux';\r\nimport {Lang} from \"../../const/lang\";\r\n\r\nconst Sidebar: React.FC = () => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const profileLabel = lang === 'rus' ? Lang['My profile'].rus : Lang['My profile'].eng;\r\n    const profileDialogs = lang === 'rus' ? Lang['Dialogs'].rus : Lang['Dialogs'].eng;\r\n    const profileUsers = lang === 'rus' ? Lang['Users'].rus : Lang['Users'].eng;\r\n    const profileFriends = lang === 'rus' ? Lang['Friends'].rus : Lang['Friends'].eng;\r\n    const profileSettings = lang === 'rus' ? Lang['Settings'].rus : Lang['Settings'].eng;\r\n\r\n    return (\r\n        <List className={classes.list}>\r\n            <SidebarItem ownIndex={1} to={\"/profile\"} primary={profileLabel} icon={<HomeIcon/>}/>\r\n            <SidebarItem ownIndex={2} to={\"/dialogs\"} primary={profileDialogs} icon={<ChatIcon/>}/>\r\n            <SidebarItem ownIndex={3} to={\"/users\"} primary={profileUsers} icon={<SupervisedUserCircleIcon/>}/>\r\n            <SidebarItem ownIndex={4} to={\"/friends\"} primary={profileFriends} icon={<AccountCircleIcon/>}/>\r\n            <SidebarItem ownIndex={5} to={\"/settings\"} primary={profileSettings} icon={<SettingsIcon/>}/>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        flexBasis: 160,\r\n        flexShrink: 0,\r\n        padding: '10px 0'\r\n    }\r\n});","import React, {ChangeEvent, useState} from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst RenderPasswordField: React.FC<PropsType> = (props) => {\r\n    const {label, input, placeholder, meta, disabled} = props;\r\n    const classes = useStyles();\r\n\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [password, setPassword] = useState('')\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value);\r\n    };\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LockIcon className={classes.iconLeft}/>\r\n\r\n            <FormControl className={classes.textField}\r\n                         variant=\"outlined\">\r\n\r\n                <InputLabel htmlFor=\"outlined-adornment-password\" classes={{\r\n                    outlined: classes.outlined\r\n                }}>{label}</InputLabel>\r\n\r\n                <OutlinedInput\r\n                    classes={{\r\n                        root: classes.outlinedInputRoot,\r\n                        input: classes.outlinedInputInput\r\n                    }}\r\n                    disabled={disabled}\r\n                    id=\"outlined-adornment-password\"\r\n                    placeholder={placeholder}\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    value={password}\r\n                    error={meta.touched && meta.invalid}\r\n                    onChange={handleChange}\r\n\r\n                    {...input}\r\n\r\n\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={handleClickShowPassword}\r\n                                onMouseDown={handleMouseDownPassword}\r\n                                edge=\"end\"\r\n                                className={classes.iconButton}\r\n                            >\r\n                                {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                    labelWidth={73}\r\n                />\r\n\r\n                {meta.touched && meta.invalid && <Typography color='error' variant='caption' className={classes.error}>\r\n                    {meta.error}\r\n                </Typography>}\r\n\r\n            </FormControl>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RenderPasswordField;\r\n\r\n//=============================== TYPES =================================\r\ntype PropsType = {\r\n    label: string\r\n    input: any\r\n    placeholder: string\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    disabled: boolean\r\n}\r\n\r\n//=============================== STYLES ================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        width: '100%'\r\n    },\r\n    iconLeft: {\r\n        position: 'absolute',\r\n        left: -5,\r\n        top: '50%',\r\n        transform: 'translate(-100%, -50%)'\r\n    },\r\n    textField: {\r\n        width: '100%'\r\n    },\r\n    error: {\r\n        paddingLeft: 14,\r\n        paddingTop: 2\r\n    },\r\n    outlinedInputRoot: {\r\n        //height: 40,\r\n        width: '100%'\r\n    },\r\n    outlinedInputInput: {\r\n        height: 40,\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    outlined: {\r\n        transform: 'translate(14px, 12px) scale(1)'\r\n    },\r\n    iconButton: {\r\n        padding: 8\r\n    }\r\n\r\n});","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required, shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getCaptchaSelector, getIsAuth} from \"../../redux/auth-selectors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport RenderTextField from \"../common/RenderTextField\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderPasswordField from \"../common/RenderPasswordField\";\r\nimport RenderCheckbox from \"../common/RenderCheckbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {Lang} from \"../../const/lang\";\r\n\r\n//=================================== Form =========================================\r\nconst LoginForm: React.FC<LoginFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, error, captcha} = props;\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const emailLabel = lang === 'rus' ? Lang['email'].rus : Lang['email'].eng;\r\n    const passwordLabel = lang === 'rus' ? Lang['password'].rus : Lang['password'].eng;\r\n    const rememberMeLabel = lang === 'rus' ? Lang['Remember me'].rus : Lang['Remember me'].eng;\r\n    const сaptchaLabel = lang === 'rus' ? Lang['Captcha'].rus : Lang['Captcha'].eng;\r\n    const сaptchaText = lang === 'rus' ? Lang['Enter symbols from image'].rus : Lang['Enter symbols from image'].eng;\r\n    const buttonLabel = lang === 'rus' ? Lang['Login'].rus : Lang['Login'].eng;\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name='email'\r\n                   component={RenderTextField}\r\n                   icon={<MailOutlineIcon/>}\r\n                   className={classes.textField}\r\n                   validate={[required, shouldNotBeEmpty]}\r\n                   label={emailLabel}\r\n                   size='small'\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field\r\n                name='password'\r\n                //disabled={isLoading}\r\n                className={classes.textField}\r\n                component={RenderPasswordField}\r\n                placeholder={passwordLabel}\r\n                label={passwordLabel}\r\n                validate={[required, shouldNotBeEmpty]}\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name=\"rememberMe\" component={RenderCheckbox} label={rememberMeLabel}/>\r\n        </div>\r\n\r\n        {\r\n            captcha\r\n            && <>\r\n                <div className={classes.fieldWrapper}>\r\n                    <img src={captcha} alt=\"\"/>\r\n                </div>\r\n                <Typography className={classes.captcha}>\r\n                    {сaptchaText}\r\n                </Typography>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field\r\n                        name='captcha'\r\n                        className={classes.textField}\r\n                        component={RenderTextField}\r\n                        placeholder={сaptchaLabel}\r\n                        label={сaptchaLabel}\r\n                        validate={[required, shouldNotBeEmpty]}\r\n                        size='small'\r\n                    />\r\n                </div>\r\n            </>\r\n        }\r\n\r\n        {error && !pristine &&\r\n        <Typography color='error' variant='h6' className={classes.fieldWrapper}>\r\n            {error}\r\n        </Typography>}\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Button type=\"submit\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    fullWidth={true}\r\n                    size='large'\r\n                    disabled={submitting || pristine}>\r\n                {buttonLabel}\r\n            </Button>\r\n        </div>\r\n\r\n    </form>\r\n};\r\n\r\n/////////////////////-ReduxLoginForm-////////////////////////////////////////\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n\r\n//========================= COMPONENT =============================================================\r\nconst Login: React.FC = () => {\r\n    const classes = useStyles();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const captcha = useSelector(getCaptchaSelector);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (values: LoginFormValuesType) => {\r\n        dispatch(login(values.email, values.password, values.rememberMe, values.captcha));\r\n    };\r\n\r\n    const title = lang === 'rus' ? Lang['Enter in your profile'].rus : Lang['Enter in your profile'].eng;\r\n\r\n    if (isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.card} elevation={6}>\r\n                <Typography\r\n                    className={classes.title}\r\n                    align='center'\r\n                    color='primary'\r\n                    variant='h5'\r\n                >\r\n                    {title}\r\n                </Typography>\r\n\r\n                <ReduxLoginForm onSubmit={onSubmit}\r\n                                captcha={captcha}/>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Login;\r\n\r\n//========================== TYPES ===============================\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\ntype LoginFormPropsType = InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps;\r\n\r\n//========================== STYLES ==============================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        width: 500,\r\n        padding: '15px 30px 15px 10px',\r\n        borderRadius: 10\r\n    },\r\n    error: {\r\n        width: 300,\r\n        marginBottom: 10,\r\n    },\r\n    textField: {\r\n\r\n        width: '100%',\r\n    },\r\n    fieldWrapper: {\r\n        marginLeft: 35,\r\n        marginBottom: 10\r\n    },\r\n    title: {\r\n        marginBottom: 20\r\n    },\r\n    captcha: {\r\n        marginLeft: 35,\r\n        marginBottom: 10\r\n    }\r\n});\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\nconst Paginator: React.FC<PropsType> = (props) => {\r\n    const {totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10} = props;\r\n    const classes = useStyles();\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);// число страниц\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i < pagesCount + 1; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize); // число порций (блоков) страниц\r\n    let [portionNumber, setPortionNumber] = useState(1);// текущий номер порции (начинается с 1)\r\n    let startPortionNumber = (portionNumber - 1) * portionSize + 1; // номер первого элемента в порции\r\n    let endPortionNumber = portionNumber * portionSize; // номер последнего элемента в порции\r\n\r\n    const setPrevPortion = () => {\r\n        setPortionNumber(portionNumber - 1);\r\n        onPageChanged((portionNumber - 2) * portionSize + 1);\r\n    };\r\n\r\n    const setNextPortion = () => {\r\n        setPortionNumber(portionNumber + 1);\r\n        onPageChanged((portionNumber) * portionSize + 1);\r\n    };\r\n\r\n    const setFirstPortion = () => {\r\n        setPortionNumber(1);\r\n        onPageChanged(1);\r\n    };\r\n\r\n    const setLastPortion = () => {\r\n        setPortionNumber(portionCount);\r\n        //onPageChanged((portionCount - 1) * portionSize + 1);\r\n        onPageChanged(pagesCount);\r\n    };\r\n\r\n    const elements = pages\r\n        .filter(p => p >= startPortionNumber && p <= endPortionNumber)\r\n        .map(p => (\r\n                <Button\r\n                    className={classes.buttonRoot}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p)\r\n                    }}\r\n                    size='small'\r\n                    color='primary'\r\n                    disableElevation\r\n                    variant={p === currentPage ? 'contained' : \"outlined\"}\r\n                >\r\n                    {p}\r\n                </Button>\r\n            )\r\n        );\r\n\r\n    const prevPortionLabelStart = (portionNumber - 2) * pageSize + 1;\r\n    const prevPortionLabelEnd = (portionNumber - 1) * pageSize;\r\n    const prevPortionLabel = `${prevPortionLabelStart}...${prevPortionLabelEnd}`;\r\n\r\n    const nextPortionLabelStart = portionNumber * pageSize + 1;\r\n    const nextPortionLabelEnd = (portionNumber < portionCount - 1) ? (portionNumber + 1) * pageSize : pagesCount;\r\n    const nextPortionLabel = `${nextPortionLabelStart}...${nextPortionLabelEnd}`;\r\n\r\n    return (\r\n        <div>\r\n\r\n            {portionNumber > 1 &&\r\n            <IconButton onClick={setFirstPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <FirstPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n            {portionNumber > 1 && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setPrevPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {prevPortionLabel}\r\n            </Button>}\r\n\r\n            {elements}\r\n\r\n            {portionNumber < portionCount && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setNextPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {nextPortionLabel}\r\n            </Button>}\r\n\r\n            {portionNumber < portionCount &&\r\n            <IconButton onClick={setLastPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <LastPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n        </div>)\r\n};\r\n\r\nexport default Paginator;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    buttonRoot: {\r\n        marginRight: 5,\r\n        paddingLeft: 3,\r\n        paddingRight: 3,\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        minWidth: 24\r\n    },\r\n    iconButtonRoot: {\r\n        borderRadius: 4,\r\n        border: '1px solid rgba(63, 81, 181, 0.5)',\r\n        marginRight: 5,\r\n        padding: 0,\r\n        color: indigo[500]\r\n    },\r\n    icon: {\r\n        width: 22.4,\r\n        height: 22.4\r\n    }\r\n})\r\n","import {FormControl} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\n\r\nconst RenderRadioButton: React.FC<PropsType> = (props) => {\r\n    const {labels, value, input, classes, label, ...rest} = props;\r\n    const formControlLabelElements = labels\r\n        .map((el, i) => <FormControlLabel value={el.value}\r\n                                     key={i}\r\n                                     className={classes.formControlLabel}\r\n                                     control={<Radio/>}\r\n                                     label={el.label}/>)\r\n\r\n    return (\r\n        <FormControl >\r\n            <FormLabel component=\"legend\" className={classes.formLabel}>\r\n                {label}\r\n            </FormLabel>\r\n            <RadioGroup value=\"all\" className={classes.radioGroup}  {...input} {...rest}>\r\n                {formControlLabelElements}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default RenderRadioButton;\r\n\r\n//======================= TYPES ======================================================\r\ntype labelsItemType = {\r\n    value: string\r\n    label: string\r\n}\r\ntype PropsType = {\r\n    value: string\r\n    labels: Array<labelsItemType>\r\n    input: any\r\n    classes: any\r\n    label: string\r\n}","import React, {useEffect} from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, submit} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {Button, Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderRadioButton from \"../../common/RenderRadioButton\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {SearchUsersParamsType} from \"../../../types/types\";\r\nimport {getValueFromHeaderSearch} from \"../../../redux/users-selectors\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//========================== FORM =======================================\r\nconst SearchUsersForm: React.FC<SearchUsersFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, error} = props;\r\n    const classes = useStyles();\r\n    const classesRadioButton = useStylesRadioButton();\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector(getLang);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <Field name='term'\r\n                   component={RenderTextField}\r\n                   fullWidth\r\n                   autoFocus={true}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   label={translate(lang, 'Name')}\r\n                   size='small'\r\n                   onChange={() => dispatch(submit('searchUsers'))}\r\n            />\r\n\r\n            <Field name='friend'\r\n                   label={translate(lang, 'User are friend or not')}\r\n                   component={RenderRadioButton}\r\n                   classes={classesRadioButton}\r\n                   labels={[\r\n                       {value: \"all\", label: translate(lang, 'All')},\r\n                       {value: \"true\", label: translate(lang, 'Friend')},\r\n                       {value: \"false\", label: translate(lang, 'Not friend')}\r\n                   ]}\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SearchIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    {translate(lang, 'Search')}\r\n                </Button>\r\n            </div>\r\n\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst SearchUsersReduxForm = reduxForm<SearchUsersParamsType, SearchUsersFormOwnPropsType>({\r\n    form: 'searchUsers',\r\n})(SearchUsersForm);\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst UsersSearch: React.FC = () => {\r\n    const classes = useStyles();\r\n    const valueFromHeaderSearch = useSelector(getValueFromHeaderSearch);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formValue: SearchUsersParamsType) => {\r\n        dispatch(usersAC.setSearchUsersParams(formValue));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n        dispatch(usersAC.setShowUsersFrom('search'));\r\n    };\r\n\r\n    const term = valueFromHeaderSearch ? valueFromHeaderSearch : '';\r\n\r\n    const initialValues = {term: term, friend: 'all'} as SearchUsersParamsType;\r\n\r\n    useEffect(() => {\r\n        if (valueFromHeaderSearch) {\r\n            dispatch(submit('searchUsers'));\r\n            dispatch(usersAC.setSearchUsersParams({term: valueFromHeaderSearch, friend: 'all'}));\r\n            dispatch(usersAC.setCurrentPage(1));\r\n            dispatch(usersAC.setShowUsersFrom('search'));\r\n        }\r\n    }, [valueFromHeaderSearch])\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6'\r\n                        color='primary'\r\n                        classes={{\r\n                            h6: classes.title\r\n                        }}>\r\n                Search users\r\n            </Typography>\r\n            <Divider classes={{\r\n                root: classes.divider\r\n            }}/>\r\n            <SearchUsersReduxForm onSubmit={onSubmit} initialValues={initialValues}/>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default UsersSearch;\r\n\r\n//===================================== TYPES====================================================\r\ntype SearchUsersFormPropsType =\r\n    InjectedFormProps<SearchUsersParamsType, SearchUsersFormOwnPropsType>\r\n    & SearchUsersFormOwnPropsType;\r\ntype SearchUsersFormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 10,\r\n        paddingBottom: 10,\r\n        marginBottom: 10\r\n    },\r\n    title: {\r\n        marginLeft: 10,\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    }\r\n});\r\nconst useStylesRadioButton = makeStyles({\r\n    formLabel: {\r\n        margin: '15px 10px 5px',\r\n    },\r\n    radioGroup: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        marginLeft: 10\r\n    },\r\n    formControlLabel: {},\r\n\r\n});","import ViewListIcon from '@material-ui/icons/ViewList';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport {ToggleButtonGroup} from \"@material-ui/lab\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport React from 'react';\r\nimport {ViewType} from \"../../types/types\";\r\n\r\nconst ViewSwitcher: React.FC<PropsType> = ({view, setView}) => {\r\n\r\n    const onChangeHandle = (event: React.MouseEvent<HTMLElement>, newView: ViewType) => {\r\n        setView(newView);\r\n    };\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            size='small'\r\n            exclusive\r\n            value={view}\r\n            onChange={onChangeHandle}\r\n            aria-label=\"items view\"\r\n        >\r\n            <ToggleButton value=\"list\" aria-label=\"list view\">\r\n                <ViewListIcon fontSize='small' color='primary'/>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"block\" aria-label=\"block view\">\r\n                <ViewModuleIcon fontSize='small' color='primary'/>\r\n            </ToggleButton>\r\n\r\n        </ToggleButtonGroup>\r\n    )\r\n};\r\n\r\nexport default ViewSwitcher;\r\n\r\n//========================== TYPES ===========================\r\ntype PropsType = {\r\n    view: ViewType\r\n    setView: (view: ViewType) => void\r\n}","import React from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\nconst UserBlockItem: React.FC<PropType> = ({user, dialogs}) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const lang = useSelector(getLang);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFollowUnfollowClick = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n\r\n    const onOpenSendMessageFormHandle = () => {\r\n        setOpenSendMessageForm(true)\r\n    };\r\n\r\n    const buttonLabel = user.followed\r\n        ? translate(lang, 'Unfollow') :\r\n        translate(lang, 'Follow');\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n    const src = ((user && user.photos.small) ? user.photos.small : undefined) as string | undefined;\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card elevation={6} className={classes.card}>\r\n                <CardActionArea component={RouterLink}\r\n                                to={`/users/${user.id}`}>\r\n                    <Avatar className={classes.avatar}\r\n                            src={src ? src : undefined}\r\n                            variant=\"rounded\"/>\r\n                </CardActionArea>\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography color='primary'\r\n                                variant='subtitle2'\r\n                                align='center'>\r\n                        {user.name}\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n                <CardActions disableSpacing className={classes.cardActions}>\r\n\r\n                    <div className={classes.buttons}>\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button className={classes.button}\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    size='small'\r\n                                    fullWidth\r\n                                    disabled={followingInProgress.some(item => item === user.id)}\r\n                                    onClick={onFollowUnfollowClick}\r\n                                    startIcon={startIcon}\r\n                            >\r\n                                {buttonLabel}\r\n                            </Button>\r\n\r\n                            {\r\n                                isFollowing\r\n                                && followingInProgress.some(item => item === user.id)\r\n                                &&\r\n                                <CircularPreloader size={20} styleType={'absolute'}/>\r\n                            }\r\n\r\n                        </div>\r\n\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant='outlined'\r\n                                color=\"primary\"\r\n                                size='small'\r\n                                fullWidth\r\n                                onClick={onOpenSendMessageFormHandle}\r\n                                startIcon={<SendIcon/>}\r\n                            >\r\n                                {translate(lang, 'Send message')}\r\n                            </Button>\r\n                        </div>\r\n\r\n                        <SendMessageForm open={openSendMessageForm}\r\n                                         onClose={setOpenSendMessageForm}\r\n                                         id={user.id}\r\n                                         name={user.name}\r\n                                         src={src}\r\n                                         dialogs={dialogs}\r\n                        />\r\n\r\n                    </div>\r\n                </CardActions>\r\n\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default UserBlockItem;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        width: 150,\r\n        padding: 10\r\n    },\r\n    media: {\r\n        height: 150,\r\n        borderRadius: 5\r\n    },\r\n    avatar: {\r\n        width: 150,\r\n        height: 150,\r\n    },\r\n    cardContent: {\r\n        padding: 5\r\n    },\r\n    cardActions: {\r\n        padding: 0,\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        marginBottom: 5\r\n    },\r\n    buttons: {\r\n        width: '100%',\r\n        marginTop: 0\r\n    },\r\n});","import React from 'react';\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport {SidebarItemEnum, UserType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar/ListItemAvatar\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {translate} from \"../../../const/lang\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\n\r\n\r\nconst UserListItem: React.FC<PropType> = ({user, dialogs}) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const lang = useSelector(getLang);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const followUnfollowHandle = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n\r\n    const onOpenSendMessageFormHandle = () => {\r\n        setOpenSendMessageForm(true)\r\n    };\r\n\r\n    const goToUserHandle = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.users));\r\n    };\r\n\r\n    const followLabel = user.followed\r\n        ? translate(lang, 'Unfollow') :\r\n        translate(lang, 'Follow');\r\n\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n    const src = ((user && user.photos.small) ? user.photos.small : undefined) as string | undefined;\r\n\r\n\r\n    return (\r\n        <ListItem className={classes.listItem}>\r\n            <ListItemAvatar>\r\n                <Avatar\r\n                    className={classes.avatar}\r\n                    src={src}\r\n                />\r\n            </ListItemAvatar>\r\n            <div className={classes.text}>\r\n                <Link component={RouterLink} to={`/users/${user.id}`} variant='subtitle2'\r\n                      onClick={goToUserHandle}>\r\n                    <Typography color='textPrimary'>\r\n                        {user.name}\r\n                    </Typography>\r\n\r\n                </Link>\r\n                <Link component={RouterLink} to='#' variant='body2' onClick={onOpenSendMessageFormHandle}>\r\n                    {translate(lang, 'Send message')}\r\n                </Link>\r\n                <div className={classes.buttonWrapper}>\r\n                    <Button className={classes.button}\r\n                            color=\"primary\"\r\n                            size='small'\r\n                            fullWidth\r\n                            disabled={followingInProgress.some(item => item === user.id)}\r\n                            onClick={followUnfollowHandle}\r\n                            startIcon={startIcon}\r\n                    >\r\n                        {followLabel}\r\n                    </Button>\r\n\r\n                    {\r\n                        isFollowing\r\n                        && followingInProgress.some(item => item === user.id)\r\n                        &&\r\n                        <CircularPreloader size={20} styleType={'absolute'}/>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n            <SendMessageForm open={openSendMessageForm}\r\n                             onClose={setOpenSendMessageForm}\r\n                             id={user.id}\r\n                             name={user.name}\r\n                             src={src}\r\n                             dialogs={dialogs}\r\n            />\r\n        </ListItem>\r\n    )\r\n};\r\n\r\nexport default UserListItem;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    listItem: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 6,\r\n        borderRadius: 6,\r\n        backgroundColor: 'white',\r\n        boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2), 0px 6px 10px 0px rgba(0,0,0,0.14), 0px 1px 18px 0px rgba(0,0,0,0.12)'\r\n    },\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n    text: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'flex-start'\r\n    },\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        marginBottom: 5\r\n    },\r\n\r\n    // root: {\r\n    //     width: 150,\r\n    //     padding: 10\r\n    // },\r\n    // media: {\r\n    //     height: 150,\r\n    //     borderRadius: 5\r\n    // },\r\n    // avatar: {\r\n    //     width: 150,\r\n    //     height: 150,\r\n    // },\r\n    // cardContent: {\r\n    //     padding: 5\r\n    // },\r\n    // cardActions: {\r\n    //     padding: 0,\r\n    // },\r\n\r\n    // buttons: {\r\n    //     width: '100%',\r\n    //     marginTop: 0\r\n    // },\r\n});","import React from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {UserType, ViewType} from \"../../../types/types\";\r\nimport UserBlockItem from \"./UserBlockItem\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport UserListItem from \"./UserListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst UsersList: React.FC<PropsType> = ({isLoading, users, dialogs, view, pageSize}) => {\r\n    const classes = useStyles();\r\n\r\n    const usersBlockItems = users && users.map(user => <UserBlockItem\r\n        user={user}\r\n        key={user.id}\r\n        dialogs={dialogs}\r\n    />);\r\n\r\n    const usersListItems = users && users.map(user => <UserListItem\r\n        user={user}\r\n        key={user.id}\r\n        dialogs={dialogs}\r\n    />);\r\n\r\n    const allIsLoaded = !isLoading && users && dialogs;\r\n\r\n    let skeletonBlockItems = [] as Array<React.ReactElement>;\r\n    for (let i = 0; i < pageSize; i++) {\r\n        skeletonBlockItems.push(\r\n            <Grid item key={i}>\r\n                <Skeleton variant=\"rect\" width={170} height={272} className={classes.skeletonBlockItem}/>\r\n            </Grid>\r\n        )\r\n    };\r\n\r\n    let skeletonListItems = [] as Array<React.ReactElement>;\r\n    for (let i = 0; i < pageSize; i++) {\r\n        skeletonListItems.push(\r\n            <Skeleton variant=\"rect\" width='100%' height={96} className={classes.skeletonListItem}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                view === \"block\" &&\r\n                <>\r\n                    {\r\n                        allIsLoaded\r\n                            ? <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                                {usersBlockItems}\r\n                            </Grid>\r\n                            : <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                                {skeletonBlockItems}\r\n                            </Grid>\r\n                    }\r\n                </>\r\n            }\r\n\r\n            {\r\n                view === \"list\" &&\r\n                <>\r\n                    {\r\n                        allIsLoaded\r\n                            ? <List disablePadding>\r\n                                {usersListItems}\r\n                            </List>\r\n                            : <List disablePadding>\r\n                                {skeletonListItems}\r\n                            </List>\r\n                    }\r\n                </>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UsersList;\r\n\r\n//======================= TYPES =====================\r\ntype PropsType = {\r\n    isLoading: boolean\r\n    users: null | Array<UserType>\r\n    dialogs: null | Array<DialogType>\r\n    view: ViewType\r\n    pageSize: number\r\n};\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    skeletonBlockItem: {\r\n        borderRadius: 4\r\n    },\r\n    skeletonListItem: {\r\n        borderRadius: 4,\r\n        marginBottom: 5\r\n    }\r\n})","import React, {useEffect, useState} from 'react';\r\nimport Paginator from '../../common/Paginator';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getSearchUsersParams, getShowUsersFrom,\r\n    getTotalUsersCount,\r\n    getUsersSelector, getValueFromHeaderSearch\r\n} from \"../../../redux/users-selectors\";\r\nimport {getIsLoading, getLang} from \"../../../redux/app-selectors\";\r\nimport {getUsers, searchUsers, usersAC} from \"../../../redux/users-reduser\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport UsersSearch from \"./UsersSearch\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport ViewSwitcher from \"../../common/ViewSwitcher\";\r\nimport UsersList from \"./UsersList\";\r\nimport {ViewType} from \"../../../types/types\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\nlet Users: React.FC = () => {\r\n    const classes = useStyles();\r\n    const users = useSelector(getUsersSelector);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const pageSize = useSelector(getPageSize);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const searchUsersParams = useSelector(getSearchUsersParams);\r\n    const showUsersFrom = useSelector(getShowUsersFrom);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n    const valueFromHeaderSearch = useSelector(getValueFromHeaderSearch);\r\n    const lang = useSelector(getLang);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [searchPanelIsOpen, setSearchPanelIsOpen] = useState(false);\r\n    const [view, setView] = useState<ViewType>('block')\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (showUsersFrom === 'all') {\r\n            dispatch(getUsers(currentPage, pageSize));\r\n        } else if (showUsersFrom === 'search') {\r\n            dispatch(searchUsers(currentPage, pageSize, searchUsersParams.term, searchUsersParams.friend));\r\n        }\r\n\r\n    }, [currentPage, pageSize, showUsersFrom, searchUsersParams.term, searchUsersParams.friend]);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentPage(pageNumber));\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setSearchPanelIsOpen(!searchPanelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        dispatch(usersAC.setShowUsersFrom('all'));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n    };\r\n\r\n    const countTitle = showUsersFrom === 'all'\r\n        ? translate(lang, 'Total all users count:') :\r\n        translate(lang, 'Total users count from search:')\r\n\r\n    useEffect(() => {\r\n        if (valueFromHeaderSearch) {\r\n            setSearchPanelIsOpen(true)\r\n        }\r\n    }, [valueFromHeaderSearch])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Collapse in={searchPanelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <UsersSearch/>\r\n            </Collapse>\r\n\r\n            <div className={classes.topPanel}>\r\n                <Button onClick={onSearchCharactersClick}\r\n                        size='small'\r\n                        className={classes.button}\r\n                        color='primary'\r\n                        startIcon={searchPanelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {\r\n                        searchPanelIsOpen\r\n                            ? translate(lang, 'Close search')\r\n                            : translate(lang, 'Open search')\r\n                    }\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        size='small'\r\n                        color='primary'\r\n                        disabled={showUsersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    {translate(lang, 'Show all')}\r\n                </Button>\r\n\r\n                <Typography color='primary'\r\n                            variant='subtitle2'\r\n                            className={classes.countTitle}\r\n                >\r\n                    {countTitle}\r\n                </Typography>\r\n\r\n                <Badge badgeContent={totalUsersCount} color=\"primary\" max={99999} showZero>\r\n                    <PeopleIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n\r\n            {\r\n                totalUsersCount !== 0 && totalUsersCount && pageSize && currentPage &&\r\n                <div className={classes.paginatorTopWrapper}>\r\n                    <div className={classes.paginator}>\r\n                        <Paginator totalItemsCount={totalUsersCount}\r\n                                   pageSize={pageSize}\r\n                                   currentPage={currentPage}\r\n                                   onPageChanged={onPageChanged}\r\n                        />\r\n                    </div>\r\n\r\n                    <ViewSwitcher view={view} setView={setView}/>\r\n                </div>\r\n\r\n            }\r\n\r\n            <UsersList isLoading={isLoading}\r\n                       users={users}\r\n                       dialogs={dialogs}\r\n                       view={view}\r\n                       pageSize={pageSize}\r\n            />\r\n\r\n            {\r\n                totalUsersCount !== 0 && totalUsersCount && pageSize && currentPage &&\r\n                <div className={classes.paginatorBottomWrapper}>\r\n                    <div className={classes.paginator}>\r\n                        <Paginator totalItemsCount={totalUsersCount}\r\n                                   pageSize={pageSize}\r\n                                   currentPage={currentPage}\r\n                                   onPageChanged={onPageChanged}\r\n                        />\r\n                    </div>\r\n                    <ViewSwitcher view={view} setView={setView}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Users);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        //padding: 15,\r\n        minHeight: '100vh'\r\n    },\r\n    topPanel: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    },\r\n    countTitle: {\r\n        marginRight: 10\r\n    },\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    paginatorTopWrapper: {\r\n        marginBottom: 10,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    paginatorBottomWrapper: {\r\n        marginTop: 10,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    paginator: {\r\n        marginRight: 20\r\n    },\r\n});\r\n\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {SidebarItemEnum, UserType} from \"../../../types/types\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sidebarAC} from \"../../../redux/sidebar-reducer\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {getFollowingInProgress, getIsFollowing} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\nconst FriendsListItem: React.FC<PropsTypes> = ({friend, dialogs}) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const lang = useSelector(getLang);\r\n\r\n    const onListItemClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.users));\r\n    };\r\n\r\n    const onOpenSendMessageFormHandle = (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        setOpenSendMessageForm(true)\r\n    };\r\n\r\n    const src = (friend ? friend.photos.small : undefined) as string | undefined;\r\n\r\n    //========================= popper ========================================\r\n    const [open, setOpen] = useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    //============================== IconButton ===================================================\r\n    const removeHandle = () => {\r\n        dispatch(usersAC.setNeedToChangeListOfFriends(true, friend.id))\r\n    };\r\n    const somethingElseHandle = () => {};\r\n\r\n    const labels = [\r\n        translate(lang, 'Remove from friends'),\r\n        translate(lang, 'Something else'),\r\n        translate(lang, 'Something else')\r\n    ];\r\n    const callbacks = [removeHandle, somethingElseHandle, somethingElseHandle]\r\n    const menuItemsElements = labels.map((el, i) => {\r\n        const onClickHandle = (event: React.MouseEvent<EventTarget>) => {\r\n            handleClose(event);\r\n            callbacks[i]();\r\n        };\r\n        return (\r\n            <MenuItem key={i}\r\n                      onClick={onClickHandle}\r\n            >\r\n                {labels[i]}\r\n            </MenuItem>\r\n        )\r\n    });\r\n    //===================================================================================\r\n\r\n    return (\r\n        <>\r\n            <Divider className={classes.divider}/>\r\n            <ListItem className={classes.listItem}>\r\n                <div className={classes.listItemInner}>\r\n                    <div className={classes.listItemInnerleft}>\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={friend.photos.large ? friend.photos.large : undefined}\r\n                            />\r\n                        </ListItemAvatar>\r\n                        <div className={classes.text}>\r\n                            <Link component={RouterLink} to={`/users/${friend.id}`} variant='subtitle2' onClick={onListItemClick}>\r\n                                {friend.name}\r\n                            </Link>\r\n                            <Link component={RouterLink} to='#' variant='body2' onClick={onOpenSendMessageFormHandle}>\r\n                                {translate(lang, 'Send message')}\r\n                            </Link>\r\n                        </div>\r\n                        <SendMessageForm open={openSendMessageForm}\r\n                                         onClose={setOpenSendMessageForm}\r\n                                         id={friend.id}\r\n                                         name={friend.name}\r\n                                         src={src}\r\n                                         dialogs={dialogs}\r\n                        />\r\n\r\n                    </div>\r\n                    {/*<IconButtonWithPopper*/}\r\n                    {/*    icon={<MoreVertIcon/>}*/}\r\n                    {/*    classes={classesPopper}*/}\r\n                    {/*    labels={labels}*/}\r\n                    {/*    callbacks={callbacks}*/}\r\n                    {/*/>*/}\r\n\r\n                    <div>\r\n                        <IconButton ref={anchorRef}\r\n                                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleToggle}\r\n                                    edge=\"end\"\r\n                                    aria-label=\"delete\"\r\n                                    className={classes.iconButton}>\r\n                            <MoreVertIcon/>\r\n                        </IconButton>\r\n                        <Popper className={classes.popper}\r\n                                open={open}\r\n                                anchorEl={anchorRef.current}\r\n                                role={undefined}\r\n                                transition\r\n                                placement='bottom-end'\r\n                                disablePortal>\r\n                            {({TransitionProps, placement}) => (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                      onKeyDown={handleListKeyDown}>\r\n                                                {menuItemsElements}\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            )}\r\n                        </Popper>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isFollowing && followingInProgress.some(item => item === friend.id)\r\n                    && <CircularPreloader size={80} styleType={'absolute'}/>\r\n                }\r\n            </ListItem>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FriendsListItem;\r\n\r\n//========================== TYPES =============================================\r\ntype PropsTypes = {\r\n    friend: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    popper: {\r\n        zIndex: 1000\r\n    },\r\n    listItemInner: {\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    listItemInnerleft: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexGrow: 1\r\n    },\r\n    listItem: {\r\n        position: 'relative'\r\n    },\r\n    text: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }\r\n\r\n});\r\n\r\n// const useStylesPopper = makeStyles({\r\n//     iconButton: {\r\n//         marginRight: 0,\r\n//         //zIndex: 1\r\n//     },\r\n//     popper: {\r\n//         //zIndex: 1000\r\n//     },\r\n// });","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, reset, submit} from \"redux-form\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {getIsFriendsSearching, getSearchFriendsParams} from \"../../../redux/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {translate} from \"../../../const/lang\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\n\r\n//========================== FORM =======================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit} = props;\r\n    const lang = useSelector(getLang);\r\n\r\n    const onChangeHandler = () => {\r\n        dispatch(submit('friends-search'));\r\n        dispatch(usersAC.setCurrentFriendsPage(1))\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='term'\r\n                       component={RenderTextField}\r\n                       fullWidth\r\n                       validate={[shouldNotBeEmpty]}\r\n                       label={translate(lang, 'Name of the friend')}\r\n                       size='small'\r\n                       onChange={onChangeHandler}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst ReduxForm = reduxForm<FormParamsType, FormOwnPropsType>({\r\n    form: 'friends-search',\r\n    //validate\r\n})(Form);\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst FriendsSearch: React.FC = () => {\r\n    const classes = useStyles();\r\n    const isFriendsSearching = useSelector(getIsFriendsSearching);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const dispatch = useDispatch();\r\n    const onSubmit = (formValue: FormParamsType) => {\r\n        dispatch(usersAC.setSearchFriendsParams({term: formValue.term}))\r\n    };\r\n    const icon = searchFriendsParams.term === ''\r\n        ? <SearchIcon/>\r\n        : <HighlightOffIcon/>\r\n\r\n    const onClickHandler = () => {\r\n        if (searchFriendsParams.term !== '') {\r\n            dispatch(usersAC.setSearchFriendsParams({term: ''}));\r\n            dispatch(usersAC.setCurrentFriendsPage(1));\r\n            dispatch(reset('friends-search'));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.search}>\r\n            <div className={classes.iconButton}>\r\n                {\r\n                    !isFriendsSearching\r\n                        ? <IconButton onClick={onClickHandler}>{icon}</IconButton>\r\n                        : <CircularPreloader size={20} styleType='absolute'/>\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.form}>\r\n                <ReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default FriendsSearch;\r\n\r\n\r\n//===================================== TYPES====================================================\r\ntype FormPropsType =\r\n    InjectedFormProps<FormParamsType, FormOwnPropsType>\r\n    & FormOwnPropsType;\r\ntype FormParamsType = {\r\n    term: string\r\n}\r\ntype FormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    fieldWrapper: {\r\n        margin: '10px 10px 5px 35px'\r\n    },\r\n    search: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '0 10px'\r\n    },\r\n    form: {\r\n        flexGrow: 1\r\n    },\r\n    iconButton: {\r\n        width: 48,\r\n        height: 48,\r\n        position: 'relative',\r\n        marginRight: 5\r\n    }\r\n\r\n});","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentFriendsPage,\r\n    getCurrentPage, getFriendIdToRemove,\r\n    getFriendsSelector,\r\n    getNeedToChangeListOfFriends,\r\n    getPageSize, getSearchFriendsParams, getTotalFriendsCount\r\n} from \"../../../redux/users-selectors\";\r\nimport FriendsListItem from \"./FriendsListItem\";\r\nimport React, {useEffect} from \"react\";\r\nimport {searchFriends, removeAndUpdateFriends, usersAC} from \"../../../redux/users-reduser\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsSearch from \"./FriendsSearch\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paginator from \"../../common/Paginator\";\r\nimport {getDialogs} from \"../../../redux/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/dialogs-selectors\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\nconst FriendsList: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    const friends = useSelector(getFriendsSelector);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const currentFriendsPage = useSelector(getCurrentFriendsPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const needToChangeListOfFriends = useSelector(getNeedToChangeListOfFriends);\r\n    const friendIdToRemove = useSelector(getFriendIdToRemove);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const totalFriendsCount = useSelector(getTotalFriendsCount);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n    const lang = useSelector(getLang);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const FriendsListElements = friends\r\n        && friends.map(el => <FriendsListItem key={el.id} friend={el} dialogs={dialogs}/>);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(searchFriends(currentFriendsPage, pageSize, searchFriendsParams.term));\r\n    }, [searchFriendsParams.term, currentFriendsPage]);\r\n\r\n    useEffect(() => {\r\n        if (needToChangeListOfFriends && friendIdToRemove) {\r\n            dispatch(removeAndUpdateFriends(currentPage, pageSize, friendIdToRemove));\r\n        }\r\n    }, [needToChangeListOfFriends]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs());\r\n    }, []);\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentFriendsPage(pageNumber));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <div className={classes.title}>\r\n                <Typography component='span' color='primary' className={classes.titleLeft}>\r\n                    {translate(lang, 'Friends')}\r\n                </Typography>\r\n                <Typography component='span' color='textSecondary'>\r\n                    {totalFriendsCount}\r\n                </Typography>\r\n            </div>\r\n            <FriendsSearch/>\r\n\r\n            <div className={classes.paginatorTop}>\r\n                <Paginator totalItemsCount={totalFriendsCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentFriendsPage}\r\n                           onPageChanged={onPageChanged}\r\n                />\r\n            </div>\r\n\r\n            <List>\r\n                {FriendsListElements}\r\n            </List>\r\n\r\n            <Divider className={classes.divider}/>\r\n\r\n            <div className={classes.paginatorBottom}>\r\n                <Paginator totalItemsCount={totalFriendsCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentFriendsPage}\r\n                           onPageChanged={onPageChanged}\r\n                />\r\n            </div>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsList;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    title: {\r\n        padding: '5px 10px 5px 10px'\r\n    },\r\n    titleLeft: {\r\n        marginRight: 5\r\n    },\r\n    paginatorTop: {\r\n        marginLeft: 10,\r\n        marginTop: 5\r\n    },\r\n    paginatorBottom: {\r\n        marginLeft: 10,\r\n        marginBottom: 5,\r\n        marginTop: 10\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport {usersAC} from \"../../../redux/users-reduser\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\nconst FriendsSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(newValue));\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Tabs\r\n                classes={{\r\n                    indicator: classes.indicator\r\n                }}\r\n                orientation=\"vertical\"\r\n                value={currentFriendsSidebarItem}\r\n                onChange={handleChange}\r\n                className={classes.tabs}\r\n            >\r\n\r\n                <Tab label={translate(lang, \"Friends\")} icon={<GroupIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label={translate(lang, \"Something else\")} icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label={translate(lang, \"Something else\")} icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n\r\n            </Tabs>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid #ccc`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none',\r\n        '& > *:first-child': {\r\n            marginBottom: '0!important'\r\n        }\r\n    },\r\n    icon: {\r\n        margin: '0 10px',\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50\r\n    }\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\nconst FriendsSomethingElse: React.FC = () => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6' color='primary' align='center'>\r\n                {translate(lang, 'Something else')}\r\n            </Typography>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSomethingElse;\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n\r\n    }\r\n});","import React from \"react\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsList from \"./FriendsList\";\r\nimport FriendsSidebar from \"./FriendsSidebar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/users-selectors\";\r\nimport FriendsSomethingElse from \"./FriendsSomethingElse\";\r\n\r\nconst Friends = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.leftColumn}>\r\n                {\r\n                    currentFriendsSidebarItem === 0\r\n                        ? <FriendsList/>\r\n                        : <FriendsSomethingElse/>\r\n                }\r\n            </div>\r\n            <div className={classes.rightColumn}>\r\n                <FriendsSidebar/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withAuthRedirect(Friends);\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        display: \"flex\"\r\n    },\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    leftColumn: {\r\n        flexGrow: 1,\r\n        marginRight: 15,\r\n    },\r\n    rightColumn: {\r\n        flexBasis: 220,\r\n    }\r\n});","import Typography from \"@material-ui/core/Typography\";\r\nimport ColorPicker from \"material-ui-color-picker\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\nconst SettingsRow: React.FC<PropsType> = (props) => {\r\n    const {title, onChangeHandler, resetToDefaultHandle, probeBackgroundColor, defaultColor} = props;\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n\r\n    const useStylesSettings = makeStyles({\r\n        probe: {\r\n            backgroundColor: probeBackgroundColor,\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 5,\r\n            marginRight: 15\r\n        },\r\n        default: {\r\n            backgroundColor: defaultColor,\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 5,\r\n            marginRight: 15\r\n        }\r\n    });\r\n    const classesSettings = useStylesSettings();\r\n\r\n    return (\r\n        <div className={classes.row}>\r\n            <Typography variant='subtitle1' className={classes.text}>\r\n                {title}\r\n            </Typography>\r\n            <ColorPicker className={classes.item}\r\n                         name='color'\r\n                         variant='outlined'\r\n                         size='small'\r\n                         defaultValue={translate(lang, 'Choose color')}\r\n                         onChange={onChangeHandler}\r\n            />\r\n\r\n            <div className={classesSettings.probe}/>\r\n\r\n            <Button variant='contained'\r\n                    onClick={resetToDefaultHandle}\r\n                    className={classes.button}>\r\n                {translate(lang, 'Reset to default')}\r\n            </Button>\r\n\r\n            <div className={classesSettings.default}/>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default SettingsRow;\r\n\r\n//====================== TYPE ===================\r\ntype PropsType = {\r\n    title: string\r\n    onChangeHandler: (color: string) => void\r\n    resetToDefaultHandle: () => void\r\n    probeBackgroundColor: string\r\n    defaultColor: string\r\n}\r\n\r\n//================== STYLE =========================\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        marginBottom: 15\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 10\r\n    },\r\n    text: {\r\n        marginRight: 15,\r\n        flexBasis: 200\r\n    },\r\n    item: {\r\n        marginRight: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 15\r\n    },\r\n\r\n});\r\n","export const defaultTheme = {\r\n    menuBackgroundColor: '#3f50b5',\r\n    displayBackgroundColor: '#e8eaf6',\r\n}","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {settingsAC} from \"../../../redux/settings-reducer\";\r\nimport {getTheme} from \"../../../redux/settings-selectors\";\r\nimport SettingsRow from \"./SettingsRow\";\r\nimport {defaultTheme} from \"../../../const/const\";\r\nimport {getLang} from \"../../../redux/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\nconst Settings: React.FC = () => {\r\n    const classes = useStyles();\r\n    const theme = useSelector(getTheme);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n\r\n    const onMenuBCChangeHandler = (color: string) => {\r\n        if (color) {\r\n            dispatch(settingsAC.setMenuBackgroundColor(color))\r\n        }\r\n    };\r\n\r\n    const onDisplayBCChangeHandler = (color: string) => {\r\n        if (color) {\r\n            dispatch(settingsAC.setDisplayBackgroundColor(color))\r\n        }\r\n    };\r\n\r\n    const resetMenuBCToDefaultHandle = () => {\r\n        dispatch(settingsAC.setMenuBackgroundColor(defaultTheme.menuBackgroundColor))\r\n    };\r\n\r\n    const resetDisplayBCToDefaultHandle = () => {\r\n        dispatch(settingsAC.setDisplayBackgroundColor(defaultTheme.displayBackgroundColor))\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n\r\n            <Typography variant='h6' color='primary' align='center' className={classes.title}>\r\n                {translate(lang, 'Settings')}\r\n            </Typography>\r\n\r\n            <SettingsRow title={translate(lang, 'Menu background color')}\r\n                         onChangeHandler={onMenuBCChangeHandler}\r\n                         probeBackgroundColor={theme.menuBackgroundColor}\r\n                         defaultColor={defaultTheme.menuBackgroundColor}\r\n                         resetToDefaultHandle={resetMenuBCToDefaultHandle}\r\n            />\r\n\r\n            <SettingsRow title={translate(lang, 'Display background color')}\r\n                         onChangeHandler={onDisplayBCChangeHandler}\r\n                         probeBackgroundColor={theme.displayBackgroundColor}\r\n                         defaultColor={defaultTheme.displayBackgroundColor}\r\n                         resetToDefaultHandle={resetDisplayBCToDefaultHandle}\r\n            />\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default Settings;\r\n\r\n//================== STYLE =========================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n        paddingBottom: 400\r\n    },\r\n    title: {\r\n        marginBottom: 15\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 10\r\n    },\r\n    text: {\r\n        marginRight: 15,\r\n        flexBasis: 200\r\n    },\r\n    item: {\r\n        marginRight: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 15\r\n    },\r\n    default: {\r\n        backgroundColor: '#3f50b5',\r\n        width: 40,\r\n        height: 40,\r\n        borderRadius: 5,\r\n        marginRight: 15\r\n    }\r\n});","import React from \"react\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getLang} from \"../../redux/app-selectors\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\nconst PageNotFound: React.FC = () => {\r\n    const lang = useSelector(getLang);\r\n    return (\r\n        <Typography align='center'\r\n                    color='secondary'\r\n                    variant='h6'>\r\n            {translate(lang, 'Page not found')}\r\n        </Typography>\r\n    )\r\n\r\n};\r\n\r\nexport default PageNotFound;\r\n\r\n\r\n","import React, {Suspense} from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport CircularPreloader from \"../common/CircularPreloader\";\nimport Login from \"../Login/Login\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useSelector} from \"react-redux\";\nimport {getIsInitializedSelector} from \"../../redux/app-selectors\";\nimport Users from \"./Users/Users\";\nimport Friends from \"./Friends/Friends\";\nimport Settings from \"./Settings/Settings\";\nimport PageNotFound from \"../common/PageNotFound\";\n\nconst Dialogs = React.lazy(() => import('./Dialogs/Dialogs'));\nconst Profile = React.lazy(() => import('./Profile/Profile'));\n\nconst Main: React.FC = () => {\n    const classes = useStyles();\n    const isInitialized = useSelector(getIsInitializedSelector);\n\n    if (!isInitialized) {\n        return <CircularPreloader/>\n    }\n\n    return (\n        <main className={classes.main}>\n            <Suspense fallback={<CircularPreloader/>}>\n                <Switch>\n                    <Route exact path='/' render={() => <Profile/>}/>\n                    <Route path='/dialogs/:userId?' render={() => <Dialogs/>}/>\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route exact path='/users' render={() => <Users/>}/>\n                    <Route path='/users/:userId' render={() => <Profile/>}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/settings' render={() => <Settings/>}/>\n                    <Route path='*' render={() => <PageNotFound/>}/>\n                </Switch>\n            </Suspense>\n        </main>\n    );\n};\n\nexport default Main;\n\n//========================== STYLES ================================================\nconst useStyles = makeStyles({\n    main: {\n        flexGrow: 1,\n        padding: 10\n    }\n});\n","import React, {useEffect} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getMessageIsSending, getRecipientName} from \"./redux/dialogs-selectors\";\nimport {Snackbar} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {withRouter} from \"react-router-dom\";\nimport {getIsInitialized} from \"./redux/app-reducer\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport {getTheme} from \"./redux/settings-selectors\";\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n    const messageIsSending = useSelector(getMessageIsSending);\n    const recipientName = useSelector(getRecipientName);\n\n    const [showAlert, setShowAlert] = React.useState(false);\n    const dispatch = useDispatch();\n\n\n    const catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(e);\n    };\n\n    useEffect(() => {\n        dispatch(getIsInitialized())\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors);\n        return () => {\n            window.removeEventListener('unhandledrejection', catchAllUnhandledErrors);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!messageIsSending && recipientName) {\n            setShowAlert(true);\n        }\n        return () => {\n            //dispatch(dialogsAC.setRecipientName(null))\n        }\n    }, [messageIsSending])\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setShowAlert(false);\n    };\n\n    const theme = useSelector(getTheme);\n    const useStylesSettings = makeStyles({\n        root: {\n            backgroundColor: theme.displayBackgroundColor,\n            position: 'relative'\n        }\n    });\n    const classesSettings = useStylesSettings();\n\n    return (\n        <div className={classesSettings.root}>\n            <Header/>\n            <div className={classes.wrapper}>\n                <Sidebar/>\n                <Main/>\n            </div>\n\n            <Snackbar open={showAlert}\n                      anchorOrigin={{vertical: 'bottom', horizontal: 'left'}}\n                      autoHideDuration={6000}\n                      onClose={handleClose}>\n                <Alert onClose={handleClose}\n                       variant='filled'\n                       severity=\"success\">\n                    <Typography component='span'>Message to </Typography>\n                    <Typography component='span' color='primary'>{recipientName}</Typography>\n                    <Typography component='span'> is sent!</Typography>\n                </Alert>\n            </Snackbar>\n\n        </div>\n    );\n};\n\nexport default withRouter(App);\n\n//============================= STYLE ==========================\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: indigo[50],\n        position: 'relative'\n    },\n    wrapper: {\n        maxWidth: 1000,\n        width: '100%',\n        margin: '0 auto',\n        display: 'flex',\n        boxSizing: 'border-box',\n        paddingTop: 64,\n        minHeight: '100vh',\n        //overflow: 'auto'\n    },\n\n});\n\n","import * as React from 'react';\r\nimport {ErrorInfo} from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component<PropsType, StateType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            errorInfo: null\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong</h2>\r\n                    <details style={{whiteSpace: 'pre-wrap'}}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                    </details>\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n//==================== TYPES ========================\r\ntype PropsType = {\r\n\r\n};\r\ntype StateType = {\r\n    error: null | Error\r\n    errorInfo: null | ErrorInfo\r\n}","import {Provider} from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport App from \"./App\";\r\nimport ErrorBoundary from \"./Components/common/ErrorBoundary\";\r\n\r\nconst AppGlobal = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <ErrorBoundary>\r\n                <App/>\r\n            </ErrorBoundary>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default AppGlobal;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppGlobal from \"./AppContainer\";\n\nReactDOM.render(\n    <AppGlobal/>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n\n","import {GetActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    currentSidebarItem: null as null | number // текущий элемент главного бокового меню\r\n}\r\n\r\ntype initialStateType = typeof initialState;\r\nexport type SidebarActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: SidebarActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM': {\r\n            return {...state, currentSidebarItem: action.currentSidebarItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const sidebarAC = {\r\n    setCurrentSidebarItem: (currentSidebarItem: null | number) => ({type: 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM', currentSidebarItem} as const)\r\n};\r\n\r\nexport default sidebarReducer;","import {instance, ResultCodesEnum} from \"./api\";\r\nimport {PhotosType} from \"../types/types\";\r\n\r\nexport const dialogsAPI = {\r\n    // получить массив пользователей с кем ведется диалог\r\n    async getDialogs() {\r\n        let response = await instance.get<Array<DialogType>>(`dialogs`);\r\n        return response.data;\r\n    },\r\n\r\n    // ???\r\n    async startDialog(userId: number) {\r\n        let response = await instance.put<SendMessageType>(`dialogs/${userId}`);\r\n        return response.data;\r\n    },\r\n\r\n    // получить массив сообщений из диалога с определенный пользователем\r\n    async getMessages(userId: number) {\r\n        let response = await instance.get<GetMessagesType>(`dialogs/${userId}/messages`)\r\n        return response.data;\r\n    },\r\n\r\n    // послать сообщение пользователю\r\n    async sendMessage(userId: number, message: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/${userId}/messages`,{body: message})\r\n        return response.data;\r\n    },\r\n\r\n    // проверить просмотрено ли мое сообщение\r\n    async getIsMessageViewed(messageId: string) {\r\n        let response = await instance.get<boolean>(`dialogs/messages/${messageId}/viewed`)\r\n        return response.data;\r\n    },\r\n\r\n    // отметить сообщение как спам\r\n    async signMessageAsSpam(messageId: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/messages/${messageId}/spam`)\r\n        console.log(response)\r\n        return response.data;\r\n    },\r\n\r\n    // удалить сообщение (только для меня, не для собеседника)\r\n    async deleteMessage(messageId: string) {\r\n        let response = await instance.delete<SendMessageType>(`dialogs/messages/${messageId}`)\r\n        return response.data;\r\n    },\r\n\r\n    // восстановить удаленное или помеченное как спам сообщение\r\n    async restoreMessage(messageId: string) {\r\n        let response = await instance.put<SendMessageType>(`dialogs/messages/${messageId}/restore`)\r\n        return response.data;\r\n    },\r\n\r\n};\r\n\r\n//================================= TYPE =======================================\r\ntype SendMessageType = {\r\n    data: {message: MessageType}\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: ResultCodesEnum\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    body: string\r\n    translatedBody: any\r\n    addedAt: string\r\n    senderId: number\r\n    senderName: string\r\n    recipientId: number\r\n    recipientName: string\r\n    viewed: boolean\r\n    deletedBySender: boolean // только для post\r\n    deletedByRecipient: boolean  //только для post\r\n    isSpam: boolean  //только для post\r\n    distributionId: any  //только для post\r\n}\r\n\r\ntype GetMessagesType = {\r\n    items: Array<MessageType>\r\n    totalCount: number\r\n    error: any\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    userName: string\r\n    hasNewMessages: boolean\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: PhotosType\r\n}\r\n\r\n","import {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {dialogsAPI, DialogType, MessageType} from \"../DAL/dialogs-api\";\r\nimport {DialogsSidebarItemEnum, DeletedMessagesType} from \"../types/types\";\r\nimport {ResultCodesEnum} from \"../DAL/api\";\r\n\r\nlet initialState = {\r\n    dialogs: null as null | Array<DialogType>, // массив диалогов\r\n    messages: null as null | Array<MessageType>, // сообщения из текущего диалога\r\n    selectedMessages: [] as Array<MessageType>, // массив выделенных сообщений\r\n    selectedDeletedMessages: [] as Array<MessageType>, // массив выделенных удаленных сообщений\r\n    selectedSpamMessages: [] as Array<MessageType>, // массив выделенных spam сообщений\r\n    dialogsIsLoading: false, // диалоги загружаются\r\n    messagesIsLoading: false, // сообщения загружаются?\r\n    messagesIsDeleting: false, // сообщения удаляются (или отправляются в спам)?\r\n    messageIsSending: false, // используется для всплывающего сообщения об отправке сообщения\r\n    recipientName: null as null | string, // имя получателя, используется для всплывающего сообщения об отправке сообщения\r\n    currentDialogsSidebarItem: 0 as DialogsSidebarItemEnum, // текущий элмемент бокового меню\r\n    deletedMessages: [] as DeletedMessagesType, // массив удаленных диалогов [{dialog: DialogType, messages: Array<MessageType>}, ...]\r\n    spamMessages: [] as DeletedMessagesType, // массив диалогов отмеченных как spam [{dialog: DialogType, messages: Array<MessageType>}, ...]\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype DialogsActionsType = GetActionsType<typeof dialogsAC>\r\ntype ThunkType = BaseThunkType<DialogsActionsType | AppActionsType>\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'dialogs/REMOVE_FROM_DELETED_MESSAGES': {\r\n            let deletedMessages = [...state.deletedMessages];\r\n            for (let i = 0; i < action.messages.length; i++) {\r\n                for (let j = 0; j < deletedMessages.length; j++) {\r\n                    deletedMessages[j].messages = deletedMessages[j].messages.filter(el => el.id !== action.messages[i].id)\r\n                }\r\n            }\r\n            deletedMessages = deletedMessages.filter(el => el.messages.length);\r\n\r\n            return {...state, deletedMessages: deletedMessages}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_SPAM_MESSAGES': {\r\n            let spamMessages = [...state.spamMessages];\r\n            for (let i = 0; i < action.messages.length; i++) {\r\n                for (let j = 0; j < spamMessages.length; j++) {\r\n                    spamMessages[j].messages = spamMessages[j].messages.filter(el => el.id !== action.messages[i].id)\r\n                }\r\n            }\r\n            spamMessages = spamMessages.filter(el => el.messages.length);\r\n\r\n            return {...state, spamMessages: spamMessages}\r\n        }\r\n        case 'dialogs/ADD_TO_DELETED_MESSAGES': {\r\n            const index = state.deletedMessages.findIndex(el => el.dialog.id === action.dialog.id)\r\n            if (index === -1) { // если удаленных сообщений из этого диалога еще нет\r\n                return {\r\n                    ...state,\r\n                    deletedMessages: [...state.deletedMessages, {dialog: action.dialog, messages: [action.message]}]\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    deletedMessages: state.deletedMessages.map((el, i) => {\r\n                        if (i !== index) {\r\n                            return el\r\n                        } else {\r\n                            return {dialog: el.dialog, messages: [...el.messages, action.message]}\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        case 'dialogs/ADD_TO_SPAM_MESSAGES': {\r\n            const index = state.spamMessages.findIndex(el => el.dialog.id === action.dialog.id)\r\n            if (index === -1) { // если удаленных сообщений из этого диалога еще нет\r\n                return {\r\n                    ...state,\r\n                    spamMessages: [...state.spamMessages, {dialog: action.dialog, messages: [action.message]}]\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    spamMessages: state.spamMessages.map((el, i) => {\r\n                        if (i !== index) {\r\n                            return el\r\n                        } else {\r\n                            return {dialog: el.dialog, messages: [...el.messages, action.message]}\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        case 'dialogs/SET_CURRENT_DIALOGS_SIDEBAR_ITEM': {\r\n            return {...state, currentDialogsSidebarItem: action.currentDialogsSidebarItem}\r\n        }\r\n        case 'dialogs/SET_MESSAGES_IS_DELETING': {\r\n\r\n            return {...state, messagesIsDeleting: action.messagesIsDeleting}\r\n        }\r\n        case 'dialogs/SET_MESSAGES_IS_LOADING': {\r\n            return {...state, messagesIsLoading: action.messagesIsLoading}\r\n        }\r\n        case 'dialogs/SET_RECIPIENT_NAME': {\r\n            return {...state, recipientName: action.recipientName}\r\n        }\r\n        case 'dialogs/SET_MESSAGE_IS_SENDING': {\r\n            return {...state, messageIsSending: action.messageIsSending}\r\n        }\r\n        case 'dialogs/TOGGLE_DIALOGS_IS_LOADING': {\r\n            return {...state, dialogsIsLoading: action.dialogsIsLoading}\r\n        }\r\n        case 'dialogs/CLEAN_SELECTED_MESSAGES': {\r\n            return {...state, selectedMessages: []}\r\n        }\r\n        case 'dialogs/CLEAN_DELETED_SELECTED_MESSAGES': {\r\n            return {...state, selectedDeletedMessages: []}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_SELECTED_MASSAGES': {\r\n            return {...state, selectedMessages: state.selectedMessages.filter(el => el.id !== action.message.id)}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_DELETED_SELECTED_MASSAGES': {\r\n            return {\r\n                ...state,\r\n                selectedDeletedMessages: state.selectedDeletedMessages.filter(el => el.id !== action.message.id)\r\n            }\r\n        }\r\n        case 'dialogs/ADD_TO_SELECTED_MASSAGES': {\r\n            return {...state, selectedMessages: [...state.selectedMessages, action.message]}\r\n        }\r\n        case 'dialogs/ADD_TO_DELETED_SELECTED_MASSAGES': {\r\n            return {...state, selectedDeletedMessages: [...state.selectedDeletedMessages, action.message]}\r\n        }\r\n        case 'dialogs/SET_MESSAGES': {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case 'dialogs/SET_DIALOGS': {\r\n            return {...state, dialogs: action.dialogs}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const dialogsAC = {\r\n    removeFromDeletedMessages: (messages: Array<MessageType>) => ({\r\n        type: 'dialogs/REMOVE_FROM_DELETED_MESSAGES',\r\n        messages\r\n    } as const),\r\n    removeFromSpamMessages: (messages: Array<MessageType>) => ({\r\n        type: 'dialogs/REMOVE_FROM_SPAM_MESSAGES',\r\n        messages\r\n    } as const),\r\n    addToDeletedMessages: (dialog: DialogType, message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_DELETED_MESSAGES',\r\n        dialog,\r\n        message\r\n    } as const),\r\n    addToSpamMessages: (dialog: DialogType, message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_SPAM_MESSAGES',\r\n        dialog,\r\n        message\r\n    } as const),\r\n    setCurrentDialogsSidebarItem: (currentDialogsSidebarItem: number) => ({\r\n        type: 'dialogs/SET_CURRENT_DIALOGS_SIDEBAR_ITEM',\r\n        currentDialogsSidebarItem\r\n    } as const),\r\n    setMessagesIsDeleting: (messagesIsDeleting: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGES_IS_DELETING',\r\n        messagesIsDeleting\r\n    } as const),\r\n    setMessagesIsLoading: (messagesIsLoading: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGES_IS_LOADING',\r\n        messagesIsLoading\r\n    } as const),\r\n    setRecipientName: (recipientName: null | string) => ({type: 'dialogs/SET_RECIPIENT_NAME', recipientName} as const),\r\n    setMessageIsSending: (messageIsSending: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGE_IS_SENDING',\r\n        messageIsSending\r\n    } as const),\r\n    toggleDialogsIsLoading: (dialogsIsLoading: boolean) => ({\r\n        type: 'dialogs/TOGGLE_DIALOGS_IS_LOADING',\r\n        dialogsIsLoading\r\n    } as const),\r\n    cleanSelectedMessages: () => ({type: 'dialogs/CLEAN_SELECTED_MESSAGES'} as const),\r\n    cleanSelectedDeletedMessages: () => ({type: 'dialogs/CLEAN_DELETED_SELECTED_MESSAGES'} as const),\r\n    addToSelectedMessages: (message: MessageType) => ({type: 'dialogs/ADD_TO_SELECTED_MASSAGES', message} as const),\r\n    addToSelectedDeletedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_DELETED_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    removeFromSelectedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/REMOVE_FROM_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    removeFromSelectedDeletedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/REMOVE_FROM_DELETED_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    setMessages: (messages: Array<MessageType> | null) => ({type: 'dialogs/SET_MESSAGES', messages} as const),\r\n    setDialogs: (dialogs: Array<DialogType>) => ({type: 'dialogs/SET_DIALOGS', dialogs} as const),\r\n};\r\n\r\n// получить массив пользователей с кем ведется диалог\r\nexport const getDialogs = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.toggleDialogsIsLoading(true));\r\n        let data = await dialogsAPI.getDialogs();\r\n        dispatch(dialogsAC.setDialogs(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.toggleDialogsIsLoading(false));\r\n    }\r\n};\r\n\r\n// ???\r\nexport const startDialog = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(appAC.toggleLoading(true));\r\n        let data = await dialogsAPI.startDialog(userId);\r\n        //console.log(data)\r\n        //dispatch(usersAC.setUsers(data.items));\r\n        //dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\n// послать сообщение пользователю\r\nexport const sendMessage = (userId: number, message: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessageIsSending(true)); // сообщение отправляется\r\n        const dataSend = await dialogsAPI.sendMessage(userId, message);// post-запрос на сервер\r\n        if (dataSend.resultCode === ResultCodesEnum.Success) { // если запрос удачный\r\n            dispatch(dialogsAC.setRecipientName(dataSend.data.message.recipientName)); // установить имя адресата сообщения\r\n            const data = await dialogsAPI.getMessages(userId);// обновить список сообщений\r\n            if (data.error === null) {\r\n                dispatch(dialogsAC.setMessages(data.items));\r\n            }\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessageIsSending(false));\r\n    }\r\n};\r\n\r\n// получить массив сообщений из диалога с определенный пользователем\r\nexport const getMessages = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessagesIsLoading(true));\r\n        const data = await dialogsAPI.getMessages(userId);\r\n        if (data.error === null) {\r\n            dispatch(dialogsAC.setMessages(data.items));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessagesIsLoading(false));\r\n    }\r\n};\r\n\r\n// определить, просмотрено ли сообщение\r\nexport const getIsMessageViewed = (messageId: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        //dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await dialogsAPI.getIsMessageViewed(messageId);\r\n        //console.log(data)\r\n        // if (data.resultCode === 0) {\r\n        //     dispatch(profileAC.setStatus(status));\r\n        // }\r\n    } catch (e) {\r\n        //dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        //dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\n// отметить сообщения как спам (при этом удаляется?)\r\nexport const signMessageAsSpam = (messages: Array<MessageType>, dialog: DialogType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(true));\r\n\r\n        const arrayOfRequests = messages\r\n            .map(el => dialogsAPI.signMessageAsSpam(el.id));\r\n        const results = await Promise.all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;// определение успеха массива промисов\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (resultCodeFinally === ResultCodesEnum.Success) {\r\n            const data = await dialogsAPI.getMessages(dialog.id);// обновление массива сообщений (запрос)\r\n            if (data.error === null) {\r\n                dispatch(dialogsAC.setMessages(data.items));// обновление массива сообщений (запись в стор)\r\n                for (let i = 0; i < messages.length; i++) {// добавление сообщений в массив удаленных\r\n                    dispatch(dialogsAC.addToSpamMessages(dialog, messages[i]))\r\n                }\r\n                dispatch(dialogsAC.cleanSelectedMessages()); // очистка массива ид выделенных сообщений\r\n            }\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(false));\r\n    }\r\n};\r\n\r\n// удаление сообщений\r\nexport const deleteMessages = (messages: Array<MessageType>, dialog: DialogType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(true));\r\n\r\n        const arrayOfRequests = messages\r\n            .map(el => dialogsAPI.deleteMessage(el.id));\r\n        const results = await Promise.all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;// определение успеха массива промисов\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (resultCodeFinally === ResultCodesEnum.Success) {\r\n            const data = await dialogsAPI.getMessages(dialog.id);// обновление массива сообщений\r\n            if (data.error === null) {\r\n                dispatch(dialogsAC.setMessages(data.items));\r\n                for (let i = 0; i < messages.length; i++) {// добавление сообщений в массив удаленных\r\n                    dispatch(dialogsAC.addToDeletedMessages(dialog, messages[i]))\r\n                }\r\n                dispatch(dialogsAC.cleanSelectedMessages()); // очистка массива ид выделенных сообщений\r\n            }\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(dialogsAC.setMessagesIsDeleting(false));\r\n    }\r\n};\r\n\r\n// восстановить удаленное или помеченное как спам сообщение\r\nexport const restoreMessages = (messages: Array<MessageType>): ThunkType => async (dispatch) => {\r\n    try {\r\n        const arrayOfRequests = messages\r\n            .map(el => dialogsAPI.restoreMessage(el.id));\r\n        const results = await Promise.all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (resultCodeFinally === ResultCodesEnum.Success) {\r\n            // очистка массива выделенных удаленных сообщений\r\n            dispatch(dialogsAC.cleanSelectedDeletedMessages())\r\n            // удалить сообщения из массива удаленнных диалогов\r\n            dispatch(dialogsAC.removeFromDeletedMessages(messages));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n    }\r\n};\r\n\r\n\r\nexport default dialogsReducer;","import {LangType} from \"../types/types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport React from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport const Lang: LangObjectType = {\r\n    'English': {\r\n        'eng': 'English',\r\n        'rus': 'Русский'\r\n    },\r\n    'Change language': {\r\n        'eng': 'Change language',\r\n        'rus': 'Сменить язык'\r\n    },\r\n    'Logout': {\r\n        'eng': 'Logout',\r\n        'rus': 'Выйти'\r\n    },\r\n    'Settings': {\r\n        'eng': 'Settings',\r\n        'rus': 'Настройки'\r\n    },\r\n    'Social Network': {\r\n        'eng': 'Social Network',\r\n        'rus': 'Социальная сеть'\r\n    },\r\n    'Login': {\r\n        'eng': 'Login',\r\n        'rus': 'Войти'\r\n    },\r\n    'Search...': {\r\n        'eng': 'Search...',\r\n        'rus': 'Найти...'\r\n    },\r\n    'email': {\r\n        'eng': 'Email',\r\n        'rus': 'Электронная почта'\r\n    },\r\n    'password': {\r\n        'eng': 'Password',\r\n        'rus': 'Пароль'\r\n    },\r\n    'Remember me': {\r\n        'eng': 'Remember me',\r\n        'rus': 'Запомнить меня'\r\n    },\r\n    'Enter in your profile': {\r\n        'eng': 'Enter in your profile',\r\n        'rus': 'Войдите в свой профиль'\r\n    },\r\n    'Captcha': {\r\n        'eng': 'Captcha',\r\n        'rus': 'Каптча'\r\n    },\r\n    'Enter symbols from image': {\r\n        'eng': 'Enter symbols from image',\r\n        'rus': 'Введите символы с картинки'\r\n    },\r\n    'My profile': {\r\n        'eng': 'My profile',\r\n        'rus': 'Профиль'\r\n    },\r\n    'Dialogs': {\r\n        'eng': 'Dialogs',\r\n        'rus': 'Диалоги'\r\n    },\r\n    'Users': {\r\n        'eng': 'Users',\r\n        'rus': 'Пользователи'\r\n    },\r\n    'Friends': {\r\n        'eng': 'Friends',\r\n        'rus': 'Друзья'\r\n    },\r\n    'Unfollow': {\r\n        'eng': 'Unfollow',\r\n        'rus': 'Из друзей'\r\n    },\r\n    'Follow': {\r\n        'eng': 'Follow',\r\n        'rus': 'В друзья'\r\n    },\r\n    'Delete avatar': {\r\n        'eng': 'Delete avatar',\r\n        'rus': 'Удалить аватар'\r\n    },\r\n    'Change avatar': {\r\n        'eng': 'Change avatar',\r\n        'rus': 'Сменить аватар'\r\n    },\r\n    'Edit profile': {\r\n        'eng': 'Edit profile',\r\n        'rus': 'Изменить профиль'\r\n    },\r\n    'Hide detailed information': {\r\n        'eng': 'Hide detailed information',\r\n        'rus': 'Скрыть подробную информацию'\r\n    },\r\n    'Show detailed information': {\r\n        'eng': 'Show detailed information',\r\n        'rus': 'Показать подробную информацию'\r\n    },\r\n    'Yes': {\r\n        'eng': 'Yes',\r\n        'rus': 'Да'\r\n    },\r\n    'No': {\r\n        'eng': 'No',\r\n        'rus': 'Нет'\r\n    },\r\n    'About job': {\r\n        'eng': 'About job',\r\n        'rus': 'О работе'\r\n    },\r\n    'Looking for a job': {\r\n        'eng': 'Looking for a job',\r\n        'rus': 'Ищет работу'\r\n    },\r\n    'My professional skills': {\r\n        'eng': 'Professional skills',\r\n        'rus': 'Профессиональные навывки'\r\n    },\r\n    'Contacts': {\r\n        'eng': 'Contacts',\r\n        'rus': 'Контакты'\r\n    },\r\n    'Main': {\r\n        'eng': 'Main',\r\n        'rus': 'Главное'\r\n    },\r\n    'Job': {\r\n        'eng': 'Job',\r\n        'rus': 'Работа'\r\n    },\r\n    'Save': {\r\n        'eng': 'Save',\r\n        'rus': 'Сохранить'\r\n    },\r\n    'Name': {\r\n        'eng': 'Name',\r\n        'rus': 'Имя'\r\n    },\r\n    'Save status': {\r\n        'eng': 'Save status',\r\n        'rus': 'Сохранить статус'\r\n    },\r\n    'Enter your post': {\r\n        'eng': 'Enter your post',\r\n        'rus': 'Введите текст поста'\r\n    },\r\n    'Add post': {\r\n        'eng': 'Add post',\r\n        'rus': 'Добавить пост'\r\n    },\r\n    'Delete post': {\r\n        'eng': 'Delete post',\r\n        'rus': 'Удалить пост'\r\n    },\r\n    'Something else': {\r\n        'eng': 'Something else',\r\n        'rus': 'Что-то еще'\r\n    },\r\n    'There ara no deleted messages': {\r\n        'eng': 'There ara no deleted messages',\r\n        'rus': 'Удаленных сообщений нет'\r\n    },\r\n    'Enter your message': {\r\n        'eng': 'Enter your message',\r\n        'rus': 'Введите тект сообщения'\r\n    },\r\n    'Message is sent...': {\r\n        'eng': 'Message is sent...',\r\n        'rus': 'Сообщение отправляется...'\r\n    },\r\n    'Select a dialog': {\r\n        'eng': 'Select a dialog',\r\n        'rus': 'Выберите диалог'\r\n    },\r\n    'messages': {\r\n        'eng': 'messages',\r\n        'rus': 'сообщение'\r\n    },\r\n    'Delete': {\r\n        'eng': 'Delete',\r\n        'rus': 'Удалить'\r\n    },\r\n    \"Restore\": {\r\n        'eng': \"Restore\",\r\n        'rus': 'Восстановить'\r\n    },\r\n    \"Select deleted dialog\": {\r\n        'eng': \"Select deleted dialog\",\r\n        'rus': 'Выберите удаленный диалог'\r\n    },\r\n    \"There are no deleted dialogs\": {\r\n        'eng': \"There are no deleted dialogs\",\r\n        'rus': 'Удаленных диалогов нет'\r\n    },\r\n    \"All\": {\r\n        'eng': \"All\",\r\n        'rus': 'Все'\r\n    },\r\n    \"Deleted\": {\r\n        'eng': \"Deleted\",\r\n        'rus': 'Удаленные'\r\n    },\r\n    \"Remove from friends\": {\r\n        'eng': \"Remove from friends\",\r\n        'rus': 'Удалить из друзей'\r\n    },\r\n    \"Send message\": {\r\n        'eng': \"Send message\",\r\n        'rus': 'Написать'\r\n    },\r\n    \"Name of the friend\": {\r\n        'eng': \"Name of the friend\",\r\n        'rus': 'Имя друга'\r\n    },\r\n    \"Menu background color\": {\r\n        'eng': \"Menu background color\",\r\n        'rus': 'Цвет заднего фона меню'\r\n    },\r\n    \"Display background color\": {\r\n        'eng': \"Display background color\",\r\n        'rus': 'Цвет заднего фона контента'\r\n    },\r\n    \"Reset to default\": {\r\n        'eng': \"Reset to default\",\r\n        'rus': 'Сброс к предустановкам'\r\n    },\r\n    \"in\": {\r\n        'eng': \"in\",\r\n        'rus': 'в'\r\n    },\r\n    'Choose color': {\r\n        'eng': \"Choose color\",\r\n        'rus': 'Выберите цвет'\r\n    },\r\n    'Field should not be empty': {\r\n        'eng': \"Field should not be empty\",\r\n        'rus': 'Пробельные символы недопустимы'\r\n    },\r\n    'Number of letters is more than': {\r\n        'eng': \"Number of letters is more than\",\r\n        'rus': 'Число символов больше, чем'\r\n    },\r\n    'Field is required': {\r\n        'eng': \"Field is required\",\r\n        'rus': 'Необходимо заполнить'\r\n    },\r\n    'Total all users count:': {\r\n        'eng': 'Total all users count:',\r\n        'rus': 'Количество всех пользователей:'\r\n    },\r\n    'Total users count from search:': {\r\n        'eng': 'Total users count from search:',\r\n        'rus': 'Количество найденных пользователей:'\r\n    },\r\n    'Close search': {\r\n        'eng': 'Close search',\r\n        'rus': 'Закрыть поиск'\r\n    },\r\n    'Open search': {\r\n        'eng': 'Open search',\r\n        'rus': 'Открыть поиск'\r\n    },\r\n    'Show all': {\r\n        'eng': 'Show all',\r\n        'rus': 'Показать всех'\r\n    },\r\n    'User are friend or not': {\r\n        'eng': 'User are friend or not',\r\n        'rus': 'Друг или нет'\r\n    },\r\n    'Friend': {\r\n        'eng': 'Friend',\r\n        'rus': 'Друг'\r\n    },\r\n    'Not friend': {\r\n        'eng': 'Not friend',\r\n        'rus': 'Не друг'\r\n    },\r\n    'Search': {\r\n        'eng': 'Search',\r\n        'rus': 'Поиск'\r\n    },\r\n    'Page not found': {\r\n        'eng': 'Page not found',\r\n        'rus': 'Страницы не существует'\r\n    },\r\n    'New message': {\r\n        'eng': 'New message',\r\n        'rus': 'Новое сообщение'\r\n    },\r\n    'Go to dialog with': {\r\n        'eng': 'Go to dialog with',\r\n        'rus': 'Перейти к диалогу с'\r\n    },\r\n};\r\n\r\n// const lang = useSelector(getLang);\r\n// {translate(lang, '')}\r\n\r\nexport const translate = (lang: LangType, phrase: string): string => {\r\n    return lang === 'rus' ? Lang[phrase].rus : Lang[phrase].eng\r\n};\r\n\r\ntype LangObjectType = {\r\n    [key: string]: {\r\n        'eng': string\r\n        'rus': string\r\n    }\r\n}\r\n\r\n","import {instance, ResponseTypeAPI, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype AuthResponseType = ResponseTypeAPI<AuthResponseDataType>\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LoginResponseType = ResponseTypeAPI<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>\r\n\r\nexport const authAPI = {\r\n    async auth() {\r\n        let response = await instance.get<AuthResponseType>(`auth/me`)\r\n        return response.data;\r\n    },\r\n    async login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        let response = await instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n        return response.data;\r\n    },\r\n    async logout() {\r\n        let response = await instance.delete(`auth/login`)\r\n        return response.data;\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    async getCaptcha() {\r\n        let response = await instance.get<getCaptchaResponseType>(`security/get-captcha-url`);\r\n        return response.data;\r\n    }\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../DAL/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {authAPI} from \"../DAL/auth-api\";\r\nimport {securityAPI} from \"../DAL/security-api\";\r\nimport {BaseThunkType, GetActionsType} from \"./redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {sidebarAC, SidebarActionsType} from \"./sidebar-reducer\";\r\nimport {SidebarItemEnum} from \"../types/types\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as null | string\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype AuthActionsType = GetActionsType<typeof authAC>\r\ntype ThunkType = BaseThunkType<AuthActionsType | FormAction | AppActionsType | SidebarActionsType>\r\n\r\nconst authReducer = (state = initialState, action: AuthActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_AUTH_USER_DATA': {\r\n            return {...state, ...action.data,}\r\n        }\r\n        case 'AUTH/SET_CAPTCHA':\r\n            return {...state, captcha: action.captcha}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const authAC = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH/SET_AUTH_USER_DATA',\r\n        data: {id, email, login, isAuth}\r\n    } as const),\r\n    setCaptchaUrl: (captcha: string) => ({type: 'AUTH/SET_CAPTCHA', captcha} as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.auth();\r\n        //если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            let {id, login, email} = data.data;\r\n            dispatch(authAC.setAuthUserData(id, email, login, true));\r\n        }\r\n        dispatch(appAC.toggleLoading(false));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.login(email, password, rememberMe, captcha);\r\n        // если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n            dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.myProfile))\r\n        } else { // неправильный логин и(или) пароль\r\n            if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) { // необходима каптча\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await securityAPI.getCaptcha();\r\n        dispatch(authAC.setCaptchaUrl(data.url));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.logout();\r\n        // если вылогинись\r\n        if (data.resultCode === 0) {\r\n            dispatch(authAC.setAuthUserData(null, null, null, false));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import {StateType} from \"./redux-store\";\r\n\r\nexport const getDialogsSelector = (state: StateType) => state.dialogs.dialogs;\r\nexport const getMessagesSelector = (state: StateType) => state.dialogs.messages;\r\nexport const getSelectedMessages = (state: StateType) => state.dialogs.selectedMessages;\r\nexport const getSelectedDeletedMessages = (state: StateType) => state.dialogs.selectedDeletedMessages;\r\nexport const getDialogsIsLoading = (state: StateType) => state.dialogs.dialogsIsLoading;\r\nexport const getMessageIsSending = (state: StateType) => state.dialogs.messageIsSending;\r\nexport const getRecipientName = (state: StateType) => state.dialogs.recipientName;\r\nexport const getMessagesIsLoading = (state: StateType) => state.dialogs.messagesIsLoading;\r\nexport const getMessagesIsDeleting = (state: StateType) => state.dialogs.messagesIsDeleting;\r\nexport const getCurrentDialogsSidebarItem = (state: StateType) => state.dialogs.currentDialogsSidebarItem;\r\nexport const getLoading = (state: StateType) => state.dialogs.messageIsSending ||\r\n    state.dialogs.messagesIsLoading ||\r\n    state.dialogs.messagesIsDeleting;\r\nexport const getDeletedMessages = (state: StateType) => state.dialogs.deletedMessages;\r\nexport const getSpamMessages = (state: StateType) => state.dialogs.spamMessages;\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}