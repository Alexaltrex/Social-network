{"version":3,"sources":["const/lang.ts","DAL/profile-api.ts","redux/reducers/profile-reducer.ts","types/types.ts","hooks/useAuthRedirect.ts","Components/common/SendMessageForm.tsx","redux/reducers/app-reducer.ts","utilities/objects-helpers.js","DAL/users-api.ts","redux/reducers/users-reduser.ts","redux/selectors/sidebar-selectors.ts","redux/selectors/app-selectors.ts","redux/selectors/profile-selectors.ts","Components/common/RenderTextareaField.tsx","redux/selectors/users-selectors.ts","Components/common/RenderNakedTextareaField.tsx","DAL/api.ts","Components/common/RenderCheckbox.tsx","redux/reducers/dialogs-reducer.ts","serviceWorker.js","DAL/dialogs-api.ts","Saga/saga.ts","redux/redux-store.ts","Components/Header/HeaderSearch.tsx","Components/Header/HeaderLang.tsx","Components/Header/Header.tsx","Components/Sidebar/SidebarItem.tsx","Components/Sidebar/Sidebar.tsx","Components/common/RenderPasswordField.tsx","Components/Login/Login.tsx","Components/common/Paginator.tsx","Components/common/RenderRadioButton.tsx","Components/Main/Users/UsersSearch.tsx","Components/common/ViewSwitcher.tsx","Components/Main/Users/UserBlockItem.tsx","Components/Main/Users/UserListItem.tsx","Components/Main/Users/UsersList.tsx","Components/Main/Users/Users.tsx","Components/Main/Friends/FriendsListItem.tsx","Components/Main/Friends/FriendsSearch.tsx","Components/Main/Friends/FriendsList.tsx","Components/Main/Friends/FriendsSidebar.tsx","Components/Main/Friends/FriendsSomethingElse.tsx","Components/Main/Friends/Friends.tsx","Components/common/SelectColorPopover.tsx","Components/common/SelectColorButtonCustom.tsx","Components/Main/Settings/SettingsRow.tsx","const/const.js","Components/Main/Settings/Settings.tsx","Components/common/PageNotFound.tsx","Components/Main/Main.tsx","App.tsx","Components/common/ErrorBoundary.tsx","AppContainer.tsx","index.tsx","utilities/validators/validators.ts","redux/reducers/sidebar-reducer.ts","Components/common/CircularPreloader.tsx","redux/reducers/settings-reducer.ts","redux/selectors/auth-selectors.ts","hooks/useCommonQueryParams.ts","redux/selectors/settings-selectors.ts","DAL/auth-api.ts","DAL/security-api.ts","redux/reducers/auth-reducer.ts","redux/selectors/dialogs-selectors.ts","Components/common/RenderTextField.tsx"],"names":["Lang","translate","lang","phrase","rus","eng","profileAPI","id","instance","get","response","data","status","put","photo","formData","FormData","append","console","log","values","userId","initialState","posts","message","likeCount","likeMe","time","Date","profile","currentUserProfile","avatarIsLoading","statusIsLoading","editMode","currentInfoFormSidebarItem","followed","editingPost","profileAC","toggleLikeMe","postId","type","setEditingPost","setCurrentUserProfile","setFollowed","setCurrentInfoFormSidebarItem","addPost","post","deletePost","setUserProfile","setStatus","setPhotos","photos","toggleAvatarLoading","toggleStatusLoading","setEditMode","getProfile","dispatch","a","appAC","toggleLoading","setLanError","getCurrentUserProfile","getFollowed","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","errorFields","messages","key","slice","length","toLowerCase","stopSubmit","Promise","reject","profileReducer","state","action","map","el","filter","DialogsSidebarItemEnum","ProfileSidebarItemEnum","SidebarItemEnum","useAuthRedirect","isAuth","useSelector","getIsAuth","history","useHistory","push","ReduxForm","reduxForm","form","props","handleSubmit","submitting","pristine","classes","useStyles","getLang","classesField","useStylesField","label","buttonLabel","useForm","onSubmit","name","component","RenderTextAreaField","validate","shouldNotBeEmpty","autoFocus","className","textArea","placeholder","size","color","variant","startIcon","disabled","button","SendMessageForm","open","onClose","src","dialogs","useDispatch","onFormCloseHandle","formValue","dialogsSagaAC","sendMessage","dialogIsExist","some","newMessageLabel","goToDialogWithLabel","useSendMessageForm","paper","titleWrapper","title","RouterLink","to","titleLink","titleIcon","onClick","content","friendInfo","avatar","makeStyles","width","display","alignItems","backgroundColor","indigo","padding","flexGrow","marginLeft","marginRight","paddingBottom","marginTop","root","isInitialized","globalError","isLoading","lanError","setIsInitialized","setLang","getIsInitialized","promise","getAuthUserData","all","then","e","appReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","item","usersAPI","currentPage","pageSize","term","friend","url","friendUrl","delete","users","pageFriendsSize","totalUsersCount","totalFriendsCount","currentFriendsPage","isFollowing","arrayOfUserIdWhichFollowingOrUnfollowing","friends","searchUsersParams","searchFriendsParams","isFriendsSearching","showUsersFrom","currentFriendsSidebarItem","needToChangeListOfFriends","friendIdToRemove","valueFromHeaderSearch","portionNumber","usersAC","setPortionNumber","setValueFromHeaderSearch","toggleIsFriendsSearching","setNeedToChangeListOfFriends","setCurrentFriendsSidebarItem","setFriends","setSearchFriendsParams","setSearchUsersParams","setFollow","setUnfollow","setUsers","setCurrentPage","setCurrentFriendsPage","setTotalUsersCount","setTotalFriendsCount","toggleFollowing","toggleFollowingProgress","followingInProgress","setShowUsersFrom","getUsers","totalCount","searchUsers","searchFriends","removeAndUpdateFriends","getFollow","getUnfollow","usersReducer","getCurrentSidebarItem","sidebar","currentSidebarItem","getIsInitializedSelector","app","getIsLoading","getPosts","getProfileSelector","getCurrentUserProfileSelector","getStatusSelector","getAvatarIsLoading","getStatusIsLoading","getEditMode","getCurrentInfoFormSidebarItem","getFollowedSelector","getEditingPost","icon","input","meta","touched","invalid","error","rows","custom","styles","iconLeft","InputProps","multiline","helperText","position","left","top","transform","getUsersSelector","getFriendsSelector","getPageSize","getCurrentPage","getCurrentFriendsPage","getArrayOfUserIdWhichFollowingOrUnfollowing","getTotalUsersCount","getTotalFriendsCount","getIsFollowing","getSearchUsersParams","getSearchFriendsParams","getShowUsersFrom","getCurrentFriendsSidebarItem","getNeedToChangeListOfFriends","getFriendIdToRemove","getIsFriendsSearching","getValueFromHeaderSearch","getPortionNumber","RenderNakedTextAreaField","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","baseURL","withCredentials","headers","RenderCheckbox","control","checked","value","onChange","GET_DIALOGS","SEND_MASSAGE","GET_MASSAGES","DELETE_MESSAGES","RESTORE_MESSAGES","selectedMessages","selectedDeletedMessages","selectedSpamMessages","dialogsIsLoading","messagesIsLoading","messagesIsDeleting","messageIsSending","recipientName","currentDialogsSidebarItem","deletedMessages","spamMessages","dialogsAC","removeFromDeletedMessages","removeFromSpamMessages","addToDeletedMessages","dialog","addToSpamMessages","setCurrentDialogsSidebarItem","setMessagesIsDeleting","setMessagesIsLoading","setRecipientName","setMessageIsSending","toggleDialogsIsLoading","cleanSelectedMessages","cleanSelectedDeletedMessages","addToSelectedMessages","addToSelectedDeletedMessages","removeFromSelectedMessages","removeFromSelectedDeletedMessages","setMessages","setDialogs","getDialogs","getMessages","deleteMessages","restoreMessages","dialogsReducer","i","j","index","findIndex","Boolean","window","location","hostname","match","dialogsAPI","body","messageId","watcherGetDialogs","watcherSendMessage","watcherGetMessage","watcherDeleteMessage","watcherRestoreMessage","workerGetDialogs","workerSendMessage","workerGetMessages","workerDeleteMessages","workerRestoreMessages","rootSaga","takeEvery","call","dataSend","Success","arrayOfRequests","results","resultCodeFinally","Error","rootReducer","combineReducers","sidebarReducer","auth","authReducer","settings","settingsReducer","formReducer","sagaMiddleware","createSagaMiddleware","middleware","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","onSubmitSuccess","result","reset","fieldWrapper","Field","field","HeaderSearch","useHeaderSearch","height","borderRadius","paddingRight","theme","createStyles","transition","transitions","HeaderLang","React","useState","anchorEl","setAnchorEl","englishLabel","handleClick","event","currentTarget","handleClose","handleCloseRus","handleCloseEng","useHeaderLang","Tooltip","placement","Button","endIcon","aria-controls","aria-haspopup","Menu","keepMounted","MenuItem","selected","textTransform","Header","login","getLogin","getId","useEffect","setOpen","anchorRef","useRef","current","contains","target","prevOpen","focus","getTheme","classesSettings","wrapper","menuBackgroundColor","right","zIndex","useStylesSettings","logo","settingsLabel","logoutLabel","loginLabel","handleToggle","handleListKeyDown","preventDefault","onSettingsClick","onLogoutClick","logout","useHeader","Toolbar","toolBar","Typography","noWrap","ref","undefined","small","Avatar","Popper","popper","role","disablePortal","TransitionProps","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","ListItemIcon","ListItemText","primary","maxWidth","margin","boxSizing","minHeight","paddingTop","boxShadow","SidebarItem","ownIndex","sidebarAC","setCurrentSidebarItem","useSidebarItem","ListItem","listItem","clsx","iconSelected","text","minWidth","fontWeight","Sidebar","profileLabel","profileDialogs","profileUsers","profileFriends","profileSettings","useSidebar","List","list","flexBasis","flexShrink","RenderPasswordField","showPassword","setShowPassword","password","setPassword","handleChange","handleClickShowPassword","handleMouseDownPassword","useRenderPasswordField","FormControl","textField","InputLabel","htmlFor","outlined","OutlinedInput","outlinedInputRoot","outlinedInputInput","endAdornment","InputAdornment","IconButton","aria-label","onMouseDown","edge","iconButton","labelWidth","paddingLeft","ReduxLoginForm","captcha","useCommonQueryParams","emailLabel","passwordLabel","rememberMeLabel","captchaLabel","captchaText","useLoginForm","RenderTextField","required","alt","fullWidth","Login","getCaptchaSelector","email","rememberMe","useLogin","Card","card","elevation","align","justifyContent","marginBottom","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","portionCount","startPortionNumber","endPortionNumber","elements","p","buttonRoot","disableElevation","prevPortionLabelEnd","prevPortionLabel","nextPortionLabelEnd","nextPortionLabel","setPrevPortion","setNextPortion","setFirstPortion","setLastPortion","usePaginator","iconButtonRoot","border","RenderRadioButton","labels","rest","formControlLabelElements","FormControlLabel","formControlLabel","Radio","useRenderRadioButton","FormLabel","formLabel","RadioGroup","radioGroup","SearchUsersReduxForm","enableReinitialize","classesRadioButton","useStylesRadioButton","nameLabel","userAreFriendOrNotLabel","allLabel","friendLabel","notFriendLabel","searchLabel","useSearchUsersForm","UsersSearch","initialValues","submit","useUsersSearch","h6","Divider","divider","flexDirection","ViewSwitcher","view","onChangeHandle","setView","newView","useViewSwitcher","ToggleButtonGroup","exclusive","ToggleButton","fontSize","UserBlockItem","user","openSendMessageForm","setOpenSendMessageForm","sendMessageLabel","onFollowUnfollowClick","onOpenSendMessageFormHandle","useUserBlockItem","Grid","CardActionArea","CardContent","cardContent","CardActions","disableSpacing","cardActions","buttons","buttonWrapper","CircularPreloader","styleType","media","UserListItem","followLabel","followUnfollowHandle","goToUserHandle","useUserListItem","Link","UsersList","usersBlockItems","usersListItems","allIsLoaded","skeletonBlockItems","Skeleton","skeletonBlockItem","skeletonListItems","skeletonListItem","useUsersList","container","alignContent","justify","wrap","spacing","disablePadding","Users","getDialogsSelector","searchPanelIsOpen","setSearchPanelIsOpen","useQueryParam","NumberParam","currentPageQuery","setCurrentPageQuery","portionNumberQuery","setPortionNumberQuery","StringParam","viewQuery","setViewQuery","BooleanParam","searchPanelIsOpenQuery","setSearchPanelIsOpenQuery","showUsersFromQuery","setShowUsersFromQuery","termQuery","setTermQuery","friendQuery","setFriendQuery","countTitle","closeSearchLabel","openSearchLabel","showAllLabel","pageNumber","onSearchCharactersClick","onShowAllClick","useUsers","Collapse","in","timeout","unmountOnExit","topPanel","Badge","badgeContent","max","showZero","paginatorTopWrapper","paginator","paginatorBottomWrapper","FriendsListItem","somethingElseHandle","callbacks","menuItemsElements","onListItemClick","useFriendsListItem","listItemInner","listItemInnerleft","large","onChangeHandler","setTimeout","nameOfTheFriendLabel","FriendsSearch","onClickHandler","useFriendsSearch","search","FriendsList","FriendsListElements","useFriendsList","titleLeft","paginatorTop","paginatorBottom","FriendsSidebar","newValue","friendsLabel","somethingElseLabel","useFriendsSidebar","Tabs","indicator","orientation","tabs","Tab","tabRoot","labelIcon","borderLeft","FriendsSomethingElse","Friends","friendsPageQuery","setFriendsPageQuery","searchFriendsTermQuery","setSearchFriendsTermQuery","useFriends","leftColumn","rightColumn","Div","styled","div","SelectColorPopover","header","onPickColor","propsColor","setColor","onAcceptHandler","useSelectColorPopover","enable","SelectColorButtonCustom","onPickColorHandler","tipTitle","anchorOriginVertical","anchorOriginHorizontal","transformOriginVertical","transformOriginHorizontal","headerLabel","tipTitleLabel","useSelectColorButtonCustom","arrow","tooltip","Popover","anchorOrigin","vertical","horizontal","SettingsRow","resetToDefaultHandle","probeBackgroundColor","defaultColor","probe","default","useSettingsRow","row","defaultTheme","Settings","onMenuBCChangeHandler","settingsAC","setMenuBackgroundColor","onDisplayBCChangeHandler","setDisplayBackgroundColor","resetMenuBCToDefaultHandle","resetDisplayBCToDefaultHandle","useSettings","displayBackgroundColor","PageNotFound","pageNotFoundLabel","usePageNotFound","Profile","lazy","Dialogs","Main","main","fallback","exact","path","render","withRouter","getMessageIsSending","getRecipientName","showAlert","setShowAlert","catchAllUnhandledErrors","alert","addEventListener","removeEventListener","reason","useApp","Snackbar","autoHideDuration","Alert","severity","ErrorBoundary","errorInfo","this","setState","whiteSpace","toString","children","AppContainer","ReactRouterRoute","Route","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","maxLength30","empty","str","test","classesAbsolute","useStylesAbsolute","classesStaticCenter","useStylesStaticCenter","classesStaticTop","useStylesStaticTop","useCircularPreloader","circularWrapper","bottom","langQuery","setLangQuery","menuColorQuery","setMenuColorQuery","displayColorQuery","setDisplayColorQuery","sidebarItemQuery","setSidebarItemQuery","authAPI","securityAPI","authAC","myProfile","CaptchaIsRequired","getCaptchaUrl","_error","getMessagesSelector","getSelectedMessages","getSelectedDeletedMessages","getDialogsIsLoading","getMessagesIsLoading","getMessagesIsDeleting","getCurrentDialogsSidebarItem","getLoading","getDeletedMessages","getSpamMessages"],"mappings":"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","file":"static/js/main.ef3e7f0b.chunk.js","sourcesContent":["import {LangType} from \"../types/types\";\r\n\r\nexport const Lang: LangObjectType = {\r\n    'English': {\r\n        'eng': 'English',\r\n        'rus': 'Русский'\r\n    },\r\n    'Change language': {\r\n        'eng': 'Change language',\r\n        'rus': 'Сменить язык'\r\n    },\r\n    'Logout': {\r\n        'eng': 'Logout',\r\n        'rus': 'Выйти'\r\n    },\r\n    'Settings': {\r\n        'eng': 'Settings',\r\n        'rus': 'Настройки'\r\n    },\r\n    'Social Network': {\r\n        'eng': 'Social Network',\r\n        'rus': 'Социальная сеть'\r\n    },\r\n    'Login': {\r\n        'eng': 'Login',\r\n        'rus': 'Войти'\r\n    },\r\n    'Search...': {\r\n        'eng': 'Search...',\r\n        'rus': 'Найти...'\r\n    },\r\n    'email': {\r\n        'eng': 'Email',\r\n        'rus': 'Электронная почта'\r\n    },\r\n    'password': {\r\n        'eng': 'Password',\r\n        'rus': 'Пароль'\r\n    },\r\n    'Remember me': {\r\n        'eng': 'Remember me',\r\n        'rus': 'Запомнить меня'\r\n    },\r\n    'Enter in your profile': {\r\n        'eng': 'Enter in your profile',\r\n        'rus': 'Войдите в свой профиль'\r\n    },\r\n    'Captcha': {\r\n        'eng': 'Captcha',\r\n        'rus': 'Каптча'\r\n    },\r\n    'Enter symbols from image': {\r\n        'eng': 'Enter symbols from image',\r\n        'rus': 'Введите символы с картинки'\r\n    },\r\n    'My profile': {\r\n        'eng': 'My profile',\r\n        'rus': 'Профиль'\r\n    },\r\n    'Dialogs': {\r\n        'eng': 'Dialogs',\r\n        'rus': 'Диалоги'\r\n    },\r\n    'Users': {\r\n        'eng': 'Users',\r\n        'rus': 'Пользователи'\r\n    },\r\n    'Friends': {\r\n        'eng': 'Friends',\r\n        'rus': 'Друзья'\r\n    },\r\n    'Unfollow': {\r\n        'eng': 'Unfollow',\r\n        'rus': 'Из друзей'\r\n    },\r\n    'Follow': {\r\n        'eng': 'Follow',\r\n        'rus': 'В друзья'\r\n    },\r\n    'Delete avatar': {\r\n        'eng': 'Delete avatar',\r\n        'rus': 'Удалить аватар'\r\n    },\r\n    'Change avatar': {\r\n        'eng': 'Change avatar',\r\n        'rus': 'Сменить аватар'\r\n    },\r\n    'Edit profile': {\r\n        'eng': 'Edit profile',\r\n        'rus': 'Изменить профиль'\r\n    },\r\n    'Hide detailed information': {\r\n        'eng': 'Hide detailed information',\r\n        'rus': 'Скрыть подробную информацию'\r\n    },\r\n    'Show detailed information': {\r\n        'eng': 'Show detailed information',\r\n        'rus': 'Показать подробную информацию'\r\n    },\r\n    'Yes': {\r\n        'eng': 'Yes',\r\n        'rus': 'Да'\r\n    },\r\n    'No': {\r\n        'eng': 'No',\r\n        'rus': 'Нет'\r\n    },\r\n    'About job': {\r\n        'eng': 'About job',\r\n        'rus': 'О работе'\r\n    },\r\n    'Looking for a job': {\r\n        'eng': 'Looking for a job',\r\n        'rus': 'Ищет работу'\r\n    },\r\n    'My professional skills': {\r\n        'eng': 'Professional skills',\r\n        'rus': 'Профессиональные навывки'\r\n    },\r\n    'Contacts': {\r\n        'eng': 'Contacts',\r\n        'rus': 'Контакты'\r\n    },\r\n    'Main': {\r\n        'eng': 'Main',\r\n        'rus': 'Главное'\r\n    },\r\n    'Job': {\r\n        'eng': 'Job',\r\n        'rus': 'Работа'\r\n    },\r\n    'Save': {\r\n        'eng': 'Save',\r\n        'rus': 'Сохранить'\r\n    },\r\n    'Name': {\r\n        'eng': 'Name',\r\n        'rus': 'Имя'\r\n    },\r\n    'Save status': {\r\n        'eng': 'Save status',\r\n        'rus': 'Сохранить статус'\r\n    },\r\n    'Enter your post': {\r\n        'eng': 'Enter your post',\r\n        'rus': 'Введите текст поста'\r\n    },\r\n    'Add post': {\r\n        'eng': 'Add post',\r\n        'rus': 'Добавить пост'\r\n    },\r\n    'Delete post': {\r\n        'eng': 'Delete post',\r\n        'rus': 'Удалить пост'\r\n    },\r\n    'Something else': {\r\n        'eng': 'Something else',\r\n        'rus': 'Что-то еще'\r\n    },\r\n    'There ara no deleted messages': {\r\n        'eng': 'There ara no deleted messages',\r\n        'rus': 'Удаленных сообщений нет'\r\n    },\r\n    'Enter your message': {\r\n        'eng': 'Enter your message',\r\n        'rus': 'Введите тект сообщения'\r\n    },\r\n    'Message is sent...': {\r\n        'eng': 'Message is sent...',\r\n        'rus': 'Сообщение отправляется...'\r\n    },\r\n    'Select a dialog': {\r\n        'eng': 'Select a dialog',\r\n        'rus': 'Выберите диалог'\r\n    },\r\n    'messages': {\r\n        'eng': 'messages',\r\n        'rus': 'сообщение'\r\n    },\r\n    'Delete': {\r\n        'eng': 'Delete',\r\n        'rus': 'Удалить'\r\n    },\r\n    \"Restore\": {\r\n        'eng': \"Restore\",\r\n        'rus': 'Восстановить'\r\n    },\r\n    \"Select deleted dialog\": {\r\n        'eng': \"Select deleted dialog\",\r\n        'rus': 'Выберите удаленный диалог'\r\n    },\r\n    \"There are no deleted dialogs\": {\r\n        'eng': \"There are no deleted dialogs\",\r\n        'rus': 'Удаленных диалогов нет'\r\n    },\r\n    \"All\": {\r\n        'eng': \"All\",\r\n        'rus': 'Все'\r\n    },\r\n    \"Deleted\": {\r\n        'eng': \"Deleted\",\r\n        'rus': 'Удаленные'\r\n    },\r\n    \"Remove from friends\": {\r\n        'eng': \"Remove from friends\",\r\n        'rus': 'Удалить из друзей'\r\n    },\r\n    \"Send message\": {\r\n        'eng': \"Send message\",\r\n        'rus': 'Написать'\r\n    },\r\n    \"Name of the friend\": {\r\n        'eng': \"Name of the friend\",\r\n        'rus': 'Имя друга'\r\n    },\r\n    \"Menu background color\": {\r\n        'eng': \"Menu background color\",\r\n        'rus': 'Цвет заднего фона меню'\r\n    },\r\n    \"Display background color\": {\r\n        'eng': \"Display background color\",\r\n        'rus': 'Цвет заднего фона контента'\r\n    },\r\n    \"Reset to default\": {\r\n        'eng': \"Reset to default\",\r\n        'rus': 'Сброс'\r\n    },\r\n    \"in\": {\r\n        'eng': \"in\",\r\n        'rus': 'в'\r\n    },\r\n    'Choose color': {\r\n        'eng': \"Choose color\",\r\n        'rus': 'Выберите цвет'\r\n    },\r\n    'Field should not be empty': {\r\n        'eng': \"Field should not be empty\",\r\n        'rus': 'Пробельные символы недопустимы'\r\n    },\r\n    'Number of letters is more than': {\r\n        'eng': \"Number of letters is more than\",\r\n        'rus': 'Число символов больше, чем'\r\n    },\r\n    'Field is required': {\r\n        'eng': \"Field is required\",\r\n        'rus': 'Необходимо заполнить'\r\n    },\r\n    'Total all users count:': {\r\n        'eng': 'Total all users count:',\r\n        'rus': 'Количество всех пользователей:'\r\n    },\r\n    'Total users count from search:': {\r\n        'eng': 'Total users count from search:',\r\n        'rus': 'Количество найденных пользователей:'\r\n    },\r\n    'Close search': {\r\n        'eng': 'Close search',\r\n        'rus': 'Закрыть поиск'\r\n    },\r\n    'Open search': {\r\n        'eng': 'Open search',\r\n        'rus': 'Открыть поиск'\r\n    },\r\n    'Show all': {\r\n        'eng': 'Show all',\r\n        'rus': 'Показать всех'\r\n    },\r\n    'User are friend or not': {\r\n        'eng': 'User are friend or not',\r\n        'rus': 'Друг или нет'\r\n    },\r\n    'Friend': {\r\n        'eng': 'Friend',\r\n        'rus': 'Друг'\r\n    },\r\n    'Not friend': {\r\n        'eng': 'Not friend',\r\n        'rus': 'Не друг'\r\n    },\r\n    'Search': {\r\n        'eng': 'Search',\r\n        'rus': 'Поиск'\r\n    },\r\n    'Page not found': {\r\n        'eng': 'Page not found',\r\n        'rus': 'Страницы не существует'\r\n    },\r\n    'New message': {\r\n        'eng': 'New message',\r\n        'rus': 'Новое сообщение'\r\n    },\r\n    'Go to dialog with': {\r\n        'eng': 'Go to dialog with',\r\n        'rus': 'Перейти к диалогу с'\r\n    },\r\n};\r\n\r\n// const lang = useSelector(getLang);\r\n// {translate(lang, '')}\r\n\r\nexport const translate = (lang: LangType, phrase: string): string => {\r\n    return lang === 'rus' ? Lang[phrase].rus : Lang[phrase].eng\r\n};\r\n\r\ntype LangObjectType = {\r\n    [key: string]: {\r\n        'eng': string\r\n        'rus': string\r\n    }\r\n}\r\n\r\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, ResponseTypeAPI} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    async getProfile(id: number) {\r\n        let response = await instance.get<ProfileType>(`profile/${id}`)\r\n        return response.data;\r\n    },\r\n    async getStatus(id: number) {\r\n        let response = await instance.get<string>(`profile/status/${id}`)\r\n        return response.data;\r\n    },\r\n    async updateStatus(status: string) {\r\n        let response = await instance.put<ResponseTypeAPI>(`profile/status`, {status: status})\r\n        return response.data;\r\n    },\r\n    async savePhoto(photo: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photo);\r\n        let response = await instance.put('profile/photo', formData);\r\n        console.log(response)\r\n        return response.data;\r\n    },\r\n    async saveProfile(values: ProfileType) {\r\n        let response = await instance.put<ResponseTypeAPI<SavePhotoResponseDataType>>(`profile`, values)\r\n        return response.data;\r\n    },\r\n    async getFollowed(userId: number) {\r\n        let response = await instance.get<boolean>(`follow/${userId}`)\r\n        return response.data;\r\n    },\r\n};","import {FormAction, stopSubmit} from 'redux-form';\r\nimport {LangType, PhotosType, PostType, ProfileSidebarItemEnum, ProfileType} from \"../../types/types\";\r\nimport {profileAPI} from \"../../DAL/profile-api\";\r\nimport {BaseThunkType, GetActionsType} from \"../redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hello, world', likeCount: 4, likeMe: false, time: new Date(2020, 8, 25,10, 19)},\r\n    ] as Array<PostType>, // массив постов\r\n    profile: null as null | ProfileType, // прифиль инициализированного пользователя\r\n    currentUserProfile: null as null | ProfileType, // профиль текущего просматриваемого пользователя\r\n    status: null as null | string, // статус\r\n    avatarIsLoading: false, // аватар загружается?\r\n    statusIsLoading: false, //  статус загружается?\r\n    editMode: false, // вкл./выкл. режим редактирования статуса\r\n    currentInfoFormSidebarItem: 0 as ProfileSidebarItemEnum, // текущий элемент бокового меню (все, удаленные, спам)\r\n    followed: null as null | boolean, // пользователь - друг?\r\n    editingPost: false // режим ввода нового поста (false - надпись, true - форма ввода)\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = GetActionsType<typeof profileAC>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction | AppActionsType>\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profile/TOGGLE_LIKE_ME': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(el => {\r\n                    if (el.id === action.postId) {\r\n                        return {...el, likeCount: el.likeMe ? el.likeCount - 1 : el.likeCount + 1, likeMe: !el.likeMe}\r\n                    } else {\r\n                        return el\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case 'profile/SET_EDITING_POST': {\r\n            return {...state, editingPost: action.editingPost}\r\n        }\r\n        case 'profile/SET_CURRENT_USER_PROFILE': {\r\n            return {...state, currentUserProfile: action.currentUserProfile}\r\n        }\r\n        case 'profile/SET_FOLLOWED': {\r\n            return {...state, followed: action.followed}\r\n        }\r\n        case 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM': {\r\n            return {...state, currentInfoFormSidebarItem: action.currentInfoFormSidebarItem}\r\n        }\r\n        case 'profile/SET_EDIT_MODE': {\r\n            return {...state, editMode: action.editMode}\r\n        }\r\n        case 'profile/AVATAR_IS_LOADING': {\r\n            return {...state, avatarIsLoading: action.avatarIsLoading}\r\n        }\r\n        case 'profile/STATUS_IS_LOADING': {\r\n            return {...state, statusIsLoading: action.statusIsLoading}\r\n        }\r\n        case 'profile/ADD_POST': {\r\n            let id = state.posts.length ? state.posts[state.posts.length - 1].id + 1 : 1;\r\n            return {\r\n                ...state,\r\n                posts: [\r\n                    ...state.posts,\r\n                    {\r\n                        id: id,\r\n                        message: action.post,\r\n                        likeMe: false,\r\n                        likeCount: 0,\r\n                        time: action.time\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        case 'profile/DELETE_POST': {\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.id)}\r\n        }\r\n        case 'profile/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'profile/SET_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'profile/SET_PHOTOS': {\r\n            if (state.profile) {\r\n                return {\r\n                    ...state, profile: {...state.profile, photos: action.photos}\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const profileAC = {\r\n    toggleLikeMe: (postId: number) => ({type: 'profile/TOGGLE_LIKE_ME', postId} as const),\r\n    setEditingPost: (editingPost: boolean) => ({type: 'profile/SET_EDITING_POST', editingPost} as const),\r\n    setCurrentUserProfile: (currentUserProfile: ProfileType) => ({\r\n        type: 'profile/SET_CURRENT_USER_PROFILE',\r\n        currentUserProfile\r\n    } as const),\r\n    setFollowed: (followed: null | boolean) => ({type: 'profile/SET_FOLLOWED', followed} as const),\r\n    setCurrentInfoFormSidebarItem: (currentInfoFormSidebarItem: number) => ({\r\n        type: 'profile/SET_CURRENT_INFO_FORM_SIDEBAR_ITEM',\r\n        currentInfoFormSidebarItem\r\n    } as const),\r\n    addPost: (post: string, lang: LangType) => ({\r\n        type: 'profile/ADD_POST',\r\n        post,\r\n        time: new Date()\r\n    } as const),\r\n    deletePost: (id: number) => ({type: 'profile/DELETE_POST', id} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'profile/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\r\n    setPhotos: (photos: PhotosType) => ({type: 'profile/SET_PHOTOS', photos} as const),\r\n    toggleAvatarLoading: (avatarIsLoading: boolean) => ({type: 'profile/AVATAR_IS_LOADING', avatarIsLoading} as const),\r\n    toggleStatusLoading: (statusIsLoading: boolean) => ({type: 'profile/STATUS_IS_LOADING', statusIsLoading} as const),\r\n    setEditMode: (editMode: boolean) => ({type: 'profile/SET_EDIT_MODE', editMode} as const),\r\n};\r\n\r\n\r\nexport const getProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentUserProfile = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getProfile(id);\r\n        dispatch(profileAC.setCurrentUserProfile(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\n// определение явдяется ли другом пользователь\r\nexport const getFollowed = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await profileAPI.getFollowed(userId);\r\n        dispatch(profileAC.setFollowed(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.getStatus(id);\r\n        dispatch(profileAC.setStatus(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleStatusLoading(true));\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setStatus(status));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleStatusLoading(false));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (photo: File): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(profileAC.toggleAvatarLoading(true));\r\n        const data = await profileAPI.savePhoto(photo);\r\n        if (data.resultCode === 0) {\r\n            dispatch(profileAC.setPhotos(data.data.photos));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(profileAC.toggleAvatarLoading(false));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (values: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await profileAPI.saveProfile(values)\r\n        //const id = getState().auth.id;\r\n        const id = values.userId\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(getProfile(id));\r\n        } else {\r\n            //data.messages[0]\r\n            let errorFields = {} as any;\r\n            for (let message of data.messages) {\r\n                let key = message.slice(30, message.length - 1).toLowerCase();\r\n                errorFields[key] = 'Invalid url format';\r\n            }\r\n            //dispatch(stopSubmit('profileAboutMeForm', {_error: 'error'}));\r\n            dispatch(stopSubmit('profileAboutMeForm', {'contacts': errorFields}));\r\n            return Promise.reject(data.messages[0]);\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport default profileReducer;","import {DialogType, MessageType} from \"../DAL/dialogs-api\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n    likeMe: boolean\r\n    time: Date\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n}\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n}\r\n\r\nexport type FriendsValuesType = 'all' | 'true' | 'false';\r\n\r\nexport type SearchUsersParamsType = {\r\n    term: string\r\n    friend: FriendsValuesType\r\n}\r\n\r\nexport type SearchFriendsParamsType = {\r\n    term: string\r\n}\r\n\r\nexport type ViewType = 'list' | 'block'\r\n\r\nexport type DeletedMessagesType = Array<DeletedMessagesItem>\r\n\r\nexport type DeletedMessagesItem = {\r\n    dialog: DialogType\r\n    messages: Array<MessageType>\r\n}\r\n\r\nexport enum DialogsSidebarItemEnum {\r\n    all = 0,\r\n    deleted = 1,\r\n    spam = 2\r\n}\r\n\r\nexport enum ProfileSidebarItemEnum {\r\n    main = 0,\r\n    job = 1,\r\n    contacts = 2\r\n}\r\n\r\nexport enum SidebarItemEnum {\r\n    myProfile = 1,\r\n    dialogs = 2,\r\n    users = 3,\r\n    friends = 4,\r\n    settings = 5\r\n}\r\n\r\nexport type LangType = 'eng' | 'rus'\r\n\r\nexport type UseParamsType = {\r\n    userId: string | undefined\r\n}\r\nexport type ShowUsersFromType = 'all' | 'search';","import {useSelector} from \"react-redux\";\r\nimport {getIsAuth} from \"../redux/selectors/auth-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useAuthRedirect = () => {\r\n    const isAuth = useSelector(getIsAuth);\r\n    let history = useHistory();\r\n    if (!isAuth) {\r\n        history.push(\"/login\");\r\n    }\r\n};\r\n\r\nexport default useAuthRedirect;","import React from \"react\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport RenderTextAreaField from \"./RenderTextareaField\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {dialogsSagaAC} from \"../../redux/reducers/dialogs-reducer\";\r\nimport {DialogType} from \"../../DAL/dialogs-api\";\r\nimport {getLang} from \"../../redux/selectors/app-selectors\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useForm = () => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const classesField = useStylesField();\r\n    const label = translate(lang, 'Enter your message');\r\n    const buttonLabel = translate(lang, 'Send message');\r\n    return {classes, classesField, label, buttonLabel}\r\n};\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine} = props;\r\n    const {classes, classesField, label, buttonLabel} = useForm();\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field name='message'\r\n                   component={RenderTextAreaField}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   autoFocus={true}\r\n                   className={classes.textArea}\r\n                   classes={classesField}\r\n                   label={label}\r\n                   placeholder={label}\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SendIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    {buttonLabel}\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'send-message',\r\n})(Form);\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useSendMessageForm = ({onClose, id, dialogs}: UseSendMessageFormType) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector(getLang);\r\n    const onFormCloseHandle = () => {\r\n        onClose(false);\r\n    };\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(dialogsSagaAC.sendMessage(id, formValue.message));\r\n        onClose(false);\r\n    };\r\n    const dialogIsExist = dialogs && dialogs.some(el => el.id === id);\r\n    const newMessageLabel = translate(lang, 'New message');\r\n    const goToDialogWithLabel = translate(lang, 'Go to dialog with');\r\n    return {\r\n        classes, onFormCloseHandle, onSubmit, dialogIsExist,\r\n        newMessageLabel, goToDialogWithLabel\r\n    }\r\n};\r\n\r\n//================ COMPONENT =========================================\r\nconst SendMessageForm: React.FC<ComponentPropsType> = ({open, onClose, id, name, src, dialogs}) => {\r\n    const {\r\n        classes, onFormCloseHandle, onSubmit, dialogIsExist,\r\n        newMessageLabel, goToDialogWithLabel\r\n    } = useSendMessageForm({onClose, id, dialogs});\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dialogs &&\r\n                <Dialog open={open}\r\n                        classes={{\r\n                            paper: classes.paper\r\n                        }}\r\n                >\r\n                    <div className={classes.titleWrapper}>\r\n                        <Typography className={classes.title}>\r\n                            {newMessageLabel}\r\n                        </Typography>\r\n\r\n                        {\r\n                            dialogIsExist &&\r\n                            <Link component={RouterLink}\r\n                                  to={`/dialogs/${id}`}\r\n                                  variant='body2'\r\n                                  className={classes.titleLink}\r\n                            >\r\n                                {`${goToDialogWithLabel} ${name}`}\r\n                            </Link>\r\n                        }\r\n\r\n                        <IconButton className={classes.titleIcon}\r\n                                    onClick={onFormCloseHandle}\r\n                        >\r\n                            <HighlightOffIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n\r\n                    <DialogContent className={classes.content}>\r\n                        <div className={classes.friendInfo}>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={src}\r\n                            />\r\n                            <Link component={RouterLink}\r\n                                  to={`/users/${id}`}\r\n                                  variant='subtitle2'\r\n                            >\r\n                                {name}\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <ReduxForm onSubmit={onSubmit}/>\r\n\r\n                    </DialogContent>\r\n\r\n                </Dialog>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SendMessageForm;\r\n\r\n//=========================== TYPE =======================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    message: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\ntype ComponentPropsType = {\r\n    open: boolean\r\n    onClose: (openForm: boolean) => void\r\n    id: number\r\n    name: string\r\n    src: string | undefined\r\n    dialogs: Array<DialogType> | null\r\n}\r\ntype UseSendMessageFormType = {\r\n    onClose: (openForm: boolean) => void\r\n    id: number\r\n    dialogs: Array<DialogType> | null\r\n}\r\n//========================== STYLES ======================\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        width: 500\r\n    },\r\n    titleWrapper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: indigo[500],\r\n        color: 'white',\r\n        padding: '5px 5px 5px 15px',\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    titleLink: {\r\n        color: 'white',\r\n    },\r\n    titleIcon: {\r\n        color: 'white',\r\n        marginLeft: 10\r\n    },\r\n    friendInfo: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '10px 0 15px 0'\r\n    },\r\n    avatar: {\r\n        marginRight: 10\r\n    },\r\n    content: {\r\n        backgroundColor: indigo[50],\r\n        paddingBottom: 15\r\n    },\r\n    textArea: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        marginTop: 15\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles({\r\n    root: {\r\n        backgroundColor: 'white'\r\n    },\r\n})","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {LangType} from \"../../types/types\";\r\nimport {BaseThunkType, GetActionsType} from \"../redux-store\";\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>;\r\ntype ThunkType = BaseThunkType<AppActionsType>\r\n\r\nlet initialState = {\r\n    isInitialized: false, // приложение проинициализировано (получены инициализационные данные)?\r\n    globalError: null,\r\n    isLoading: false, // загрузка происходит?\r\n    lanError: false, // ошибка сети\r\n    lang: 'eng' as LangType // язык приложения\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_LANG':\r\n            return {...state, lang: action.lang}\r\n        case 'APP/SET_IS_INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setIsInitialized: (isInitialized: boolean) => ({type: 'APP/SET_IS_INITIALIZED', isInitialized} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n    setLang: (lang: LangType) => ({type: 'APP/SET_LANG', lang} as const),\r\n};\r\n\r\nexport const getIsInitialized = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let promise = dispatch(getAuthUserData());\r\n        // dispatch(somethingElse());\r\n        // dispatch(somethingElse());\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(appAC.setIsInitialized(true));\r\n            })\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport default appReducer;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(item => {\r\n        if (item[objPropName] === itemId) {\r\n            return {...item, ...newObjProps}\r\n        }\r\n        return item;\r\n    })\r\n};","import {GetItemsType, instance, ResponseTypeAPI} from \"./api\";\r\nimport {FriendsValuesType} from \"../types/types\";\r\n\r\nexport const usersAPI = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        let response = await instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`);\r\n        return response.data;\r\n    },\r\n\r\n    async searchUsers(currentPage = 1, pageSize = 10, term: string, friend: FriendsValuesType) {\r\n        let url = `users?page=${currentPage}&count=${pageSize}`;\r\n        if (term) url = url + `&term=${term}`;\r\n        let friendUrl;\r\n        if (friend === 'all') {\r\n            friendUrl = ''\r\n        } else {\r\n            friendUrl = `&friend=${friend}`\r\n        }\r\n        url = url + friendUrl;\r\n        let response = await instance.get<GetItemsType>(url);\r\n        return response.data;\r\n    },\r\n\r\n    async followUser(id: number) {\r\n        let response = await instance.post<ResponseTypeAPI>(`follow/${id}`);\r\n        console.log(response);\r\n        return response.data;\r\n    },\r\n\r\n    async unfollowUser(id: number) {\r\n        let response = await instance.delete<ResponseTypeAPI>(`follow/${id}`);\r\n        return response.data;\r\n    },\r\n};\r\n\r\n","import {updateObjectInArray} from \"../../utilities/objects-helpers\";\r\nimport {\r\n    FriendsValuesType, SearchFriendsParamsType,\r\n    SearchUsersParamsType, ShowUsersFromType,\r\n    UserType\r\n} from \"../../types/types\";\r\nimport {BaseThunkType, GetActionsType} from \"../redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../../DAL/users-api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    users: null as null | Array<UserType>, // массив пользователей\r\n    pageSize: 10, // количество пользователей на одной странице\r\n    pageFriendsSize: 10, // количество друзей на одной странице\r\n    totalUsersCount: 0, // общее число пользователей\r\n    totalFriendsCount: 0, // общее число друзей\r\n    currentPage: 1, // номер текущей страницы пользователей\r\n    currentFriendsPage: 1, // номер текущей страницы друзей\r\n    isLoading: false, // загрузка происходит?\r\n    isFollowing: false, // отписка/подписка происходит?\r\n    arrayOfUserIdWhichFollowingOrUnfollowing: [] as Array<number>, // массив пользователей, для которых послан запрос на подписку/отписку\r\n    friends: null as null | Array<UserType>, // массив друзей\r\n    searchUsersParams: {term: '', friend: 'all'} as SearchUsersParamsType, // параметры поиска пользователей\r\n    searchFriendsParams: {term: ''} as SearchFriendsParamsType, // параметры поиска друзей\r\n    isFriendsSearching: false, // поиск друзей происходит?\r\n    showUsersFrom: 'all' as ShowUsersFromType, // откуда показывать пользователей - всех или из поиска\r\n    currentFriendsSidebarItem: 0, // номер элемента бокового меню\r\n    needToChangeListOfFriends: false, // список друзей нужно изменить (используется для обновления после удаления)?\r\n    friendIdToRemove: null as null | number, // id друга, которого удаляем\r\n    valueFromHeaderSearch: null as null | string, // строка поиска пользователя из header\r\n    portionNumber: 1 // текущий номер порции страниц пользователей (начинается с 1)\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: UsersActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'USERS/SET_PORTION_NUMBER': {\r\n            return {...state, portionNumber: action.portionNumber}\r\n        }\r\n        case 'USERS/SET_VALUE_FROM_HEADER_SEARCH': {\r\n            return {...state, valueFromHeaderSearch: action.valueFromHeaderSearch}\r\n        }\r\n        case 'USERS/TOGGLE_IS_FRIENDS_SEARCHING': {\r\n            return {...state, isFriendsSearching: action.isFriendsSearching}\r\n        }\r\n        case 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS': {\r\n            return {\r\n                ...state,\r\n                needToChangeListOfFriends: action.needToChangeListOfFriends,\r\n                friendIdToRemove: action.friendIdToRemove\r\n            }\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM': {\r\n            return {...state, currentFriendsSidebarItem: action.currentFriendsSidebarItem}\r\n        }\r\n        case 'USERS/SET_FRIENDS': {\r\n            return {...state, friends: action.friends}\r\n        }\r\n        case 'USERS/SET_SHOW_USERS_FROM': {\r\n            return {...state, showUsersFrom: action.showUsersFrom}\r\n        }\r\n        case 'USERS/SET_SEARCH_FRIENDS_PARAMS': {\r\n            return {...state, searchFriendsParams: action.searchFriendsParams}\r\n        }\r\n        case 'USERS/SET_SEARCH_USERS_PARAMS': {\r\n            return {...state, searchUsersParams: action.searchUsersParams}\r\n        }\r\n        case 'USERS/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        }\r\n        case 'USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        }\r\n        case 'USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage};\r\n        }\r\n        case 'USERS/SET_CURRENT_FRIENDS_PAGE': {\r\n            return {...state, currentFriendsPage: action.currentFriendsPage};\r\n        }\r\n        case 'USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n        }\r\n        case 'USERS/SET_TOTAL_FRIENDS_COUNT': {\r\n            return {...state, totalFriendsCount: action.totalFriendsCount};\r\n        }\r\n        case 'USERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING': {\r\n            return {...state, isFollowing: action.isFollowing}\r\n        }\r\n        case 'USERS/TOGGLE_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                // если запрос на подписку-отписку послан - добавить в массив, иначе удалить из массива\r\n                arrayOfUserIdWhichFollowingOrUnfollowing:\r\n                    action.followingInProgress\r\n                        ? [...state.arrayOfUserIdWhichFollowingOrUnfollowing, action.id]\r\n                        : state.arrayOfUserIdWhichFollowingOrUnfollowing.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const usersAC = {\r\n    setPortionNumber: (portionNumber: number) => ({type: 'USERS/SET_PORTION_NUMBER', portionNumber} as const),\r\n    setValueFromHeaderSearch: (valueFromHeaderSearch: string | null) => ({\r\n        type: 'USERS/SET_VALUE_FROM_HEADER_SEARCH',\r\n        valueFromHeaderSearch\r\n    } as const),\r\n    toggleIsFriendsSearching: (isFriendsSearching: boolean) => ({\r\n        type: 'USERS/TOGGLE_IS_FRIENDS_SEARCHING',\r\n        isFriendsSearching\r\n    } as const),\r\n    setNeedToChangeListOfFriends: (needToChangeListOfFriends: boolean, friendIdToRemove: number | null) => ({\r\n        type: 'USERS/SET_NEED_TO_CHANG_LIST_OF_FRIENDS',\r\n        needToChangeListOfFriends,\r\n        friendIdToRemove\r\n    } as const),\r\n    setCurrentFriendsSidebarItem: (currentFriendsSidebarItem: number) => ({\r\n        type: 'USERS/SET_CURRENT_FRIENDS_SIDEBAR_ITEM',\r\n        currentFriendsSidebarItem\r\n    } as const),\r\n    setFriends: (friends: Array<UserType>) => ({type: 'USERS/SET_FRIENDS', friends} as const),\r\n    setSearchFriendsParams: (searchFriendsParams: SearchFriendsParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_FRIENDS_PARAMS',\r\n        searchFriendsParams\r\n    } as const),\r\n    setSearchUsersParams: (searchUsersParams: SearchUsersParamsType) => ({\r\n        type: 'USERS/SET_SEARCH_USERS_PARAMS',\r\n        searchUsersParams\r\n    } as const),\r\n    setFollow: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    setUnfollow: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setCurrentFriendsPage: (currentFriendsPage: number) => ({\r\n        type: 'USERS/SET_CURRENT_FRIENDS_PAGE',\r\n        currentFriendsPage\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'USERS/SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n    setTotalFriendsCount: (totalFriendsCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_FRIENDS_COUNT',\r\n        totalFriendsCount\r\n    } as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'USERS/TOGGLE_LOADING', isLoading} as const),\r\n    toggleFollowing: (isFollowing: boolean) => ({type: 'USERS/TOGGLE_FOLLOWING', isFollowing} as const),\r\n    toggleFollowingProgress: (followingInProgress: boolean, id: number) => ({\r\n        type: 'USERS/TOGGLE_FOLLOWING_PROGRESS',\r\n        followingInProgress,\r\n        id\r\n    } as const),\r\n    setShowUsersFrom: (showUsersFrom: ShowUsersFromType) => ({\r\n        type: 'USERS/SET_SHOW_USERS_FROM',\r\n        showUsersFrom\r\n    } as const),\r\n};\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize);\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchUsers = (currentPage: number, pageSize: number, term: string, friend: FriendsValuesType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, friend);\r\n        dispatch(usersAC.setUsers(data.items));\r\n        dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const searchFriends = (currentPage: number, pageSize: number, term: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleIsFriendsSearching(true));\r\n        let data = await usersAPI.searchUsers(currentPage, pageSize, term, 'true');\r\n        dispatch(usersAC.setFriends(data.items));\r\n        dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleIsFriendsSearching(false));\r\n    }\r\n};\r\n\r\nexport const removeAndUpdateFriends = (currentPage: number, pageSize: number, id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(true, id));\r\n        const dataFromUnfollow = await usersAPI.unfollowUser(id);\r\n        if (dataFromUnfollow.resultCode === 0) {\r\n            const data = await usersAPI.searchUsers(currentPage, pageSize, '', 'true');\r\n            dispatch(usersAC.setFriends(data.items));\r\n            dispatch(usersAC.setTotalFriendsCount(data.totalCount));\r\n            dispatch(usersAC.setNeedToChangeListOfFriends(false, null));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(false, id));\r\n    }\r\n};\r\n\r\nexport const getFollow = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(true, id));\r\n        const data = await usersAPI.followUser(id);\r\n        if (data.resultCode === 0) {\r\n            dispatch(usersAC.setFollow(id));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n        console.log(e.message)\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowingProgress(false, id));\r\n        dispatch(usersAC.toggleFollowing(false));\r\n    }\r\n};\r\n\r\nexport const getUnfollow = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAC.toggleFollowing(true));\r\n        dispatch(usersAC.toggleFollowingProgress(true, id));\r\n        const data = await usersAPI.unfollowUser(id);\r\n        if (data.resultCode === 0) {\r\n            dispatch(usersAC.setUnfollow(id));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n        console.log(e.message)\r\n    } finally {\r\n        dispatch(usersAC.toggleFollowingProgress(false, id));\r\n        dispatch(usersAC.toggleFollowing(false));\r\n    }\r\n};\r\n\r\nexport default usersReducer;\r\n\r\n//============================ TYPES ==============================================\r\nexport type initialStateType = typeof initialState;\r\ntype UsersActionsType = GetActionsType<typeof usersAC>\r\ntype DispatchType = Dispatch<UsersActionsType>\r\ntype ThunkType = BaseThunkType<UsersActionsType | AppActionsType>","import {StateType} from \"../redux-store\";\r\n\r\nexport const getCurrentSidebarItem = (state: StateType) => state.sidebar.currentSidebarItem;","import {StateType} from \"../redux-store\";\r\n\r\nexport const getIsInitializedSelector = (state: StateType) => state.app.isInitialized;\r\nexport const getIsLoading = (state: StateType) => state.app.isLoading;\r\nexport const getLanError = (state: StateType) => state.app.lanError;\r\nexport const getLang = (state: StateType) => state.app.lang;\r\n","import {StateType} from \"../redux-store\";\r\n\r\nexport const getPosts = (state: StateType) => state.profile.posts;\r\nexport const getProfileSelector = (state: StateType) => state.profile.profile;\r\nexport const getCurrentUserProfileSelector = (state: StateType) => state.profile.currentUserProfile;\r\nexport const getStatusSelector = (state: StateType) => state.profile.status;\r\nexport const getAvatarIsLoading = (state: StateType) => state.profile.avatarIsLoading;\r\nexport const getStatusIsLoading = (state: StateType) => state.profile.statusIsLoading;\r\nexport const getEditMode = (state: StateType) => state.profile.editMode;\r\nexport const getCurrentInfoFormSidebarItem = (state: StateType) => state.profile.currentInfoFormSidebarItem;\r\nexport const getFollowedSelector = (state: StateType) => state.profile.followed;\r\nexport const getEditingPost = (state: StateType) => state.profile.editingPost;\r\n\r\n\r\n\r\n\r\n","import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextAreaField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid, error}, classes, rows = 4, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                multiline\r\n                variant=\"outlined\"\r\n                label={label}\r\n                rows={rows}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n    rows?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import {StateType} from \"../redux-store\";\r\n\r\nexport const getUsersSelector = (state: StateType) => state.users.users;\r\nexport const getFriendsSelector = (state: StateType) => state.users.friends;\r\nexport const getPageSize = (state: StateType) => state.users.pageSize;\r\nexport const getCurrentPage = (state: StateType) => state.users.currentPage;\r\nexport const getCurrentFriendsPage = (state: StateType) => state.users.currentFriendsPage;\r\nexport const getArrayOfUserIdWhichFollowingOrUnfollowing = (state: StateType) => state.users.arrayOfUserIdWhichFollowingOrUnfollowing;\r\nexport const getTotalUsersCount = (state: StateType) => state.users.totalUsersCount;\r\nexport const getTotalFriendsCount = (state: StateType) => state.users.totalFriendsCount;\r\nexport const getIsLoading = (state: StateType) => state.users.isLoading;\r\nexport const getIsFollowing = (state: StateType) => state.users.isFollowing;\r\nexport const getSearchUsersParams = (state: StateType) => state.users.searchUsersParams;\r\nexport const getSearchFriendsParams = (state: StateType) => state.users.searchFriendsParams;\r\nexport const getShowUsersFrom = (state: StateType) => state.users.showUsersFrom;\r\nexport const getCurrentFriendsSidebarItem = (state: StateType) => state.users.currentFriendsSidebarItem;\r\nexport const getNeedToChangeListOfFriends = (state: StateType) => state.users.needToChangeListOfFriends;\r\nexport const getFriendIdToRemove = (state: StateType) => state.users.friendIdToRemove;\r\nexport const getIsFriendsSearching = (state: StateType) => state.users.isFriendsSearching;\r\nexport const getValueFromHeaderSearch = (state: StateType) => state.users.valueFromHeaderSearch;\r\nexport const getPortionNumber = (state: StateType) => state.users.portionNumber;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst RenderNakedTextAreaField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, placeholder, input, meta: {touched, invalid}, rows = 4, multiline = true, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon && <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <InputBase\r\n                classes={classes ? classes : null}\r\n                multiline={multiline}\r\n                rows={rows}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={placeholder}\r\n                error={touched && invalid}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderNakedTextAreaField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    placeholder: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n    },\r\n    rows?: number\r\n    multiline?: boolean\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'bb4c7a12-a222-41e4-9c09-c4f5b6ec4797'\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseTypeAPI<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","import {FormControlLabel} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderCheckbox: React.FC<PropsType> = (props) => {\r\n    const {input, label, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {icon && <div className={classes.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={input.value ? true : false}\r\n                        color=\"primary\"\r\n                        onChange={input.onChange}\r\n                    />\r\n                }\r\n                label={label}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RenderCheckbox\r\n\r\n//======================== TYPES ============================\r\ntype PropsType = {\r\n    icon?: React.ReactElement\r\n    label: string\r\n    input: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);","import {BaseThunkType, GetActionsType} from \"../redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {dialogsAPI, DialogType, MessageType} from \"../../DAL/dialogs-api\";\r\nimport {DialogsSidebarItemEnum, DeletedMessagesType} from \"../../types/types\";\r\nimport {ResultCodesEnum} from \"../../DAL/api\";\r\n\r\nexport const GET_DIALOGS = 'DIALOGS/GET_DIALOGS';\r\nexport const SEND_MASSAGE = 'DIALOGS/SEND_MASSAGE';\r\nexport const GET_MASSAGES = 'DIALOGS/GET_MASSAGES';\r\nexport const DELETE_MESSAGES = 'DIALOGS/DELETE_MESSAGES';\r\nexport const RESTORE_MESSAGES = 'DIALOGS/RESTORE_MESSAGES';\r\n\r\nlet initialState = {\r\n    dialogs: null as null | Array<DialogType>, // массив диалогов\r\n    messages: null as null | Array<MessageType>, // сообщения из текущего диалога\r\n    selectedMessages: [] as Array<MessageType>, // массив выделенных сообщений\r\n    selectedDeletedMessages: [] as Array<MessageType>, // массив выделенных удаленных сообщений\r\n    selectedSpamMessages: [] as Array<MessageType>, // массив выделенных spam сообщений\r\n    dialogsIsLoading: false, // диалоги загружаются\r\n    messagesIsLoading: false, // сообщения загружаются?\r\n    messagesIsDeleting: false, // сообщения удаляются (или отправляются в спам)?\r\n    messageIsSending: false, // используется для всплывающего сообщения об отправке сообщения\r\n    recipientName: null as null | string, // имя получателя, используется для всплывающего сообщения об отправке сообщения\r\n    currentDialogsSidebarItem: 0 as DialogsSidebarItemEnum, // текущий элемемент бокового меню\r\n    deletedMessages: [] as DeletedMessagesType, // массив удаленных диалогов [{dialog: DialogType, messages: Array<MessageType>}, ...]\r\n    spamMessages: [] as DeletedMessagesType, // массив диалогов отмеченных как spam [{dialog: DialogType, messages: Array<MessageType>}, ...]\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype DialogsActionsType = GetActionsType<typeof dialogsAC>\r\nexport type DialogsSagaActionsType = GetActionsType<typeof dialogsSagaAC>\r\ntype ThunkType = BaseThunkType<DialogsActionsType | AppActionsType>\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogsActionsType | DialogsSagaActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'dialogs/REMOVE_FROM_DELETED_MESSAGES': {\r\n            let deletedMessages = [...state.deletedMessages];\r\n            for (let i = 0; i < action.messages.length; i++) {\r\n                for (let j = 0; j < deletedMessages.length; j++) {\r\n                    deletedMessages[j].messages = deletedMessages[j].messages.filter(el => el.id !== action.messages[i].id)\r\n                }\r\n            }\r\n            deletedMessages = deletedMessages.filter(el => el.messages.length);\r\n\r\n            return {...state, deletedMessages: deletedMessages}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_SPAM_MESSAGES': {\r\n            let spamMessages = [...state.spamMessages];\r\n            for (let i = 0; i < action.messages.length; i++) {\r\n                for (let j = 0; j < spamMessages.length; j++) {\r\n                    spamMessages[j].messages = spamMessages[j].messages.filter(el => el.id !== action.messages[i].id)\r\n                }\r\n            }\r\n            spamMessages = spamMessages.filter(el => el.messages.length);\r\n\r\n            return {...state, spamMessages: spamMessages}\r\n        }\r\n        case 'dialogs/ADD_TO_DELETED_MESSAGES': {\r\n            const index = state.deletedMessages.findIndex(el => el.dialog.id === action.dialog.id)\r\n            if (index === -1) { // если удаленных сообщений из этого диалога еще нет\r\n                return {\r\n                    ...state,\r\n                    deletedMessages: [...state.deletedMessages, {dialog: action.dialog, messages: [action.message]}]\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    deletedMessages: state.deletedMessages.map((el, i) => {\r\n                        if (i !== index) {\r\n                            return el\r\n                        } else {\r\n                            return {dialog: el.dialog, messages: [...el.messages, action.message]}\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        case 'dialogs/ADD_TO_SPAM_MESSAGES': {\r\n            const index = state.spamMessages.findIndex(el => el.dialog.id === action.dialog.id)\r\n            if (index === -1) { // если удаленных сообщений из этого диалога еще нет\r\n                return {\r\n                    ...state,\r\n                    spamMessages: [...state.spamMessages, {dialog: action.dialog, messages: [action.message]}]\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    spamMessages: state.spamMessages.map((el, i) => {\r\n                        if (i !== index) {\r\n                            return el\r\n                        } else {\r\n                            return {dialog: el.dialog, messages: [...el.messages, action.message]}\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        case 'dialogs/SET_CURRENT_DIALOGS_SIDEBAR_ITEM': {\r\n            return {...state, currentDialogsSidebarItem: action.currentDialogsSidebarItem}\r\n        }\r\n        case 'dialogs/SET_MESSAGES_IS_DELETING': {\r\n\r\n            return {...state, messagesIsDeleting: action.messagesIsDeleting}\r\n        }\r\n        case 'dialogs/SET_MESSAGES_IS_LOADING': {\r\n            return {...state, messagesIsLoading: action.messagesIsLoading}\r\n        }\r\n        case 'dialogs/SET_RECIPIENT_NAME': {\r\n            return {...state, recipientName: action.recipientName}\r\n        }\r\n        case 'dialogs/SET_MESSAGE_IS_SENDING': {\r\n            return {...state, messageIsSending: action.messageIsSending}\r\n        }\r\n        case 'dialogs/TOGGLE_DIALOGS_IS_LOADING': {\r\n            return {...state, dialogsIsLoading: action.dialogsIsLoading}\r\n        }\r\n        case 'dialogs/CLEAN_SELECTED_MESSAGES': {\r\n            return {...state, selectedMessages: []}\r\n        }\r\n        case 'dialogs/CLEAN_DELETED_SELECTED_MESSAGES': {\r\n            return {...state, selectedDeletedMessages: []}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_SELECTED_MASSAGES': {\r\n            return {...state, selectedMessages: state.selectedMessages.filter(el => el.id !== action.message.id)}\r\n        }\r\n        case 'dialogs/REMOVE_FROM_DELETED_SELECTED_MASSAGES': {\r\n            return {\r\n                ...state,\r\n                selectedDeletedMessages: state.selectedDeletedMessages.filter(el => el.id !== action.message.id)\r\n            }\r\n        }\r\n        case 'dialogs/ADD_TO_SELECTED_MASSAGES': {\r\n            return {...state, selectedMessages: [...state.selectedMessages, action.message]}\r\n        }\r\n        case 'dialogs/ADD_TO_DELETED_SELECTED_MASSAGES': {\r\n            return {...state, selectedDeletedMessages: [...state.selectedDeletedMessages, action.message]}\r\n        }\r\n        case 'dialogs/SET_MESSAGES': {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case 'dialogs/SET_DIALOGS': {\r\n            return {...state, dialogs: action.dialogs}\r\n        }\r\n        // SAGA\r\n        case GET_DIALOGS: {\r\n            return state\r\n        }\r\n        case SEND_MASSAGE: {\r\n            return state\r\n        }\r\n        case GET_MASSAGES: {\r\n            return state\r\n        }\r\n        case DELETE_MESSAGES: {\r\n            return state\r\n        }\r\n        case RESTORE_MESSAGES: {\r\n            return state\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const dialogsAC = {\r\n    removeFromDeletedMessages: (messages: Array<MessageType>) => ({\r\n        type: 'dialogs/REMOVE_FROM_DELETED_MESSAGES',\r\n        messages\r\n    } as const),\r\n    removeFromSpamMessages: (messages: Array<MessageType>) => ({\r\n        type: 'dialogs/REMOVE_FROM_SPAM_MESSAGES',\r\n        messages\r\n    } as const),\r\n    addToDeletedMessages: (dialog: DialogType, message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_DELETED_MESSAGES',\r\n        dialog,\r\n        message\r\n    } as const),\r\n    addToSpamMessages: (dialog: DialogType, message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_SPAM_MESSAGES',\r\n        dialog,\r\n        message\r\n    } as const),\r\n    setCurrentDialogsSidebarItem: (currentDialogsSidebarItem: number) => ({\r\n        type: 'dialogs/SET_CURRENT_DIALOGS_SIDEBAR_ITEM',\r\n        currentDialogsSidebarItem\r\n    } as const),\r\n    setMessagesIsDeleting: (messagesIsDeleting: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGES_IS_DELETING',\r\n        messagesIsDeleting\r\n    } as const),\r\n    setMessagesIsLoading: (messagesIsLoading: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGES_IS_LOADING',\r\n        messagesIsLoading\r\n    } as const),\r\n    setRecipientName: (recipientName: null | string) => ({type: 'dialogs/SET_RECIPIENT_NAME', recipientName} as const),\r\n    setMessageIsSending: (messageIsSending: boolean) => ({\r\n        type: 'dialogs/SET_MESSAGE_IS_SENDING',\r\n        messageIsSending\r\n    } as const),\r\n    toggleDialogsIsLoading: (dialogsIsLoading: boolean) => ({\r\n        type: 'dialogs/TOGGLE_DIALOGS_IS_LOADING',\r\n        dialogsIsLoading\r\n    } as const),\r\n    cleanSelectedMessages: () => ({type: 'dialogs/CLEAN_SELECTED_MESSAGES'} as const),\r\n    cleanSelectedDeletedMessages: () => ({type: 'dialogs/CLEAN_DELETED_SELECTED_MESSAGES'} as const),\r\n    addToSelectedMessages: (message: MessageType) => ({type: 'dialogs/ADD_TO_SELECTED_MASSAGES', message} as const),\r\n    addToSelectedDeletedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/ADD_TO_DELETED_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    removeFromSelectedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/REMOVE_FROM_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    removeFromSelectedDeletedMessages: (message: MessageType) => ({\r\n        type: 'dialogs/REMOVE_FROM_DELETED_SELECTED_MASSAGES',\r\n        message\r\n    } as const),\r\n    setMessages: (messages: Array<MessageType> | null) => ({type: 'dialogs/SET_MESSAGES', messages} as const),\r\n    setDialogs: (dialogs: Array<DialogType>) => ({type: 'dialogs/SET_DIALOGS', dialogs} as const),\r\n};\r\n\r\n// action creator for sagas\r\nexport const dialogsSagaAC = {\r\n    getDialogs: () => ({type: GET_DIALOGS} as const),\r\n    sendMessage: (userId: number, message: string) => ({type: SEND_MASSAGE, userId, message} as const),\r\n    getMessages: (userId: number) => ({type: GET_MASSAGES, userId} as const),\r\n    deleteMessages: (messages: Array<MessageType>, dialog: DialogType) => ({\r\n        type: DELETE_MESSAGES,\r\n        messages,\r\n        dialog\r\n    } as const),\r\n    restoreMessages: (messages: Array<MessageType>) => ({\r\n        type: RESTORE_MESSAGES,\r\n        messages\r\n    } as const)\r\n};\r\n\r\n// типизация экшн-криейторов для саг (для воркеров)\r\nexport type GetDialogsACType = {\r\n    type: typeof GET_DIALOGS\r\n}\r\nexport type SendMessageACType = {\r\n    type: typeof SEND_MASSAGE\r\n    userId: number\r\n    message: string\r\n}\r\nexport type GetMessagesACType = {\r\n    type: typeof GET_MASSAGES\r\n    userId: number\r\n}\r\nexport type DeleteMessagesACType = {\r\n    type: typeof DELETE_MESSAGES,\r\n    messages: Array<MessageType>\r\n    dialog: DialogType\r\n}\r\nexport type RestoreMessagesACType = {\r\n    type: typeof RESTORE_MESSAGES\r\n    messages: Array<MessageType>\r\n}\r\n\r\n//======================= THUNK-CREATORS (ЗАМЕНЕНЫ НА САГИ) =======================\r\n// получить массив пользователей с кем ведется диалог\r\n// export const getDialogs = (): ThunkType => async (dispatch) => {\r\n//     try {\r\n//         dispatch(dialogsAC.toggleDialogsIsLoading(true));\r\n//         let data = await dialogsAPI.getDialogs();\r\n//         dispatch(dialogsAC.setDialogs(data));\r\n//     } catch (e) {\r\n//         dispatch(appAC.setLanError(true));\r\n//     } finally {\r\n//         dispatch(dialogsAC.toggleDialogsIsLoading(false));\r\n//     }\r\n// };\r\n\r\n// послать сообщение пользователю\r\n// export const sendMessage = (userId: number, message: string): ThunkType => async (dispatch) => {\r\n//     try {\r\n//         dispatch(dialogsAC.setMessageIsSending(true)); // сообщение отправляется\r\n//         const dataSend = await dialogsAPI.sendMessage(userId, message);// post-запрос на сервер\r\n//         if (dataSend.resultCode === ResultCodesEnum.Success) { // если запрос удачный\r\n//             dispatch(dialogsAC.setRecipientName(dataSend.data.message.recipientName)); // установить имя адресата сообщения\r\n//             const data = await dialogsAPI.getMessages(userId);// обновить список сообщений\r\n//             if (data.error === null) {\r\n//                 dispatch(dialogsAC.setMessages(data.items));\r\n//             }\r\n//         }\r\n//     } catch (e) {\r\n//         dispatch(appAC.setLanError(true));\r\n//     } finally {\r\n//         dispatch(dialogsAC.setMessageIsSending(false));\r\n//     }\r\n// };\r\n\r\n// получить массив сообщений из диалога с определенный пользователем\r\n// export const getMessages = (userId: number): ThunkType => async (dispatch) => {\r\n//     try {\r\n//         dispatch(dialogsAC.setMessagesIsLoading(true));\r\n//         const data = await dialogsAPI.getMessages(userId);\r\n//         if (data.error === null) {\r\n//             dispatch(dialogsAC.setMessages(data.items));\r\n//         }\r\n//     } catch (e) {\r\n//         dispatch(appAC.setLanError(true));\r\n//     } finally {\r\n//         dispatch(dialogsAC.setMessagesIsLoading(false));\r\n//     }\r\n// };\r\n\r\n// удаление сообщений\r\n// export const deleteMessages = (messages: Array<MessageType>, dialog: DialogType): ThunkType => async (dispatch) => {\r\n//     try {\r\n//         dispatch(dialogsAC.setMessagesIsDeleting(true));\r\n//\r\n//         const arrayOfRequests = messages\r\n//             .map(el => dialogsAPI.deleteMessage(el.id));\r\n//         const results = await Promise.all(arrayOfRequests);\r\n//\r\n//         let resultCodeFinally: ResultCodesEnum = 0;// определение успеха массива промисов\r\n//         for (let i = 0; i < results.length - 1; i++) {\r\n//             if (results[i].resultCode === ResultCodesEnum.Error) {\r\n//                 resultCodeFinally = ResultCodesEnum.Error;\r\n//                 break\r\n//             }\r\n//         }\r\n//\r\n//         if (resultCodeFinally === ResultCodesEnum.Success) {\r\n//             const data = await dialogsAPI.getMessages(dialog.id);// обновление массива сообщений\r\n//             if (data.error === null) {\r\n//                 dispatch(dialogsAC.setMessages(data.items));\r\n//                 for (let i = 0; i < messages.length; i++) {// добавление сообщений в массив удаленных\r\n//                     dispatch(dialogsAC.addToDeletedMessages(dialog, messages[i]))\r\n//                 }\r\n//                 dispatch(dialogsAC.cleanSelectedMessages()); // очистка массива ид выделенных сообщений\r\n//             }\r\n//         }\r\n//     } catch (e) {\r\n//         dispatch(appAC.setLanError(true));\r\n//     } finally {\r\n//         dispatch(dialogsAC.setMessagesIsDeleting(false));\r\n//     }\r\n// };\r\n\r\n// восстановить удаленное или помеченное как спам сообщение\r\n// export const restoreMessages = (messages: Array<MessageType>): ThunkType => async (dispatch) => {\r\n//     try {\r\n//         const arrayOfRequests = messages\r\n//             .map(el => dialogsAPI.restoreMessage(el.id));\r\n//         const results = await Promise.all(arrayOfRequests);\r\n//\r\n//         let resultCodeFinally: ResultCodesEnum = 0;\r\n//         for (let i = 0; i < results.length - 1; i++) {\r\n//             if (results[i].resultCode === ResultCodesEnum.Error) {\r\n//                 resultCodeFinally = ResultCodesEnum.Error;\r\n//                 break\r\n//             }\r\n//         }\r\n//         if (resultCodeFinally === ResultCodesEnum.Success) {\r\n//             // очистка массива выделенных удаленных сообщений\r\n//             dispatch(dialogsAC.cleanSelectedDeletedMessages())\r\n//             // удалить сообщения из массива удаленнных диалогов\r\n//             dispatch(dialogsAC.removeFromDeletedMessages(messages));\r\n//         }\r\n//     } catch (e) {\r\n//         dispatch(appAC.setLanError(true));\r\n//     } finally {\r\n//     }\r\n// };\r\n\r\n// НЕИСПОЛЬЗУЕМЫЕ\r\n\r\n// отметить сообщения как спам (при этом удаляется?)\r\n// export const signMessageAsSpam = (messages: Array<MessageType>, dialog: DialogType): ThunkType => async (dispatch) => {\r\n//     try {\r\n//         dispatch(dialogsAC.setMessagesIsDeleting(true));\r\n//\r\n//         const arrayOfRequests = messages\r\n//             .map(el => dialogsAPI.signMessageAsSpam(el.id));\r\n//         const results = await Promise.all(arrayOfRequests);\r\n//\r\n//         let resultCodeFinally: ResultCodesEnum = 0;// определение успеха массива промисов\r\n//         for (let i = 0; i < results.length - 1; i++) {\r\n//             if (results[i].resultCode === ResultCodesEnum.Error) {\r\n//                 resultCodeFinally = ResultCodesEnum.Error;\r\n//                 break\r\n//             }\r\n//         }\r\n//\r\n//         if (resultCodeFinally === ResultCodesEnum.Success) {\r\n//             const data = await dialogsAPI.getMessages(dialog.id);// обновление массива сообщений (запрос)\r\n//             if (data.error === null) {\r\n//                 dispatch(dialogsAC.setMessages(data.items));// обновление массива сообщений (запись в стор)\r\n//                 for (let i = 0; i < messages.length; i++) {// добавление сообщений в массив удаленных\r\n//                     dispatch(dialogsAC.addToSpamMessages(dialog, messages[i]))\r\n//                 }\r\n//                 dispatch(dialogsAC.cleanSelectedMessages()); // очистка массива ид выделенных сообщений\r\n//             }\r\n//         }\r\n//\r\n//     } catch (e) {\r\n//         dispatch(appAC.setLanError(true));\r\n//     } finally {\r\n//         dispatch(dialogsAC.setMessagesIsDeleting(false));\r\n//     }\r\n// };\r\n\r\n// ???\r\n// export const startDialog = (userId: number): ThunkType => async (dispatch) => {\r\n//     try {\r\n//         //dispatch(appAC.toggleLoading(true));\r\n//         let data = await dialogsAPI.startDialog(userId);\r\n//         //console.log(data)\r\n//         //dispatch(usersAC.setUsers(data.items));\r\n//         //dispatch(usersAC.setTotalUsersCount(data.totalCount));\r\n//     } catch (e) {\r\n//         //dispatch(appAC.setLanError(true));\r\n//     } finally {\r\n//         //dispatch(appAC.toggleLoading(false));\r\n//     }\r\n// };\r\n\r\n// определить, просмотрено ли сообщение\r\n//\r\n//export const getIsMessageViewed = (messageId: string): ThunkType => async (dispatch) => {\r\n//     try {\r\n//         //dispatch(profileAC.toggleStatusLoading(true));\r\n//         const data = await dialogsAPI.getIsMessageViewed(messageId);\r\n//         //console.log(data)\r\n//         // if (data.resultCode === 0) {\r\n//         //     dispatch(profileAC.setStatus(status));\r\n//         // }\r\n//     } catch (e) {\r\n//         //dispatch(appAC.setLanError(true));\r\n//     } finally {\r\n//         //dispatch(profileAC.toggleStatusLoading(false));\r\n//     }\r\n// };\r\n\r\nexport default dialogsReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {instance, ResultCodesEnum} from \"./api\";\r\nimport {PhotosType} from \"../types/types\";\r\n\r\nexport const dialogsAPI = {\r\n    // получить массив пользователей с кем ведется диалог\r\n    async getDialogs() {\r\n        let response = await instance.get<Array<DialogType>>(`dialogs`);\r\n        return response.data;\r\n    },\r\n\r\n    // ???\r\n    async startDialog(userId: number) {\r\n        let response = await instance.put<SendMessageType>(`dialogs/${userId}`);\r\n        return response.data;\r\n    },\r\n\r\n    // получить массив сообщений из диалога с определенный пользователем\r\n    async getMessages(userId: number) {\r\n        let response = await instance.get<GetMessagesType>(`dialogs/${userId}/messages`)\r\n        return response.data;\r\n    },\r\n\r\n    // послать сообщение пользователю\r\n    async sendMessage(userId: number, message: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/${userId}/messages`,{body: message})\r\n        return response.data;\r\n    },\r\n\r\n    // проверить просмотрено ли мое сообщение\r\n    async getIsMessageViewed(messageId: string) {\r\n        let response = await instance.get<boolean>(`dialogs/messages/${messageId}/viewed`)\r\n        return response.data;\r\n    },\r\n\r\n    // отметить сообщение как спам\r\n    async signMessageAsSpam(messageId: string) {\r\n        let response = await instance.post<SendMessageType>(`dialogs/messages/${messageId}/spam`)\r\n        console.log(response)\r\n        return response.data;\r\n    },\r\n\r\n    // удалить сообщение (только для меня, не для собеседника)\r\n    async deleteMessage(messageId: string) {\r\n        let response = await instance.delete<SendMessageType>(`dialogs/messages/${messageId}`)\r\n        return response.data;\r\n    },\r\n\r\n    // восстановить удаленное или помеченное как спам сообщение\r\n    async restoreMessage(messageId: string) {\r\n        let response = await instance.put<SendMessageType>(`dialogs/messages/${messageId}/restore`)\r\n        return response.data;\r\n    },\r\n\r\n};\r\n\r\n//================================= TYPE =======================================\r\nexport type SendMessageType = {\r\n    data: {message: MessageType}\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: ResultCodesEnum\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    body: string\r\n    translatedBody: any\r\n    addedAt: string\r\n    senderId: number\r\n    senderName: string\r\n    recipientId: number\r\n    recipientName: string\r\n    viewed: boolean\r\n    //deletedBySender: boolean // только для post\r\n    //deletedByRecipient: boolean  //только для post\r\n    //isSpam: boolean  //только для post\r\n    //distributionId: any  //только для post\r\n}\r\n\r\nexport type GetMessagesType = {\r\n    items: Array<MessageType>\r\n    totalCount: number\r\n    error: any\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    userName: string\r\n    hasNewMessages: boolean\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: PhotosType\r\n}\r\n\r\n","import {takeEvery, call, put, all} from \"redux-saga/effects\";\r\nimport {SagaIterator} from \"redux-saga\";\r\nimport {\r\n    DELETE_MESSAGES, DeleteMessagesACType,\r\n    dialogsAC,\r\n    GET_DIALOGS, GET_MASSAGES, GetMessagesACType, RESTORE_MESSAGES, RestoreMessagesACType,\r\n    SEND_MASSAGE,\r\n    SendMessageACType,\r\n} from \"../redux/reducers/dialogs-reducer\";\r\nimport {dialogsAPI, DialogType, GetMessagesType, MessageType, SendMessageType} from \"../DAL/dialogs-api\";\r\nimport {appAC} from \"../redux/reducers/app-reducer\";\r\nimport {ResultCodesEnum} from \"../DAL/api\";\r\n\r\nexport function* watcherGetDialogs(): SagaIterator {\r\n    yield takeEvery(GET_DIALOGS, workerGetDialogs);\r\n}\r\n\r\nexport function* watcherSendMessage(): SagaIterator {\r\n    yield takeEvery(SEND_MASSAGE, workerSendMessage);\r\n}\r\n\r\nexport function* watcherGetMessage(): SagaIterator {\r\n    yield takeEvery(GET_MASSAGES, workerGetMessages);\r\n}\r\n\r\nexport function* watcherDeleteMessage(): SagaIterator {\r\n    yield takeEvery(DELETE_MESSAGES, workerDeleteMessages);\r\n}\r\n\r\nexport function* watcherRestoreMessage(): SagaIterator {\r\n    yield takeEvery(RESTORE_MESSAGES, workerRestoreMessages);\r\n}\r\n\r\nexport function* workerGetDialogs(): SagaIterator {\r\n    try {\r\n        yield put(dialogsAC.toggleDialogsIsLoading(true));\r\n        const data: Array<DialogType> = yield call(dialogsAPI.getDialogs);\r\n        yield put(dialogsAC.setDialogs(data));\r\n    } catch (e) {\r\n        yield put(appAC.setLanError(true))\r\n    } finally {\r\n        yield put(dialogsAC.toggleDialogsIsLoading(false));\r\n    }\r\n}\r\n\r\nexport function* workerSendMessage(action: SendMessageACType): SagaIterator {\r\n    try {\r\n        yield put(dialogsAC.setMessageIsSending(true));\r\n        const dataSend: SendMessageType = yield call(dialogsAPI.sendMessage, action.userId, action.message);\r\n        if (dataSend.resultCode === ResultCodesEnum.Success) { // если запрос удачный\r\n            yield put(dialogsAC.setRecipientName(dataSend.data.message.recipientName)); // установить имя адресата сообщения\r\n            const data: GetMessagesType = yield call(dialogsAPI.getMessages, action.userId);// обновить список сообщений\r\n            if (data.error === null) {\r\n                yield put(dialogsAC.setMessages(data.items));\r\n            }\r\n        }\r\n    } catch (e) {\r\n        yield put(appAC.setLanError(true))\r\n    } finally {\r\n        yield put(dialogsAC.setMessageIsSending(false));\r\n    }\r\n}\r\n\r\nexport function* workerGetMessages(action: GetMessagesACType): SagaIterator {\r\n    try {\r\n        yield put(dialogsAC.setMessagesIsLoading(true));\r\n        const data: GetMessagesType = yield call(dialogsAPI.getMessages, action.userId);\r\n        if (data.error === null) {\r\n            yield put(dialogsAC.setMessages(data.items));\r\n        }\r\n    } catch (e) {\r\n        yield put(appAC.setLanError(true))\r\n    } finally {\r\n        yield put(dialogsAC.setMessagesIsLoading(false));\r\n    }\r\n}\r\n\r\nexport function* workerDeleteMessages(action: DeleteMessagesACType): SagaIterator {\r\n    try {\r\n        yield put(dialogsAC.setMessagesIsDeleting(true));\r\n\r\n        const arrayOfRequests = action.messages.map(el => call(dialogsAPI.deleteMessage, el.id));\r\n        const results = yield all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;// определение успеха массива промисов\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n        if (resultCodeFinally === ResultCodesEnum.Success) {\r\n            const data: GetMessagesType = yield call(dialogsAPI.getMessages, action.dialog.id);// обновление массива сообщений\r\n            if (data.error === null) {\r\n                yield put(dialogsAC.setMessages(data.items));\r\n                for (let i = 0; i < action.messages.length; i++) {// добавление сообщений в массив удаленных\r\n                    yield put(dialogsAC.addToDeletedMessages(action.dialog, action.messages[i]))\r\n                }\r\n                yield put(dialogsAC.cleanSelectedMessages()); // очистка массива ид выделенных сообщений\r\n            }\r\n        }\r\n    } catch (e) {\r\n        yield put(appAC.setLanError(true))\r\n    } finally {\r\n        yield put(dialogsAC.setMessagesIsDeleting(false));\r\n    }\r\n}\r\n\r\nexport function* workerRestoreMessages(action: RestoreMessagesACType): SagaIterator {\r\n    try {\r\n        const arrayOfRequests = action.messages.map(el => call(dialogsAPI.restoreMessage, el.id));\r\n        const results: Array<SendMessageType> = yield all(arrayOfRequests);\r\n\r\n        let resultCodeFinally: ResultCodesEnum = 0;\r\n        for (let i = 0; i < results.length - 1; i++) {\r\n            if (results[i].resultCode === ResultCodesEnum.Error) {\r\n                resultCodeFinally = ResultCodesEnum.Error;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (resultCodeFinally === ResultCodesEnum.Success) {\r\n            yield put(dialogsAC.cleanSelectedDeletedMessages());// очистка массива выделенных удаленных сообщений\r\n            yield put(dialogsAC.removeFromDeletedMessages(action.messages));// удалить сообщения из массива удаленнных диалогов\r\n        }\r\n    } catch (e) {\r\n        yield put(appAC.setLanError(true))\r\n    }\r\n}\r\n\r\nexport function* rootSaga(): Generator {\r\n    yield all([\r\n        watcherGetDialogs(),\r\n        watcherSendMessage(),\r\n        watcherGetMessage(),\r\n        watcherDeleteMessage(),\r\n        watcherRestoreMessage()\r\n    ])\r\n}","import {Action, applyMiddleware, combineReducers, createStore, Middleware} from \"redux\";\r\nimport profileReducer from \"./reducers/profile-reducer\";\r\nimport dialogsReducer from \"./reducers/dialogs-reducer\";\r\nimport sidebarReducer from \"./reducers/sidebar-reducer\";\r\nimport usersReducer from \"./reducers/users-reduser\";\r\nimport authReducer from \"./reducers/auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./reducers/app-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport settingsReducer from \"./reducers/settings-reducer\";\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport {rootSaga} from \"../Saga/saga\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    settings: settingsReducer,\r\n    form: formReducer\r\n});\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware: Array<Middleware> = [thunkMiddleware, sagaMiddleware];\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n\r\n//======================== TYPE ==========================\r\nexport type StateType = ReturnType<typeof rootReducer>\r\nexport type GetActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StateType, unknown, A>","import React, {ReactElement} from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, reset} from \"redux-form\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderNakedTextAreaField from \"../common/RenderNakedTextareaField\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {usersAC} from \"../../redux/reducers/users-reduser\";\r\nimport {getLang} from \"../../redux/selectors/app-selectors\";\r\nimport {Lang} from \"../../const/lang\";\r\n\r\n//==================== CUSTOM HOOK =========================\r\nconst useForm = () => {\r\n    const classes = useStyles();\r\n    const classesField = useStylesField();\r\n    const lang = useSelector(getLang);\r\n    const placeholder = lang === 'rus' ? Lang['Search...'].rus : Lang['Search...'].eng;\r\n    return {classes, classesField, placeholder}\r\n};\r\n\r\n//===================== FORM ==================================\r\nconst Form: React.FC<FormPropsType> = ({handleSubmit}) => {\r\n    const {classes, classesField, placeholder} = useForm();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={classes.fieldWrapper}>\r\n                <SearchIcon className={classes.icon}/>\r\n                <Field name='name'\r\n                       component={RenderNakedTextAreaField}\r\n                       validate={[shouldNotBeEmpty]}\r\n                       multiline={false}\r\n                       className={classes.field}\r\n                       classes={classesField}\r\n                       placeholder={placeholder}\r\n                       size='small'\r\n                />\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\n//============================= REDUX-FORM ========================================\r\nconst afterSubmit = (result: any, dispatch: any) => {\r\n    dispatch(reset('header-search'));\r\n};\r\n\r\nconst ReduxForm = reduxForm<FormValuesType, OwnPropsType>({\r\n    form: 'header-search',\r\n    onSubmitSuccess: afterSubmit,\r\n})(Form);\r\n\r\n//==================== CUSTOM HOOK =========================\r\nconst useHeaderSearch = () => {\r\n    const dispatch = useDispatch();\r\n    let history = useHistory();\r\n    const onSubmit = (formValue: FormValuesType) => {\r\n        dispatch(usersAC.setValueFromHeaderSearch(formValue.name))\r\n        history.push('/users');\r\n    };\r\n    return {onSubmit}\r\n};\r\n\r\n//============================ COMPONENT ============================================\r\nconst HeaderSearch: React.FC<ComponentPropsType> = (): ReactElement => {\r\n    const {onSubmit} = useHeaderSearch();\r\n    return (\r\n        <div>\r\n            <ReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HeaderSearch;\r\n\r\n//=========================== TYPE =======================\r\ntype OwnPropsType = {}\r\nexport type FormValuesType = {\r\n    name: string,\r\n}\r\ntype FormPropsType = InjectedFormProps<FormValuesType, OwnPropsType> & OwnPropsType\r\n\r\ntype ComponentPropsType = {}\r\n//========================== STYLES ======================\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        color: 'white',\r\n    },\r\n    fieldWrapper: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: indigo[400],\r\n        height: 40,\r\n        borderRadius: 20,\r\n        paddingRight: 20,\r\n        '&:hover': {\r\n            backgroundColor: indigo[300],\r\n        },\r\n        marginRight: 15\r\n    },\r\n    icon: {\r\n        padding: '0 10px',\r\n        color: 'white'\r\n    }\r\n});\r\n\r\nconst useStylesField = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        input: {\r\n            transition: theme.transitions.create('width'),\r\n            backgroundColor: 'none',\r\n            width: 200,\r\n            '&:focus': {\r\n                width: 300\r\n            }\r\n        }\r\n    })\r\n)","import Button from \"@material-ui/core/Button\";\r\nimport React from \"react\";\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {getLang} from \"../../redux/selectors/app-selectors\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { appAC } from \"../../redux/reducers/app-reducer\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useHeaderLang = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector(getLang);\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleCloseRus = () => {\r\n        dispatch(appAC.setLang('rus'));\r\n        setAnchorEl(null);\r\n    };\r\n    const handleCloseEng = () => {\r\n        dispatch(appAC.setLang('eng'));\r\n        setAnchorEl(null);\r\n    };\r\n    const title = translate(lang, 'Change language');\r\n    const englishLabel = translate(lang, 'English')\r\n    return {classes, lang, anchorEl, title, englishLabel,\r\n        handleClick, handleClose, handleCloseRus,\r\n        handleCloseEng}\r\n}\r\n\r\n//======================= COMPONENT ===============================\r\nconst HeaderLang: React.FC<PropsType> = () => {\r\n    const {classes, lang, anchorEl, title, englishLabel,\r\n        handleClick, handleClose, handleCloseRus,\r\n        handleCloseEng} = useHeaderLang();\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={title} placement=\"bottom-start\">\r\n                <Button\r\n                    className={classes.button}\r\n                    startIcon={<LanguageIcon/>}\r\n                    endIcon={<ExpandMoreIcon/>}\r\n                    aria-controls=\"simple-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleClick}\r\n                >\r\n                    {englishLabel}\r\n                </Button>\r\n            </Tooltip>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={handleCloseEng}\r\n                          selected={lang === 'eng'}\r\n                >\r\n                    English\r\n                </MenuItem>\r\n                <MenuItem onClick={handleCloseRus}\r\n                          selected={lang === 'rus'}\r\n                >\r\n                    Русский\r\n                </MenuItem>\r\n            </Menu>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default HeaderLang;\r\n\r\n\r\n//========================== TYPE ========================\r\ntype PropsType = {}\r\n\r\n//================================ STYLES =======================================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        color: 'white',\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n})","import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getId, getIsAuth, getLogin} from \"../../redux/selectors/auth-selectors\";\r\nimport {getProfileSelector} from \"../../redux/selectors/profile-selectors\";\r\nimport {logout} from \"../../redux/reducers/auth-reducer\";\r\nimport {getProfile} from \"../../redux/reducers/profile-reducer\";\r\nimport HeaderSearch from \"./HeaderSearch\";\r\nimport {getTheme} from \"../../redux/selectors/settings-selectors\";\r\nimport HeaderLang from \"./HeaderLang\";\r\nimport {getLang} from \"../../redux/selectors/app-selectors\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useHeader = () => {\r\n    const classes = useStyles();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const login = useSelector(getLogin);\r\n    const profile = useSelector(getProfileSelector);\r\n    const id = useSelector(getId);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(getProfile(id))\r\n        }\r\n    }, [id, dispatch]);\r\n    //===================================================================================\r\n    const [open, setOpen] = useState(false);\r\n    const icon = open ? <ExpandLessIcon className={classes.icon}/> : <ExpandMoreIcon className={classes.icon}/>\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    function handleListKeyDown(event: React.KeyboardEvent) {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //=========================================================================\r\n    const onSettingsClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event)\r\n    };\r\n    const onLogoutClick = (event: React.MouseEvent<EventTarget>) => {\r\n        handleClose(event);\r\n        dispatch(logout());\r\n    }\r\n    //==================================================================================\r\n    const theme = useSelector(getTheme);\r\n    const useStylesSettings = makeStyles({\r\n        wrapper: {\r\n            backgroundColor: theme.menuBackgroundColor,\r\n            position: 'fixed',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            zIndex: 10\r\n        }\r\n    });\r\n    const classesSettings = useStylesSettings();\r\n    const lang = useSelector(getLang);\r\n    const logo = translate(lang, 'Social Network');\r\n    const settingsLabel = translate(lang, 'Settings');\r\n    const logoutLabel = translate(lang, 'Logout');\r\n    const loginLabel = translate(lang, 'Login')\r\n\r\n    return {\r\n        classes, isAuth, login, profile, open, icon, anchorRef,\r\n        handleToggle, handleClose, handleListKeyDown, onSettingsClick,\r\n        onLogoutClick, classesSettings, logo, settingsLabel,\r\n        logoutLabel, loginLabel\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst Header: React.FC = () => {\r\n    const {\r\n        classes, isAuth, login, profile, open, icon, anchorRef,\r\n        handleToggle, handleClose, handleListKeyDown, onSettingsClick,\r\n        onLogoutClick, classesSettings, logo, settingsLabel,\r\n        logoutLabel, loginLabel\r\n    } = useHeader();\r\n\r\n    return (\r\n        <div className={classesSettings.wrapper}>\r\n            <Toolbar className={classes.toolBar}>\r\n                <Typography variant=\"h6\" noWrap className={classes.logo}>\r\n                    {logo}\r\n                </Typography>\r\n\r\n                <HeaderSearch/>\r\n\r\n                <HeaderLang/>\r\n\r\n                {\r\n                    isAuth\r\n                        ? <>\r\n                            <Button\r\n                                ref={anchorRef}\r\n                                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleToggle}\r\n                                classes={{\r\n                                    root: classes.button,\r\n                                    label: classes.label\r\n                                }}\r\n                                color=\"inherit\">\r\n                                <Typography variant=\"subtitle1\" noWrap className={classes.login}>\r\n                                    {login}\r\n                                </Typography>\r\n                                {profile && profile.photos.small\r\n                                    ? <Avatar src={profile.photos.small} className={classes.avatar}/>\r\n                                    : <Avatar className={classes.avatar}/>}\r\n                                {icon}\r\n                            </Button>\r\n                            <Popper open={open}\r\n                                    className={classes.popper}\r\n                                    anchorEl={anchorRef.current}\r\n                                    role={undefined}\r\n                                    transition\r\n                                    disablePortal>\r\n                                {({TransitionProps, placement}) => (\r\n                                    <Grow\r\n                                        {...TransitionProps}\r\n                                        style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                    >\r\n                                        <Paper>\r\n                                            <ClickAwayListener onClickAway={handleClose}>\r\n\r\n                                                <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                          onKeyDown={handleListKeyDown}>\r\n                                                    <MenuItem onClick={onLogoutClick}>\r\n                                                        <ListItemIcon>\r\n                                                            <ExitToAppIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary={logoutLabel}/>\r\n                                                    </MenuItem>\r\n                                                    <MenuItem onClick={onSettingsClick}\r\n                                                              component={RouterLink}\r\n                                                              to='/settings'\r\n                                                    >\r\n                                                        <ListItemIcon>\r\n                                                            <SettingsIcon/>\r\n                                                        </ListItemIcon>\r\n                                                        <ListItemText primary={settingsLabel}/>\r\n                                                    </MenuItem>\r\n                                                </MenuList>\r\n                                            </ClickAwayListener>\r\n                                        </Paper>\r\n                                    </Grow>\r\n                                )}\r\n                            </Popper>\r\n                        </>\r\n                        : <Button color=\"inherit\"\r\n                                  className={classes.login}\r\n                                  component={RouterLink}\r\n                                  to='/login'>\r\n                            {loginLabel}\r\n                        </Button>\r\n                }\r\n            </Toolbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n\r\n//================================ STYLES =======================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {},\r\n    toolBar: {\r\n        maxWidth: 1000,\r\n        width: '100%',\r\n        margin: '0 auto',\r\n        boxSizing: 'border-box',\r\n        padding: '0 0 0 10px',\r\n    },\r\n    logo: {\r\n        flexGrow: 1,\r\n        color: 'white'\r\n    },\r\n    login: {\r\n        color: 'white'\r\n    },\r\n    button: {\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(0,0,0,0.3)',\r\n            borderRadius: 0,\r\n            minHeight: 64\r\n        },\r\n        textTransform: 'none',\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    label: {\r\n        minHeight: 64\r\n    },\r\n    avatar: {\r\n        width: 50,\r\n        height: 50,\r\n        margin: '0 10px'\r\n    },\r\n    icon: {\r\n        color: 'white'\r\n    },\r\n    popper: {\r\n        boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)'\r\n    }\r\n});\r\n\r\n\r\n","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {profileAC} from \"../../redux/reducers/profile-reducer\";\r\nimport {usersAC} from \"../../redux/reducers/users-reduser\";\r\nimport {sidebarAC} from \"../../redux/reducers/sidebar-reducer\";\r\nimport {getCurrentSidebarItem} from \"../../redux/selectors/sidebar-selectors\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useSidebarItem = (ownIndex: number) => {\r\n    const classes = useStyles();\r\n    const currentSidebarItem = useSelector(getCurrentSidebarItem)\r\n    const dispatch = useDispatch();\r\n    const onClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(ownIndex));// установить номер текущего элемнта бокового меню\r\n        dispatch(profileAC.setEditMode(false)); // выключить режим редактирования профиля\r\n        dispatch(usersAC.setShowUsersFrom('all')); // показывать всех пользователей (обнуления поиска)\r\n        dispatch(usersAC.setCurrentPage(1)); // установить текущую страницу пользователей - первую\r\n        dispatch(usersAC.setSearchFriendsParams({term: ''})); // обнуления параметров поиска друзей\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(0)); // переключение на первый элмемент бокового меню\r\n        dispatch(usersAC.setValueFromHeaderSearch('')); // обнуление строки поиска пользователей из заголовка\r\n        dispatch(usersAC.setSearchUsersParams({term: '', friend: 'all'})); // сброс параметра поиска пользователей\r\n    };\r\n    return {\r\n        classes, currentSidebarItem, onClick\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst SidebarItem: React.FC<PropsTypes> = (props) => {\r\n    const {to, primary, icon, ownIndex} = props;\r\n    const {\r\n        classes, currentSidebarItem, onClick\r\n    } = useSidebarItem(ownIndex);\r\n\r\n    return (\r\n        <li>\r\n            <ListItem\r\n                onClick={onClick}\r\n                className={classes.listItem}\r\n                selected={ownIndex === currentSidebarItem}\r\n                button\r\n                component={RouterLink}\r\n                to={to}>\r\n                {\r\n                    icon\r\n                        ? <ListItemIcon className={clsx(ownIndex === currentSidebarItem && classes.iconSelected, classes.icon)}>\r\n                            {icon}\r\n                        </ListItemIcon>\r\n                        : null\r\n                }\r\n                <ListItemText primary={primary} className={clsx(ownIndex === currentSidebarItem && classes.text)}/>\r\n            </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;\r\n\r\n//============================== TYPES ==================================\r\ntype PropsTypes = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\n//============================== STYLES ===================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    icon: {\r\n       minWidth: 'inherit',\r\n        marginRight: 10\r\n    },\r\n    iconSelected: {\r\n        color: indigo[500]\r\n    },\r\n    text: {\r\n        color: indigo[600],\r\n        fontWeight: 900\r\n    },\r\n    listItem: {\r\n        padding: '5px 5px 5px 10px'\r\n    }\r\n}));","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport SupervisedUserCircleIcon from '@material-ui/icons/SupervisedUserCircle';\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport {getLang} from \"../../redux/selectors/app-selectors\";\r\nimport { useSelector } from 'react-redux';\r\nimport {Lang} from \"../../const/lang\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useSidebar = () => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const profileLabel = lang === 'rus' ? Lang['My profile'].rus : Lang['My profile'].eng;\r\n    const profileDialogs = lang === 'rus' ? Lang['Dialogs'].rus : Lang['Dialogs'].eng;\r\n    const profileUsers = lang === 'rus' ? Lang['Users'].rus : Lang['Users'].eng;\r\n    const profileFriends = lang === 'rus' ? Lang['Friends'].rus : Lang['Friends'].eng;\r\n    const profileSettings = lang === 'rus' ? Lang['Settings'].rus : Lang['Settings'].eng;\r\n    return {\r\n        classes, profileLabel, profileDialogs,\r\n        profileUsers, profileFriends, profileSettings\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst Sidebar: React.FC = () => {\r\n    const {\r\n        classes, profileLabel, profileDialogs,\r\n        profileUsers, profileFriends, profileSettings\r\n    } = useSidebar();\r\n\r\n    return (\r\n        <List className={classes.list}>\r\n            <SidebarItem ownIndex={1} to={\"/profile\"} primary={profileLabel} icon={<HomeIcon/>}/>\r\n            <SidebarItem ownIndex={2} to={\"/dialogs\"} primary={profileDialogs} icon={<ChatIcon/>}/>\r\n            <SidebarItem ownIndex={3} to={\"/users\"} primary={profileUsers} icon={<SupervisedUserCircleIcon/>}/>\r\n            <SidebarItem ownIndex={4} to={\"/friends\"} primary={profileFriends} icon={<AccountCircleIcon/>}/>\r\n            <SidebarItem ownIndex={5} to={\"/settings\"} primary={profileSettings} icon={<SettingsIcon/>}/>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        flexBasis: 160,\r\n        flexShrink: 0,\r\n        padding: '10px 0'\r\n    }\r\n});","import React, {ChangeEvent, useState} from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useRenderPasswordField = () => {\r\n    const classes = useStyles();\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [password, setPassword] = useState('')\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.target.value);\r\n    };\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n    };\r\n    return {classes, showPassword, password, handleChange,\r\n        handleClickShowPassword, handleMouseDownPassword}\r\n};\r\n\r\n\r\n//======================= COMPONENT ===============================\r\nconst RenderPasswordField: React.FC<PropsType> = (props) => {\r\n    const {label, input, placeholder, meta, disabled} = props;\r\n    const {classes, showPassword, password, handleChange,\r\n        handleClickShowPassword, handleMouseDownPassword} = useRenderPasswordField();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LockIcon className={classes.iconLeft}/>\r\n\r\n            <FormControl className={classes.textField}\r\n                         variant=\"outlined\">\r\n\r\n                <InputLabel htmlFor=\"outlined-adornment-password\" classes={{\r\n                    outlined: classes.outlined\r\n                }}>{label}</InputLabel>\r\n\r\n                <OutlinedInput\r\n                    classes={{\r\n                        root: classes.outlinedInputRoot,\r\n                        input: classes.outlinedInputInput\r\n                    }}\r\n                    disabled={disabled}\r\n                    id=\"outlined-adornment-password\"\r\n                    placeholder={placeholder}\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    value={password}\r\n                    error={meta.touched && meta.invalid}\r\n                    onChange={handleChange}\r\n\r\n                    {...input}\r\n\r\n\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={handleClickShowPassword}\r\n                                onMouseDown={handleMouseDownPassword}\r\n                                edge=\"end\"\r\n                                className={classes.iconButton}\r\n                            >\r\n                                {showPassword ? <Visibility/> : <VisibilityOff/>}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    }\r\n                    labelWidth={73}\r\n                />\r\n\r\n                {meta.touched && meta.invalid && <Typography color='error' variant='caption' className={classes.error}>\r\n                    {meta.error}\r\n                </Typography>}\r\n\r\n            </FormControl>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RenderPasswordField;\r\n\r\n//=============================== TYPES =================================\r\ntype PropsType = {\r\n    label: string\r\n    input: any\r\n    placeholder: string\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    disabled: boolean\r\n}\r\n\r\n//=============================== STYLES ================================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        width: '100%'\r\n    },\r\n    iconLeft: {\r\n        position: 'absolute',\r\n        left: -5,\r\n        top: '50%',\r\n        transform: 'translate(-100%, -50%)'\r\n    },\r\n    textField: {\r\n        width: '100%'\r\n    },\r\n    error: {\r\n        paddingLeft: 14,\r\n        paddingTop: 2\r\n    },\r\n    outlinedInputRoot: {\r\n        //height: 40,\r\n        width: '100%'\r\n    },\r\n    outlinedInputInput: {\r\n        height: 40,\r\n        paddingTop: 0,\r\n        paddingBottom: 0\r\n    },\r\n    outlined: {\r\n        transform: 'translate(14px, 12px) scale(1)'\r\n    },\r\n    iconButton: {\r\n        padding: 8\r\n    }\r\n\r\n});","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required, shouldNotBeEmpty} from \"../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/reducers/auth-reducer\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {getCaptchaSelector, getIsAuth} from \"../../redux/selectors/auth-selectors\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport RenderTextField from \"../common/RenderTextField\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderPasswordField from \"../common/RenderPasswordField\";\r\nimport RenderCheckbox from \"../common/RenderCheckbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {getLang} from \"../../redux/selectors/app-selectors\";\r\nimport {Lang} from \"../../const/lang\";\r\nimport useCommonQueryParams from \"../../hooks/useCommonQueryParams\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useLoginForm = () => {\r\n    useCommonQueryParams();\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const emailLabel = lang === 'rus' ? Lang['email'].rus : Lang['email'].eng;\r\n    const passwordLabel = lang === 'rus' ? Lang['password'].rus : Lang['password'].eng;\r\n    const rememberMeLabel = lang === 'rus' ? Lang['Remember me'].rus : Lang['Remember me'].eng;\r\n    const captchaLabel = lang === 'rus' ? Lang['Captcha'].rus : Lang['Captcha'].eng;\r\n    const captchaText = lang === 'rus' ? Lang['Enter symbols from image'].rus : Lang['Enter symbols from image'].eng;\r\n    const buttonLabel = lang === 'rus' ? Lang['Login'].rus : Lang['Login'].eng;\r\n    return {classes, emailLabel, passwordLabel, rememberMeLabel,\r\n        captchaLabel, captchaText, buttonLabel}\r\n};\r\n\r\n//=================================== Form =========================================\r\nconst LoginForm: React.FC<LoginFormPropsType> = (props) => {\r\n    const {handleSubmit, submitting, pristine, error, captcha} = props;\r\n    const {classes, emailLabel, passwordLabel, rememberMeLabel,\r\n        captchaLabel, captchaText, buttonLabel} = useLoginForm();\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name='email'\r\n                   component={RenderTextField}\r\n                   icon={<MailOutlineIcon/>}\r\n                   className={classes.textField}\r\n                   validate={[required, shouldNotBeEmpty]}\r\n                   label={emailLabel}\r\n                   size='small'\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field\r\n                name='password'\r\n                //disabled={isLoading}\r\n                className={classes.textField}\r\n                component={RenderPasswordField}\r\n                placeholder={passwordLabel}\r\n                label={passwordLabel}\r\n                validate={[required, shouldNotBeEmpty]}\r\n            />\r\n        </div>\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Field name=\"rememberMe\" component={RenderCheckbox} label={rememberMeLabel}/>\r\n        </div>\r\n\r\n        {\r\n            captcha\r\n            && <>\r\n                <div className={classes.fieldWrapper}>\r\n                    <img src={captcha} alt=\"\"/>\r\n                </div>\r\n                <Typography className={classes.captcha}>\r\n                    {captchaText}\r\n                </Typography>\r\n                <div className={classes.fieldWrapper}>\r\n                    <Field\r\n                        name='captcha'\r\n                        className={classes.textField}\r\n                        component={RenderTextField}\r\n                        placeholder={captchaLabel}\r\n                        label={captchaLabel}\r\n                        validate={[required, shouldNotBeEmpty]}\r\n                        size='small'\r\n                    />\r\n                </div>\r\n            </>\r\n        }\r\n\r\n        {error && !pristine &&\r\n        <Typography color='error' variant='h6' className={classes.fieldWrapper}>\r\n            {error}\r\n        </Typography>}\r\n\r\n        <div className={classes.fieldWrapper}>\r\n            <Button type=\"submit\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    fullWidth={true}\r\n                    size='large'\r\n                    disabled={submitting || pristine}>\r\n                {buttonLabel}\r\n            </Button>\r\n        </div>\r\n\r\n    </form>\r\n};\r\n\r\n/////////////////////-ReduxLoginForm-////////////////////////////////////////\r\nconst ReduxLoginForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useLogin = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector(getIsAuth);\r\n    const captcha = useSelector(getCaptchaSelector);\r\n    const lang = useSelector(getLang);\r\n\r\n    const onSubmit = (values: LoginFormValuesType) => {\r\n        dispatch(login(values.email, values.password, values.rememberMe, values.captcha));\r\n    };\r\n    const title = lang === 'rus' ? Lang['Enter in your profile'].rus : Lang['Enter in your profile'].eng;\r\n    let history = useHistory();\r\n    if (isAuth) {\r\n        history.push('/profile');\r\n    }\r\n    return {classes, captcha, onSubmit, title}\r\n};\r\n\r\n//========================= COMPONENT =============================================================\r\nconst Login: React.FC = () => {\r\n    const {classes, captcha, onSubmit, title} = useLogin();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card className={classes.card} elevation={6}>\r\n                <Typography\r\n                    className={classes.title}\r\n                    align='center'\r\n                    color='primary'\r\n                    variant='h5'\r\n                >\r\n                    {title}\r\n                </Typography>\r\n\r\n                <ReduxLoginForm onSubmit={onSubmit}\r\n                                captcha={captcha}/>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Login;\r\n\r\n//========================== TYPES ===============================\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\ntype LoginFormPropsType = InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps;\r\n\r\n//========================== STYLES ==============================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        width: 500,\r\n        padding: '15px 30px 15px 10px',\r\n        borderRadius: 10\r\n    },\r\n    error: {\r\n        width: 300,\r\n        marginBottom: 10,\r\n    },\r\n    textField: {\r\n\r\n        width: '100%',\r\n    },\r\n    fieldWrapper: {\r\n        marginLeft: 35,\r\n        marginBottom: 10\r\n    },\r\n    title: {\r\n        marginBottom: 20\r\n    },\r\n    captcha: {\r\n        marginLeft: 35,\r\n        marginBottom: 10\r\n    }\r\n});\r\n\r\n\r\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst usePaginator = (props: UsePaginatorType) => {\r\n    const {\r\n        totalItemsCount, pageSize, onPageChanged,\r\n        portionSize, currentPage, portionNumber,\r\n        setPortionNumber\r\n    } = props;\r\n    const classes = useStyles();\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);// число страниц\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i < pagesCount + 1; i++) {\r\n        pages.push(i);\r\n    }\r\n    const portionCount = Math.ceil(pagesCount / portionSize); // число порций (блоков) страниц\r\n    //const [portionNumber, setPortionNumber] = useState(1);// текущий номер порции (начинается с 1)\r\n    const startPortionNumber = (portionNumber - 1) * portionSize + 1; // номер первого элемента в порции\r\n    const endPortionNumber = portionNumber * portionSize; // номер последнего элемента в порции\r\n    const setPrevPortion = () => {\r\n        setPortionNumber(portionNumber - 1);\r\n        onPageChanged((portionNumber - 1) * portionSize);\r\n    };\r\n    const setNextPortion = () => {\r\n        setPortionNumber(portionNumber + 1);\r\n        onPageChanged((portionNumber) * portionSize + 1);\r\n    };\r\n    const setFirstPortion = () => {\r\n        setPortionNumber(1);\r\n        onPageChanged(1);\r\n    };\r\n    const setLastPortion = () => {\r\n        setPortionNumber(portionCount);\r\n        //onPageChanged((portionCount - 1) * portionSize + 1);\r\n        onPageChanged(pagesCount);\r\n    };\r\n    const elements = pages\r\n        .filter(p => p >= startPortionNumber && p <= endPortionNumber)\r\n        .map(p => (\r\n                <Button\r\n                    className={classes.buttonRoot}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p)\r\n                    }}\r\n                    size='small'\r\n                    color='primary'\r\n                    disableElevation\r\n                    variant={p === currentPage ? 'contained' : \"outlined\"}\r\n                >\r\n                    {p}\r\n                </Button>\r\n            )\r\n        );\r\n    const prevPortionLabelStart = (portionNumber - 2) * pageSize + 1;\r\n    const prevPortionLabelEnd = (portionNumber - 1) * pageSize;\r\n    const prevPortionLabel = `${prevPortionLabelStart}...${prevPortionLabelEnd}`;\r\n    const nextPortionLabelStart = portionNumber * pageSize + 1;\r\n    const nextPortionLabelEnd = (portionNumber < portionCount - 1) ? (portionNumber + 1) * pageSize : pagesCount;\r\n    const nextPortionLabel = `${nextPortionLabelStart}...${nextPortionLabelEnd}`;\r\n\r\n    return {\r\n        classes, portionNumber, portionCount, setPrevPortion,\r\n        setNextPortion, setFirstPortion, setLastPortion, elements,\r\n        prevPortionLabel, nextPortionLabel\r\n    }\r\n}\r\n\r\n//======================= COMPONENT ===============================\r\nconst Paginator: React.FC<PropsType> = (props) => {\r\n    const {\r\n        totalItemsCount, pageSize, currentPage,\r\n        onPageChanged, portionSize = 10, portionNumber,\r\n        setPortionNumber\r\n    } = props;\r\n    const {\r\n        classes, portionCount, setPrevPortion,\r\n        setNextPortion, setFirstPortion, setLastPortion, elements,\r\n        prevPortionLabel, nextPortionLabel\r\n    } = usePaginator({totalItemsCount, pageSize, onPageChanged,\r\n        portionSize, currentPage, portionNumber, setPortionNumber});\r\n\r\n    return (\r\n        <div>\r\n\r\n            {portionNumber > 1 &&\r\n            <IconButton onClick={setFirstPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <FirstPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n            {portionNumber > 1 && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setPrevPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {prevPortionLabel}\r\n            </Button>}\r\n\r\n            {elements}\r\n\r\n            {portionNumber < portionCount && <Button\r\n                className={classes.buttonRoot}\r\n                onClick={setNextPortion}\r\n                size='small'\r\n                color='primary'\r\n                disableElevation\r\n                variant=\"outlined\">\r\n                {nextPortionLabel}\r\n            </Button>}\r\n\r\n            {portionNumber < portionCount &&\r\n            <IconButton onClick={setLastPortion}\r\n                        className={classes.iconButtonRoot}\r\n                        size='small'>\r\n                <LastPageIcon className={classes.icon}/>\r\n            </IconButton>}\r\n\r\n        </div>)\r\n};\r\n\r\nexport default Paginator;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n    portionNumber: number\r\n    setPortionNumber: (portionNumber: number) => void\r\n}\r\ntype UsePaginatorType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize: number\r\n    portionNumber: number\r\n    setPortionNumber: (portionNumber: number) => void\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    buttonRoot: {\r\n        marginRight: 5,\r\n        paddingLeft: 3,\r\n        paddingRight: 3,\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        minWidth: 24\r\n    },\r\n    iconButtonRoot: {\r\n        borderRadius: 4,\r\n        border: '1px solid rgba(63, 81, 181, 0.5)',\r\n        marginRight: 5,\r\n        padding: 0,\r\n        color: indigo[500]\r\n    },\r\n    icon: {\r\n        width: 22.4,\r\n        height: 22.4\r\n    }\r\n})\r\n","import {FormControl} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useRenderRadioButton = ({labels, classes}: UseRenderRadioButtonType) => {\r\n    const formControlLabelElements = labels\r\n        .map((el, i) => <FormControlLabel value={el.value}\r\n                                          key={i}\r\n                                          className={classes.formControlLabel}\r\n                                          control={<Radio/>}\r\n                                          label={el.label}/>)\r\n    return {formControlLabelElements}\r\n};\r\n\r\n\r\n//======================= COMPONENT ===============================\r\nconst RenderRadioButton: React.FC<PropsType> = (props) => {\r\n    const {labels, value, input, classes, label, ...rest} = props;\r\n    const {formControlLabelElements} = useRenderRadioButton({labels, classes});\r\n    return (\r\n        <FormControl >\r\n            <FormLabel component=\"legend\" className={classes.formLabel}>\r\n                {label}\r\n            </FormLabel>\r\n            <RadioGroup value=\"all\" className={classes.radioGroup}  {...input} {...rest}>\r\n                {formControlLabelElements}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default RenderRadioButton;\r\n\r\n//======================= TYPES ======================================================\r\ntype labelsItemType = {\r\n    value: string\r\n    label: string\r\n}\r\ntype PropsType = {\r\n    value: string\r\n    labels: Array<labelsItemType>\r\n    input: any\r\n    classes: any\r\n    label: string\r\n}\r\ntype UseRenderRadioButtonType = {\r\n    labels: Array<labelsItemType>\r\n    classes: any\r\n}\r\n","import React, {ReactElement, useEffect} from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps, submit} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {Button, Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport RenderRadioButton from \"../../common/RenderRadioButton\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {usersAC} from \"../../../redux/reducers/users-reduser\";\r\nimport {SearchUsersParamsType} from \"../../../types/types\";\r\nimport {getSearchUsersParams, getValueFromHeaderSearch} from \"../../../redux/selectors/users-selectors\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useSearchUsersForm = () => {\r\n    const classes = useStyles();\r\n    const classesRadioButton = useStylesRadioButton();\r\n    const lang = useSelector(getLang);\r\n    const nameLabel = translate(lang, 'Name');\r\n    const userAreFriendOrNotLabel = translate(lang, 'User are friend or not');\r\n    const allLabel = translate(lang, 'All');\r\n    const friendLabel = translate(lang, 'Friend');\r\n    const notFriendLabel = translate(lang, 'Not friend')\r\n    const searchLabel = translate(lang, 'Search')\r\n\r\n    return {\r\n        classes, classesRadioButton, nameLabel,\r\n        userAreFriendOrNotLabel, allLabel, friendLabel,\r\n        notFriendLabel, searchLabel\r\n    }\r\n}\r\n\r\n//========================== FORM =======================================\r\nconst SearchUsersForm: React.FC<SearchUsersFormPropsType> = (props): ReactElement => {\r\n    const {handleSubmit, submitting, pristine, error} = props;\r\n    const {\r\n        classes, classesRadioButton, nameLabel,\r\n        userAreFriendOrNotLabel, allLabel, friendLabel,\r\n        notFriendLabel, searchLabel\r\n    } = useSearchUsersForm();\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <Field name='term'\r\n                   component={RenderTextField}\r\n                   fullWidth\r\n                   autoFocus={true}\r\n                   validate={[shouldNotBeEmpty]}\r\n                   label={nameLabel}\r\n                   size='small'\r\n            />\r\n\r\n            <Field name='friend'\r\n                   label={userAreFriendOrNotLabel}\r\n                   component={RenderRadioButton}\r\n                   classes={classesRadioButton}\r\n                   labels={[\r\n                       {value: \"all\", label: allLabel},\r\n                       {value: \"true\", label: friendLabel},\r\n                       {value: \"false\", label: notFriendLabel}\r\n                   ]}\r\n                   size='small'\r\n            />\r\n\r\n            <div>\r\n                <Button type=\"submit\"\r\n                        size=\"small\"\r\n                        color='primary'\r\n                        variant=\"contained\"\r\n                        startIcon={<SearchIcon/>}\r\n                        disabled={submitting || pristine}\r\n                        className={classes.button}\r\n                >\r\n                    {searchLabel}\r\n                </Button>\r\n            </div>\r\n\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst SearchUsersReduxForm = reduxForm<SearchUsersParamsType, SearchUsersFormOwnPropsType>({\r\n    form: 'searchUsers',\r\n    enableReinitialize: true,\r\n})(SearchUsersForm);\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useUsersSearch = () => {\r\n    const classes = useStyles();\r\n    const valueFromHeaderSearch = useSelector(getValueFromHeaderSearch);\r\n    const searchUsersParams = useSelector(getSearchUsersParams);\r\n    const dispatch = useDispatch();\r\n    const onSubmit = (formValue: SearchUsersParamsType) => {\r\n        dispatch(usersAC.setSearchUsersParams(formValue));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n        dispatch(usersAC.setShowUsersFrom('search'));\r\n    };\r\n    const term = valueFromHeaderSearch ? valueFromHeaderSearch : searchUsersParams.term;\r\n    const friend = valueFromHeaderSearch ? 'all' : searchUsersParams.friend;\r\n    const initialValues = {term, friend} as SearchUsersParamsType;\r\n    useEffect(() => {\r\n        if (valueFromHeaderSearch) {\r\n            dispatch(submit('searchUsers'));\r\n            dispatch(usersAC.setSearchUsersParams({term: valueFromHeaderSearch, friend: 'all'}));\r\n            dispatch(usersAC.setCurrentPage(1));\r\n            dispatch(usersAC.setShowUsersFrom('search'));\r\n        }\r\n    }, [valueFromHeaderSearch, dispatch]);\r\n    return {\r\n        classes, onSubmit, initialValues\r\n    }\r\n}\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst UsersSearch: React.FC = (): ReactElement => {\r\n    const {\r\n        classes, onSubmit, initialValues\r\n    } = useUsersSearch();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6'\r\n                        color='primary'\r\n                        classes={{\r\n                            h6: classes.title\r\n                        }}>\r\n                Search users\r\n            </Typography>\r\n            <Divider classes={{\r\n                root: classes.divider\r\n            }}/>\r\n            <SearchUsersReduxForm onSubmit={onSubmit} initialValues={initialValues}/>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default UsersSearch;\r\n\r\n//===================================== TYPES====================================================\r\ntype SearchUsersFormPropsType =\r\n    InjectedFormProps<SearchUsersParamsType, SearchUsersFormOwnPropsType>\r\n    & SearchUsersFormOwnPropsType;\r\ntype SearchUsersFormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 10,\r\n        paddingBottom: 10,\r\n        marginBottom: 10\r\n    },\r\n    title: {\r\n        marginLeft: 10,\r\n    },\r\n    divider: {\r\n        marginTop: 5,\r\n        marginBottom: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    }\r\n});\r\nconst useStylesRadioButton = makeStyles({\r\n    formLabel: {\r\n        margin: '15px 10px 5px',\r\n    },\r\n    radioGroup: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        marginLeft: 10\r\n    },\r\n    formControlLabel: {},\r\n});","import ViewListIcon from '@material-ui/icons/ViewList';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport {ToggleButtonGroup} from \"@material-ui/lab\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport React from 'react';\r\nimport {ViewType} from \"../../types/types\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useViewSwitcher = ({setView}: UseViewSwitcherType) => {\r\n    const onChangeHandle = (event: React.MouseEvent<HTMLElement>, newView: ViewType) => {\r\n        setView(newView);\r\n    };\r\n    return {onChangeHandle}\r\n};\r\n\r\n//====================== COMPONENT ================\r\nconst ViewSwitcher: React.FC<PropsType> = ({view, setView}) => {\r\n    const {onChangeHandle} = useViewSwitcher({setView});\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            size='small'\r\n            exclusive\r\n            value={view}\r\n            onChange={onChangeHandle}\r\n            aria-label=\"items view\"\r\n        >\r\n            <ToggleButton value=\"block\" aria-label=\"block view\">\r\n                <ViewModuleIcon fontSize='small' color='primary'/>\r\n            </ToggleButton>\r\n            <ToggleButton value=\"list\" aria-label=\"list view\">\r\n                <ViewListIcon fontSize='small' color='primary'/>\r\n            </ToggleButton>\r\n\r\n        </ToggleButtonGroup>\r\n    )\r\n};\r\n\r\nexport default ViewSwitcher;\r\n\r\n//========================== TYPES ===========================\r\ntype PropsType = {\r\n    view: ViewType\r\n    setView: (view: ViewType) => void\r\n}\r\ntype UseViewSwitcherType = {\r\n    setView: (view: ViewType) => void\r\n}","import React, {ReactElement} from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getArrayOfUserIdWhichFollowingOrUnfollowing,\r\n    getIsFollowing\r\n} from \"../../../redux/selectors/users-selectors\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/reducers/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useUserBlockItem = (user: UserType) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const arrayOfUserIdWhichFollowingOrUnfollowing = useSelector(getArrayOfUserIdWhichFollowingOrUnfollowing);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const onFollowUnfollowClick = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n    const onOpenSendMessageFormHandle = () => {\r\n        setOpenSendMessageForm(true)\r\n    };\r\n    const buttonLabel = user.followed\r\n        ? translate(lang, 'Unfollow') :\r\n        translate(lang, 'Follow');\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n    const src = ((user && user.photos.small) ? user.photos.small : undefined) as string | undefined;\r\n    const sendMessageLabel = translate(lang, 'Send message')\r\n    return {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        arrayOfUserIdWhichFollowingOrUnfollowing, isFollowing, onFollowUnfollowClick,\r\n        onOpenSendMessageFormHandle, buttonLabel, startIcon, src,\r\n        sendMessageLabel\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst UserBlockItem: React.FC<PropType> = ({user, dialogs}): ReactElement => {\r\n    const {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        arrayOfUserIdWhichFollowingOrUnfollowing, isFollowing, onFollowUnfollowClick,\r\n        onOpenSendMessageFormHandle, buttonLabel, startIcon, src,\r\n        sendMessageLabel\r\n    } = useUserBlockItem(user);\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card elevation={6} className={classes.card}>\r\n                <CardActionArea component={RouterLink}\r\n                                to={`/users/${user.id}`}>\r\n                    <Avatar className={classes.avatar}\r\n                            src={src ? src : undefined}\r\n                            variant=\"rounded\"/>\r\n                </CardActionArea>\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography color='primary'\r\n                                variant='subtitle2'\r\n                                align='center'>\r\n                        {user.name}\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n                <CardActions disableSpacing className={classes.cardActions}>\r\n\r\n                    <div className={classes.buttons}>\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button className={classes.button}\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    size='small'\r\n                                    fullWidth\r\n                                    disabled={arrayOfUserIdWhichFollowingOrUnfollowing.some(item => item === user.id)}\r\n                                    onClick={onFollowUnfollowClick}\r\n                                    startIcon={startIcon}\r\n                            >\r\n                                {buttonLabel}\r\n                            </Button>\r\n\r\n                            {\r\n                                isFollowing\r\n                                && arrayOfUserIdWhichFollowingOrUnfollowing.some(item => item === user.id)\r\n                                &&\r\n                                <CircularPreloader size={20} styleType={'absolute'}/>\r\n                            }\r\n\r\n                        </div>\r\n\r\n                        <div className={classes.buttonWrapper}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant='outlined'\r\n                                color=\"primary\"\r\n                                size='small'\r\n                                fullWidth\r\n                                onClick={onOpenSendMessageFormHandle}\r\n                                startIcon={<SendIcon/>}\r\n                            >\r\n                                {sendMessageLabel}\r\n                            </Button>\r\n                        </div>\r\n\r\n                        <SendMessageForm open={openSendMessageForm}\r\n                                         onClose={setOpenSendMessageForm}\r\n                                         id={user.id}\r\n                                         name={user.name}\r\n                                         src={src}\r\n                                         dialogs={dialogs}\r\n                        />\r\n\r\n                    </div>\r\n                </CardActions>\r\n\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default UserBlockItem;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        width: 150,\r\n        padding: 10\r\n    },\r\n    media: {\r\n        height: 150,\r\n        borderRadius: 5\r\n    },\r\n    avatar: {\r\n        width: 150,\r\n        height: 150,\r\n    },\r\n    cardContent: {\r\n        padding: 5\r\n    },\r\n    cardActions: {\r\n        padding: 0,\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        marginBottom: 5\r\n    },\r\n    buttons: {\r\n        width: '100%',\r\n        marginTop: 0\r\n    },\r\n});","import React, {ReactElement} from 'react';\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getArrayOfUserIdWhichFollowingOrUnfollowing,\r\n    getIsFollowing\r\n} from \"../../../redux/selectors/users-selectors\";\r\nimport {SidebarItemEnum, UserType} from \"../../../types/types\";\r\nimport {getFollow, getUnfollow} from \"../../../redux/reducers/users-reduser\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar/ListItemAvatar\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {sidebarAC} from \"../../../redux/reducers/sidebar-reducer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {translate} from \"../../../const/lang\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useUserListItem = (user: UserType) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const arrayOfUserIdWhichFollowingOrUnfollowing = useSelector(getArrayOfUserIdWhichFollowingOrUnfollowing);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const followUnfollowHandle = () => {\r\n        if (user.followed) {\r\n            dispatch(getUnfollow(user.id));\r\n        } else {\r\n            dispatch(getFollow(user.id));\r\n        }\r\n    };\r\n    const onOpenSendMessageFormHandle = () => {\r\n        setOpenSendMessageForm(true)\r\n    };\r\n    const goToUserHandle = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.users));\r\n    };\r\n    const followLabel = user.followed\r\n        ? translate(lang, 'Unfollow') :\r\n        translate(lang, 'Follow');\r\n    const startIcon = user.followed ? <PersonAddDisabledIcon/> : <GroupAddIcon/>;\r\n    const src = ((user && user.photos.small) ? user.photos.small : undefined) as string | undefined;\r\n    const sendMessageLabel = translate(lang, 'Send message')\r\n    return {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        arrayOfUserIdWhichFollowingOrUnfollowing, isFollowing, followUnfollowHandle,\r\n        onOpenSendMessageFormHandle, goToUserHandle, followLabel,\r\n        startIcon, src, sendMessageLabel\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst UserListItem: React.FC<PropType> = ({user, dialogs}): ReactElement => {\r\n    const {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        arrayOfUserIdWhichFollowingOrUnfollowing, isFollowing, followUnfollowHandle,\r\n        onOpenSendMessageFormHandle, goToUserHandle, followLabel,\r\n        startIcon, src, sendMessageLabel\r\n    } = useUserListItem(user);\r\n\r\n    return (\r\n        <ListItem className={classes.listItem}>\r\n            <ListItemAvatar>\r\n                <Avatar\r\n                    className={classes.avatar}\r\n                    src={src}\r\n                />\r\n            </ListItemAvatar>\r\n            <div className={classes.text}>\r\n                <Link component={RouterLink} to={`/users/${user.id}`} variant='subtitle2'\r\n                      onClick={goToUserHandle}>\r\n                    <Typography color='textPrimary'>\r\n                        {user.name}\r\n                    </Typography>\r\n\r\n                </Link>\r\n                <Link component={RouterLink} to='#' variant='body2' onClick={onOpenSendMessageFormHandle}>\r\n                    {sendMessageLabel}\r\n                </Link>\r\n                <div className={classes.buttonWrapper}>\r\n                    <Button className={classes.button}\r\n                            color=\"primary\"\r\n                            size='small'\r\n                            fullWidth\r\n                            disabled={arrayOfUserIdWhichFollowingOrUnfollowing.some(item => item === user.id)}\r\n                            onClick={followUnfollowHandle}\r\n                            startIcon={startIcon}\r\n                    >\r\n                        {followLabel}\r\n                    </Button>\r\n\r\n                    {\r\n                        isFollowing\r\n                        && arrayOfUserIdWhichFollowingOrUnfollowing.some(item => item === user.id)\r\n                        &&\r\n                        <CircularPreloader size={20} styleType={'absolute'}/>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n            <SendMessageForm open={openSendMessageForm}\r\n                             onClose={setOpenSendMessageForm}\r\n                             id={user.id}\r\n                             name={user.name}\r\n                             src={src}\r\n                             dialogs={dialogs}\r\n            />\r\n        </ListItem>\r\n    )\r\n};\r\n\r\nexport default UserListItem;\r\n\r\n//=========================== TYPES =======================================================\r\ntype PropType = {\r\n    user: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    listItem: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 6,\r\n        borderRadius: 6,\r\n        backgroundColor: 'white',\r\n        boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2), 0px 6px 10px 0px rgba(0,0,0,0.14), 0px 1px 18px 0px rgba(0,0,0,0.12)'\r\n    },\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n    text: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'flex-start'\r\n    },\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    button: {\r\n        textTransform: 'none'\r\n    },\r\n    buttonWrapper: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        marginBottom: 5\r\n    },\r\n\r\n    // root: {\r\n    //     width: 150,\r\n    //     padding: 10\r\n    // },\r\n    // media: {\r\n    //     height: 150,\r\n    //     borderRadius: 5\r\n    // },\r\n    // avatar: {\r\n    //     width: 150,\r\n    //     height: 150,\r\n    // },\r\n    // cardContent: {\r\n    //     padding: 5\r\n    // },\r\n    // cardActions: {\r\n    //     padding: 0,\r\n    // },\r\n\r\n    // buttons: {\r\n    //     width: '100%',\r\n    //     marginTop: 0\r\n    // },\r\n});","import React, {ReactElement} from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {UserType, ViewType} from \"../../../types/types\";\r\nimport UserBlockItem from \"./UserBlockItem\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport UserListItem from \"./UserListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useUsersList = (\r\n    users: null | Array<UserType>,\r\n    dialogs: null | Array<DialogType>,\r\n    isLoading: boolean,\r\n    pageSize: number\r\n) => {\r\n    const classes = useStyles();\r\n    const usersBlockItems = users && users.map(user => <UserBlockItem\r\n        user={user}\r\n        key={user.id}\r\n        dialogs={dialogs}\r\n    />);\r\n    const usersListItems = users && users.map(user => <UserListItem\r\n        user={user}\r\n        key={user.id}\r\n        dialogs={dialogs}\r\n    />);\r\n    const allIsLoaded = !isLoading && users && dialogs;\r\n    let skeletonBlockItems = [] as Array<React.ReactElement>;\r\n    for (let i = 0; i < pageSize; i++) {\r\n        skeletonBlockItems.push(\r\n            <Grid item key={i}>\r\n                <Skeleton variant=\"rect\" width={170} height={272} className={classes.skeletonBlockItem}/>\r\n            </Grid>\r\n        )\r\n    }\r\n    let skeletonListItems = [] as Array<React.ReactElement>;\r\n    for (let i = 0; i < pageSize; i++) {\r\n        skeletonListItems.push(\r\n            <Skeleton variant=\"rect\" width='100%' height={96} className={classes.skeletonListItem}/>\r\n        )\r\n    }\r\n    return {\r\n        usersBlockItems, usersListItems,\r\n        allIsLoaded, skeletonBlockItems, skeletonListItems\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst UsersList: React.FC<PropsType> = ({isLoading, users, dialogs, view, pageSize}): ReactElement => {\r\n    const {\r\n        usersBlockItems, usersListItems,\r\n        allIsLoaded, skeletonBlockItems, skeletonListItems\r\n    } = useUsersList(users, dialogs, isLoading, pageSize);\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                view === \"block\" &&\r\n                <>\r\n                    {\r\n                        allIsLoaded\r\n                            ? <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                                {usersBlockItems}\r\n                            </Grid>\r\n                            : <Grid container alignContent='stretch' justify='flex-start' wrap='wrap' spacing={2}>\r\n                                {skeletonBlockItems}\r\n                            </Grid>\r\n                    }\r\n                </>\r\n            }\r\n\r\n            {\r\n                view === \"list\" &&\r\n                <>\r\n                    {\r\n                        allIsLoaded\r\n                            ? <List disablePadding>\r\n                                {usersListItems}\r\n                            </List>\r\n                            : <List disablePadding>\r\n                                {skeletonListItems}\r\n                            </List>\r\n                    }\r\n                </>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UsersList;\r\n\r\n//======================= TYPES =====================\r\ntype PropsType = {\r\n    isLoading: boolean\r\n    users: null | Array<UserType>\r\n    dialogs: null | Array<DialogType>\r\n    view: ViewType\r\n    pageSize: number\r\n};\r\n\r\n//========================== STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n    skeletonBlockItem: {\r\n        borderRadius: 4\r\n    },\r\n    skeletonListItem: {\r\n        borderRadius: 4,\r\n        marginBottom: 5\r\n    }\r\n})","import React, {ReactElement, useEffect, useState} from 'react';\r\nimport Paginator from '../../common/Paginator';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize, getPortionNumber,\r\n    getSearchUsersParams, getShowUsersFrom,\r\n    getTotalUsersCount,\r\n    getUsersSelector, getValueFromHeaderSearch\r\n} from \"../../../redux/selectors/users-selectors\";\r\nimport {getIsLoading, getLang} from \"../../../redux/selectors/app-selectors\";\r\nimport {getUsers, searchUsers, usersAC} from \"../../../redux/reducers/users-reduser\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport UsersSearch from \"./UsersSearch\";\r\nimport {dialogsSagaAC} from \"../../../redux/reducers/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/selectors/dialogs-selectors\";\r\nimport ViewSwitcher from \"../../common/ViewSwitcher\";\r\nimport UsersList from \"./UsersList\";\r\nimport {FriendsValuesType, ShowUsersFromType, ViewType} from \"../../../types/types\";\r\nimport {translate} from \"../../../const/lang\";\r\nimport useAuthRedirect from \"../../../hooks/useAuthRedirect\";\r\nimport {BooleanParam, NumberParam, StringParam, useQueryParam} from \"use-query-params\";\r\nimport useCommonQueryParams from \"../../../hooks/useCommonQueryParams\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useUsers = () => {\r\n    useAuthRedirect();\r\n    useCommonQueryParams();\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector(getLang);\r\n    const users = useSelector(getUsersSelector);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const pageSize = useSelector(getPageSize);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const isLoading = useSelector(getIsLoading);\r\n    const searchUsersParams = useSelector(getSearchUsersParams);\r\n    const showUsersFrom = useSelector(getShowUsersFrom);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n    const valueFromHeaderSearch = useSelector(getValueFromHeaderSearch);\r\n    const portionNumber = useSelector(getPortionNumber);\r\n    const [searchPanelIsOpen, setSearchPanelIsOpen] = useState(false);\r\n    const [view, setView] = useState<ViewType>('block');\r\n\r\n    const [currentPageQuery, setCurrentPageQuery] = useQueryParam('page', NumberParam);\r\n    const [portionNumberQuery, setPortionNumberQuery] = useQueryParam('portion', NumberParam);\r\n    const [viewQuery, setViewQuery] = useQueryParam('view', StringParam);\r\n    const [searchPanelIsOpenQuery, setSearchPanelIsOpenQuery] = useQueryParam('searchPanelIsOpen', BooleanParam);\r\n    const [showUsersFromQuery, setShowUsersFromQuery] = useQueryParam('showFrom', StringParam);\r\n    const [termQuery, setTermQuery] = useQueryParam('term', StringParam);\r\n    const [friendQuery, setFriendQuery] = useQueryParam('friend', StringParam);\r\n\r\n    // URL => STATE\r\n    useEffect(() => {\r\n        dispatch(usersAC.setCurrentPage(currentPageQuery ? currentPageQuery : currentPage));\r\n        dispatch(usersAC.setPortionNumber(portionNumberQuery ? portionNumberQuery : portionNumber));\r\n        setView(viewQuery ? viewQuery as ViewType : view);\r\n        setSearchPanelIsOpen(searchPanelIsOpenQuery ? searchPanelIsOpenQuery : searchPanelIsOpen);\r\n        dispatch(usersAC.setShowUsersFrom(showUsersFromQuery ? showUsersFromQuery as ShowUsersFromType : showUsersFrom));\r\n        dispatch(usersAC.setSearchUsersParams({\r\n            term: termQuery ? termQuery : searchUsersParams.term,\r\n            friend: friendQuery ? friendQuery as  FriendsValuesType : searchUsersParams.friend\r\n        }));\r\n    }, [dispatch]);\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setCurrentPageQuery(currentPage !== 1 ? currentPage : undefined);\r\n        setPortionNumberQuery(portionNumber !== 1 ? portionNumber : undefined);\r\n        setViewQuery(view !== 'block' ? view : undefined);\r\n        setSearchPanelIsOpenQuery(searchPanelIsOpen ? searchPanelIsOpen : undefined);\r\n        setShowUsersFromQuery(showUsersFrom !== 'all' ? showUsersFrom : undefined);\r\n        setTermQuery(searchUsersParams.term !== '' ? searchUsersParams.term : undefined);\r\n        setFriendQuery(searchUsersParams.friend !== 'all' ? searchUsersParams.friend : undefined);\r\n    }, [\r\n        currentPage,\r\n        portionNumber,\r\n        view,\r\n        searchPanelIsOpen,\r\n        showUsersFrom,\r\n        searchUsersParams,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n       dispatch(dialogsSagaAC.getDialogs());\r\n    }, [dispatch]);\r\n    useEffect(() => {\r\n        if (showUsersFrom === 'all') {\r\n            dispatch(getUsers(currentPage, pageSize));\r\n        } else if (showUsersFrom === 'search') {\r\n            dispatch(searchUsers(currentPage, pageSize, searchUsersParams.term, searchUsersParams.friend));\r\n        }\r\n    }, [currentPage, pageSize, showUsersFrom, searchUsersParams.term, searchUsersParams.friend, dispatch]);\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentPage(pageNumber));\r\n    };\r\n    const onSearchCharactersClick = () => {\r\n        setSearchPanelIsOpen(!searchPanelIsOpen);\r\n    };\r\n    const onShowAllClick = () => {\r\n        dispatch(usersAC.setShowUsersFrom('all'));\r\n        dispatch(usersAC.setSearchUsersParams({term: '', friend: 'all'}));\r\n        dispatch(usersAC.setCurrentPage(1));\r\n    };\r\n    const countTitle = showUsersFrom === 'all'\r\n        ? translate(lang, 'Total all users count:') :\r\n        translate(lang, 'Total users count from search:')\r\n    useEffect(() => {\r\n        if (valueFromHeaderSearch) {\r\n            setSearchPanelIsOpen(true)\r\n        }\r\n    }, [valueFromHeaderSearch]);\r\n\r\n    const closeSearchLabel = translate(lang, 'Close search');\r\n    const openSearchLabel = translate(lang, 'Open search');\r\n    const showAllLabel = translate(lang, 'Show all');\r\n\r\n    const setPortionNumber = (portionNumber: number) => {\r\n        dispatch(usersAC.setPortionNumber(portionNumber))\r\n    };\r\n\r\n    return {\r\n        classes, users, totalUsersCount, pageSize, currentPage,\r\n        isLoading, showUsersFrom, dialogs, searchPanelIsOpen,\r\n        view, setView, onPageChanged, onSearchCharactersClick,\r\n        onShowAllClick, countTitle, closeSearchLabel, openSearchLabel,\r\n        showAllLabel, portionNumber, setPortionNumber\r\n    }\r\n}\r\n\r\n//======================= COMPONENT ===============================\r\nconst Users: React.FC = (): ReactElement => {\r\n    const {\r\n        classes, users, totalUsersCount, pageSize, currentPage,\r\n        isLoading, showUsersFrom, dialogs, searchPanelIsOpen,\r\n        view, setView, onPageChanged, onSearchCharactersClick,\r\n        onShowAllClick, countTitle, closeSearchLabel, openSearchLabel,\r\n        showAllLabel, portionNumber, setPortionNumber\r\n    } = useUsers();\r\n\r\n    return (\r\n        <div className={classes.users}>\r\n\r\n            <Collapse in={searchPanelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <UsersSearch/>\r\n            </Collapse>\r\n\r\n            <div className={classes.topPanel}>\r\n                <Button onClick={onSearchCharactersClick}\r\n                        size='small'\r\n                        className={classes.button}\r\n                        color='primary'\r\n                        startIcon={searchPanelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {\r\n                        searchPanelIsOpen\r\n                            ? closeSearchLabel\r\n                            : openSearchLabel\r\n                    }\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        size='small'\r\n                        color='primary'\r\n                        disabled={showUsersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    {showAllLabel}\r\n                </Button>\r\n\r\n                <Typography color='primary'\r\n                            variant='subtitle2'\r\n                            className={classes.countTitle}\r\n                >\r\n                    {countTitle}\r\n                </Typography>\r\n\r\n                <Badge badgeContent={totalUsersCount} color=\"primary\" max={99999} showZero>\r\n                    <PeopleIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n\r\n            {\r\n                totalUsersCount !== 0 && totalUsersCount && pageSize && currentPage &&\r\n                <div className={classes.paginatorTopWrapper}>\r\n                    <div className={classes.paginator}>\r\n                        <Paginator totalItemsCount={totalUsersCount}\r\n                                   pageSize={pageSize}\r\n                                   currentPage={currentPage}\r\n                                   onPageChanged={onPageChanged}\r\n                                   portionNumber={portionNumber}\r\n                                   setPortionNumber={setPortionNumber}\r\n                        />\r\n                    </div>\r\n\r\n                    <ViewSwitcher view={view} setView={setView}/>\r\n                </div>\r\n\r\n            }\r\n\r\n            <UsersList isLoading={isLoading}\r\n                       users={users}\r\n                       dialogs={dialogs}\r\n                       view={view}\r\n                       pageSize={pageSize}\r\n            />\r\n\r\n            {\r\n                totalUsersCount !== 0 && totalUsersCount && pageSize && currentPage &&\r\n                <div className={classes.paginatorBottomWrapper}>\r\n                    <div className={classes.paginator}>\r\n                        <Paginator totalItemsCount={totalUsersCount}\r\n                                   pageSize={pageSize}\r\n                                   currentPage={currentPage}\r\n                                   onPageChanged={onPageChanged}\r\n                                   portionNumber={portionNumber}\r\n                                   setPortionNumber={setPortionNumber}\r\n                        />\r\n                    </div>\r\n                    <ViewSwitcher view={view} setView={setView}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Users;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    users: {\r\n        minHeight: '100vh'\r\n    },\r\n    topPanel: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    },\r\n    countTitle: {\r\n        marginRight: 10\r\n    },\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    paginatorTopWrapper: {\r\n        marginBottom: 10,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    paginatorBottomWrapper: {\r\n        marginTop: 10,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    paginator: {\r\n        marginRight: 20\r\n    },\r\n});\r\n\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {SidebarItemEnum, UserType} from \"../../../types/types\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sidebarAC} from \"../../../redux/reducers/sidebar-reducer\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {usersAC} from \"../../../redux/reducers/users-reduser\";\r\nimport {\r\n    getArrayOfUserIdWhichFollowingOrUnfollowing,\r\n    getIsFollowing\r\n} from \"../../../redux/selectors/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport SendMessageForm from \"../../common/SendMessageForm\";\r\nimport {DialogType} from \"../../../DAL/dialogs-api\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useFriendsListItem = ({friend}: UseFriendsListItemType) => {\r\n    const classes = useStyles();\r\n    const [openSendMessageForm, setOpenSendMessageForm] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const arrayOfUserIdWhichFollowingOrUnfollowing = useSelector(getArrayOfUserIdWhichFollowingOrUnfollowing);\r\n    const isFollowing = useSelector(getIsFollowing);\r\n    const lang = useSelector(getLang);\r\n    const onListItemClick = () => {\r\n        dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.users));\r\n    };\r\n    const onOpenSendMessageFormHandle = (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        setOpenSendMessageForm(true)\r\n    };\r\n    const src = (friend ? friend.photos.small : undefined) as string | undefined;\r\n    //========================= popper ========================================\r\n    const [open, setOpen] = useState(false);\r\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    const handleListKeyDown = (event: React.KeyboardEvent) => {\r\n        if (event.key === 'Tab') {\r\n            event.preventDefault();\r\n            setOpen(false);\r\n        }\r\n    }\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current!.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    //============================== IconButton ===================================================\r\n    const removeHandle = () => {\r\n        dispatch(usersAC.setNeedToChangeListOfFriends(true, friend.id))\r\n    };\r\n    const somethingElseHandle = () => {\r\n    };\r\n    const labels = [\r\n        translate(lang, 'Remove from friends'),\r\n        translate(lang, 'Something else'),\r\n        translate(lang, 'Something else')\r\n    ];\r\n    const callbacks = [removeHandle, somethingElseHandle, somethingElseHandle]\r\n    const menuItemsElements = labels.map((el, i) => {\r\n        const onClickHandle = (event: React.MouseEvent<EventTarget>) => {\r\n            handleClose(event);\r\n            callbacks[i]();\r\n        };\r\n        return (\r\n            <MenuItem key={i}\r\n                      onClick={onClickHandle}\r\n            >\r\n                {labels[i]}\r\n            </MenuItem>\r\n        )\r\n    });\r\n    const sendMessageLabel = translate(lang, 'Send message')\r\n    return {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        arrayOfUserIdWhichFollowingOrUnfollowing, isFollowing, onListItemClick,\r\n        onOpenSendMessageFormHandle, src, open, anchorRef,\r\n        handleToggle, handleClose, handleListKeyDown,\r\n        menuItemsElements, sendMessageLabel\r\n    };\r\n}\r\n\r\n//======================= COMPONENT ===============================\r\nconst FriendsListItem: React.FC<PropsTypes> = ({friend, dialogs}) => {\r\n    const {\r\n        classes, openSendMessageForm, setOpenSendMessageForm,\r\n        arrayOfUserIdWhichFollowingOrUnfollowing, isFollowing, onListItemClick,\r\n        onOpenSendMessageFormHandle, src, open, anchorRef,\r\n        handleToggle, handleClose, handleListKeyDown,\r\n        menuItemsElements, sendMessageLabel\r\n    } = useFriendsListItem({friend});\r\n    return (\r\n        <>\r\n            <Divider className={classes.divider}/>\r\n            <ListItem className={classes.listItem}>\r\n                <div className={classes.listItemInner}>\r\n                    <div className={classes.listItemInnerleft}>\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                src={friend.photos.large ? friend.photos.large : undefined}\r\n                            />\r\n                        </ListItemAvatar>\r\n                        <div className={classes.text}>\r\n                            <Link component={RouterLink} to={`/users/${friend.id}`} variant='subtitle2'\r\n                                  onClick={onListItemClick}>\r\n                                {friend.name}\r\n                            </Link>\r\n                            <Link component={RouterLink} to='#' variant='body2' onClick={onOpenSendMessageFormHandle}>\r\n                                {sendMessageLabel}\r\n                            </Link>\r\n                        </div>\r\n                        <SendMessageForm open={openSendMessageForm}\r\n                                         onClose={setOpenSendMessageForm}\r\n                                         id={friend.id}\r\n                                         name={friend.name}\r\n                                         src={src}\r\n                                         dialogs={dialogs}\r\n                        />\r\n\r\n                    </div>\r\n                    {/*<IconButtonWithPopper*/}\r\n                    {/*    icon={<MoreVertIcon/>}*/}\r\n                    {/*    classes={classesPopper}*/}\r\n                    {/*    labels={labels}*/}\r\n                    {/*    callbacks={callbacks}*/}\r\n                    {/*/>*/}\r\n\r\n                    <div>\r\n                        <IconButton ref={anchorRef}\r\n                                    aria-controls={open ? 'menu-list-grow' : undefined}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleToggle}\r\n                                    edge=\"end\"\r\n                                    aria-label=\"delete\"\r\n                                    className={classes.iconButton}>\r\n                            <MoreVertIcon/>\r\n                        </IconButton>\r\n                        <Popper className={classes.popper}\r\n                                open={open}\r\n                                anchorEl={anchorRef.current}\r\n                                role={undefined}\r\n                                transition\r\n                                placement='bottom-end'\r\n                                disablePortal>\r\n                            {({TransitionProps, placement}) => (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'}}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList autoFocusItem={open} id=\"menu-list-grow\"\r\n                                                      onKeyDown={handleListKeyDown}>\r\n                                                {menuItemsElements}\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            )}\r\n                        </Popper>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isFollowing && arrayOfUserIdWhichFollowingOrUnfollowing.some(item => item === friend.id)\r\n                    && <CircularPreloader size={80} styleType={'absolute'}/>\r\n                }\r\n            </ListItem>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FriendsListItem;\r\n\r\n//========================== TYPES =============================================\r\ntype PropsTypes = {\r\n    friend: UserType\r\n    dialogs: Array<DialogType> | null\r\n}\r\ntype UseFriendsListItemType = {\r\n    friend: UserType\r\n}\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 80,\r\n        height: 80,\r\n        marginRight: 15\r\n    },\r\n\r\n    iconButton: {\r\n        marginRight: 0,\r\n        zIndex: 1\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n    popper: {\r\n        zIndex: 1000\r\n    },\r\n    listItemInner: {\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    listItemInnerleft: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexGrow: 1\r\n    },\r\n    listItem: {\r\n        position: 'relative'\r\n    },\r\n    text: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }\r\n\r\n});\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, reset, submit} from \"redux-form\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RenderTextField from \"../../common/RenderTextField\";\r\nimport {shouldNotBeEmpty} from \"../../../utilities/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {usersAC} from \"../../../redux/reducers/users-reduser\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {getIsFriendsSearching, getSearchFriendsParams} from \"../../../redux/selectors/users-selectors\";\r\nimport CircularPreloader from \"../../common/CircularPreloader\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {translate} from \"../../../const/lang\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\n\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useForm = () => {\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const onChangeHandler = () => {\r\n        setTimeout(() => dispatch(submit('friends-search')));\r\n        dispatch(usersAC.setCurrentFriendsPage(1))\r\n    };\r\n    const nameOfTheFriendLabel = translate(lang, 'Name of the friend')\r\n    return {onChangeHandler, nameOfTheFriendLabel}\r\n}\r\n//========================== FORM =======================================\r\nconst Form: React.FC<FormPropsType> = ({handleSubmit}) => {\r\n    const {onChangeHandler, nameOfTheFriendLabel} = useForm();\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='term'\r\n                       component={RenderTextField}\r\n                       fullWidth\r\n                       validate={[shouldNotBeEmpty]}\r\n                       label={nameOfTheFriendLabel}\r\n                       size='small'\r\n                       onChange={onChangeHandler}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n//================================== REDUX-FORM ======================================\r\nconst ReduxForm = reduxForm<FormParamsType, FormOwnPropsType>({\r\n    form: 'friends-search',\r\n    enableReinitialize: true,\r\n})(Form);\r\n\r\n//====================== CUSTOM HOOK =========================\r\nconst useFriendsSearch = () => {\r\n    const classes = useStyles();\r\n    const isFriendsSearching = useSelector(getIsFriendsSearching);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const dispatch = useDispatch();\r\n    const onSubmit = (formValue: FormParamsType) => {\r\n        dispatch(usersAC.setSearchFriendsParams({term: formValue.term}))\r\n    };\r\n    const icon = searchFriendsParams.term === ''\r\n        ? <SearchIcon/>\r\n        : <HighlightOffIcon/>;\r\n    const onClickHandler = () => {\r\n        if (searchFriendsParams.term !== '') {\r\n            dispatch(usersAC.setSearchFriendsParams({term: ''}));\r\n            dispatch(usersAC.setCurrentFriendsPage(1));\r\n            dispatch(reset('friends-search'));\r\n        }\r\n    };\r\n    return {\r\n        classes, isFriendsSearching, searchFriendsParams,\r\n        onSubmit, icon, onClickHandler\r\n    }\r\n};\r\n\r\n// =========================== COMPONENT ============================================================\r\nconst FriendsSearch: React.FC = () => {\r\n    const {\r\n        classes, isFriendsSearching,\r\n        onSubmit, icon, onClickHandler, searchFriendsParams\r\n    } = useFriendsSearch();\r\n\r\n    return (\r\n        <div className={classes.search}>\r\n            <div className={classes.iconButton}>\r\n                {\r\n                    !isFriendsSearching\r\n                        ? <IconButton onClick={onClickHandler}>{icon}</IconButton>\r\n                        : <CircularPreloader size={20} styleType='absolute'/>\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.form}>\r\n                <ReduxForm onSubmit={onSubmit} initialValues={searchFriendsParams}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default FriendsSearch;\r\n\r\n//===================================== TYPES====================================================\r\ntype FormPropsType =\r\n    InjectedFormProps<FormParamsType, FormOwnPropsType>\r\n    & FormOwnPropsType;\r\ntype FormParamsType = {\r\n    term: string\r\n}\r\ntype FormOwnPropsType = {}\r\n\r\n//===================================== STYLES ===================================================\r\nconst useStyles = makeStyles({\r\n    fieldWrapper: {\r\n        margin: '10px 10px 5px 35px'\r\n    },\r\n    search: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '0 10px'\r\n    },\r\n    form: {\r\n        flexGrow: 1\r\n    },\r\n    iconButton: {\r\n        width: 48,\r\n        height: 48,\r\n        position: 'relative',\r\n        marginRight: 5\r\n    }\r\n\r\n});","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentFriendsPage,\r\n    getCurrentPage, getFriendIdToRemove,\r\n    getFriendsSelector,\r\n    getNeedToChangeListOfFriends,\r\n    getPageSize, getPortionNumber, getSearchFriendsParams, getTotalFriendsCount\r\n} from \"../../../redux/selectors/users-selectors\";\r\nimport FriendsListItem from \"./FriendsListItem\";\r\nimport React, {useEffect} from \"react\";\r\nimport {searchFriends, removeAndUpdateFriends, usersAC} from \"../../../redux/reducers/users-reduser\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsSearch from \"./FriendsSearch\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paginator from \"../../common/Paginator\";\r\nimport {dialogsSagaAC} from \"../../../redux/reducers/dialogs-reducer\";\r\nimport {getDialogsSelector} from \"../../../redux/selectors/dialogs-selectors\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useFriendsList = () => {\r\n    const classes = useStyles();\r\n    const friends = useSelector(getFriendsSelector);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const currentFriendsPage = useSelector(getCurrentFriendsPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const needToChangeListOfFriends = useSelector(getNeedToChangeListOfFriends);\r\n    const friendIdToRemove = useSelector(getFriendIdToRemove);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const totalFriendsCount = useSelector(getTotalFriendsCount);\r\n    const dialogs = useSelector(getDialogsSelector);\r\n    const portionNumber = useSelector(getPortionNumber);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const FriendsListElements = friends\r\n        && friends.map(el => <FriendsListItem key={el.id} friend={el} dialogs={dialogs}/>);\r\n    useEffect(() => {\r\n        dispatch(searchFriends(currentFriendsPage, pageSize, searchFriendsParams.term));\r\n    }, [searchFriendsParams.term, currentFriendsPage, pageSize, dispatch]);\r\n    useEffect(() => {\r\n        if (needToChangeListOfFriends && friendIdToRemove) {\r\n            dispatch(removeAndUpdateFriends(currentPage, pageSize, friendIdToRemove));\r\n        }\r\n    }, [needToChangeListOfFriends, dispatch]);\r\n    useEffect(() => {\r\n        //dispatch(getDialogs());\r\n        dispatch(dialogsSagaAC.getDialogs());\r\n    }, [dispatch]);\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersAC.setCurrentFriendsPage(pageNumber));\r\n    };\r\n\r\n    const setPortionNumber = (portionNumber: number) => {\r\n        dispatch(usersAC.setPortionNumber(portionNumber))\r\n    };\r\n    return {\r\n        classes, currentFriendsPage, pageSize, totalFriendsCount,\r\n        lang, FriendsListElements, onPageChanged,\r\n        portionNumber, setPortionNumber\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst FriendsList: React.FC = () => {\r\n    const {\r\n        classes, currentFriendsPage, pageSize, totalFriendsCount,\r\n        lang, FriendsListElements, onPageChanged,\r\n        portionNumber, setPortionNumber\r\n    } = useFriendsList();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <div className={classes.title}>\r\n                <Typography component='span' color='primary' className={classes.titleLeft}>\r\n                    {translate(lang, 'Friends')}\r\n                </Typography>\r\n                <Typography component='span' color='textSecondary'>\r\n                    {totalFriendsCount}\r\n                </Typography>\r\n            </div>\r\n            <FriendsSearch/>\r\n\r\n            <div className={classes.paginatorTop}>\r\n                <Paginator totalItemsCount={totalFriendsCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentFriendsPage}\r\n                           onPageChanged={onPageChanged}\r\n                           portionNumber={portionNumber}\r\n                           setPortionNumber={setPortionNumber}\r\n                />\r\n            </div>\r\n\r\n            <List>\r\n                {FriendsListElements}\r\n            </List>\r\n\r\n            <Divider className={classes.divider}/>\r\n\r\n            <div className={classes.paginatorBottom}>\r\n                <Paginator totalItemsCount={totalFriendsCount}\r\n                           pageSize={pageSize}\r\n                           currentPage={currentFriendsPage}\r\n                           onPageChanged={onPageChanged}\r\n                           portionNumber={portionNumber}\r\n                           setPortionNumber={setPortionNumber}\r\n                />\r\n            </div>\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsList;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    title: {\r\n        padding: '5px 10px 5px 10px'\r\n    },\r\n    titleLeft: {\r\n        marginRight: 5\r\n    },\r\n    paginatorTop: {\r\n        marginLeft: 10,\r\n        marginTop: 5\r\n    },\r\n    paginatorBottom: {\r\n        marginLeft: 10,\r\n        marginBottom: 5,\r\n        marginTop: 10\r\n    },\r\n    divider: {\r\n        margin: '0 10px'\r\n    },\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentFriendsSidebarItem} from \"../../../redux/selectors/users-selectors\";\r\nimport {usersAC} from \"../../../redux/reducers/users-reduser\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//====================== CUSTOM HOOK =========================\r\nconst useFriendsSidebar = () => {\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n    const lang = useSelector(getLang);\r\n    const dispatch = useDispatch();\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        dispatch(usersAC.setCurrentFriendsSidebarItem(newValue));\r\n    };\r\n    const friendsLabel = translate(lang, \"Friends\");\r\n    const somethingElseLabel = translate(lang, \"Something else\")\r\n    return {\r\n        classes, currentFriendsSidebarItem,\r\n        handleChange, friendsLabel, somethingElseLabel\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst FriendsSidebar: React.FC = () => {\r\n    const {\r\n        classes, currentFriendsSidebarItem,\r\n        handleChange, friendsLabel, somethingElseLabel\r\n    } = useFriendsSidebar();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Tabs\r\n                classes={{\r\n                    indicator: classes.indicator\r\n                }}\r\n                orientation=\"vertical\"\r\n                value={currentFriendsSidebarItem}\r\n                onChange={handleChange}\r\n                className={classes.tabs}\r\n            >\r\n\r\n                <Tab label={friendsLabel} icon={<GroupIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label={somethingElseLabel} icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n                <Tab label={somethingElseLabel} icon={<HelpOutlineIcon className={classes.icon}/>} classes={{\r\n                    wrapper: classes.wrapper,\r\n                    selected: classes.selected,\r\n                    root: classes.tabRoot,\r\n                    labelIcon: classes.labelIcon\r\n                }}/>\r\n\r\n\r\n            </Tabs>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default FriendsSidebar;\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    tabs: {\r\n        borderLeft: `3px solid #ccc`,\r\n    },\r\n    indicator: {\r\n        width: 2,\r\n        left: 0,\r\n        right: 'auto'\r\n    },\r\n    wrapper: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'flex-start',\r\n        textTransform: 'none',\r\n        '& > *:first-child': {\r\n            marginBottom: '0!important'\r\n        }\r\n    },\r\n    icon: {\r\n        margin: '0 10px',\r\n    },\r\n    selected: {\r\n        color: indigo[500],\r\n        backgroundColor: '#eee'\r\n    },\r\n    tabRoot: {\r\n        padding: 0\r\n    },\r\n    labelIcon: {\r\n        minHeight: 50\r\n    }\r\n});","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {translate} from \"../../../const/lang\";\r\n\r\n//====================== CUSTOM HOOK =========================\r\nconst useFriendsSomethingElse = () => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    return {classes, lang}\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst FriendsSomethingElse: React.FC = () => {\r\n    const {classes, lang} = useFriendsSomethingElse();\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n            <Typography variant='h6' color='primary' align='center'>\r\n                {translate(lang, 'Something else')}\r\n            </Typography>\r\n        </Card>\r\n    )\r\n};\r\nexport default FriendsSomethingElse;\r\n\r\n//==================== STYLES ====================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n\r\n    }\r\n});","import React, {useEffect} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport FriendsList from \"./FriendsList\";\r\nimport FriendsSidebar from \"./FriendsSidebar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentFriendsPage,\r\n    getCurrentFriendsSidebarItem,\r\n    getPortionNumber, getSearchFriendsParams\r\n} from \"../../../redux/selectors/users-selectors\";\r\nimport FriendsSomethingElse from \"./FriendsSomethingElse\";\r\nimport useAuthRedirect from \"../../../hooks/useAuthRedirect\";\r\nimport {NumberParam, StringParam, useQueryParam} from \"use-query-params\";\r\nimport {usersAC} from \"../../../redux/reducers/users-reduser\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\nimport useCommonQueryParams from \"../../../hooks/useCommonQueryParams\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst useFriends = () => {\r\n    useAuthRedirect();\r\n    useCommonQueryParams();\r\n\r\n    const classes = useStyles();\r\n    const currentFriendsSidebarItem = useSelector(getCurrentFriendsSidebarItem);\r\n    const dispatch = useDispatch();\r\n\r\n    const currentFriendsPage = useSelector(getCurrentFriendsPage);\r\n    const portionNumber = useSelector(getPortionNumber);\r\n    const searchFriendsParams = useSelector(getSearchFriendsParams);\r\n    const lang = useSelector(getLang);\r\n\r\n    const [friendsPageQuery, setFriendsPageQuery] = useQueryParam('page', NumberParam);\r\n    const [portionNumberQuery, setPortionNumberQuery] = useQueryParam('portion', NumberParam);\r\n    const [searchFriendsTermQuery, setSearchFriendsTermQuery] = useQueryParam('term', StringParam);\r\n\r\n    // URL => STATE\r\n    useEffect(() => {\r\n        dispatch(usersAC.setCurrentFriendsPage(friendsPageQuery ? friendsPageQuery : currentFriendsPage));\r\n        dispatch(usersAC.setPortionNumber(portionNumberQuery ? portionNumberQuery : portionNumber));\r\n        dispatch(usersAC.setSearchFriendsParams(searchFriendsTermQuery ? {term: searchFriendsTermQuery} : searchFriendsParams));\r\n    }, [dispatch]);\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setFriendsPageQuery(currentFriendsPage !== 1 ? currentFriendsPage : undefined);\r\n        setPortionNumberQuery(portionNumber !== 1 ? portionNumber : undefined);\r\n        setSearchFriendsTermQuery(searchFriendsParams.term !== '' ? searchFriendsParams.term : undefined);\r\n    }, [\r\n        currentFriendsPage,\r\n        portionNumber,\r\n        searchFriendsParams,\r\n        lang,\r\n    ]);\r\n\r\n    return {\r\n        classes, currentFriendsSidebarItem\r\n    }\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst Friends: React.FC = () => {\r\n    const {classes, currentFriendsSidebarItem} = useFriends();\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.leftColumn}>\r\n                {\r\n                    currentFriendsSidebarItem === 0\r\n                        ? <FriendsList/>\r\n                        : <FriendsSomethingElse/>\r\n                }\r\n            </div>\r\n            <div className={classes.rightColumn}>\r\n                <FriendsSidebar/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Friends;\r\n\r\n\r\n//========================== STYLES ================================================\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        display: \"flex\"\r\n    },\r\n    card: {\r\n        padding: 5,\r\n    },\r\n    leftColumn: {\r\n        flexGrow: 1,\r\n        marginRight: 15,\r\n    },\r\n    rightColumn: {\r\n        flexBasis: 220,\r\n    }\r\n});","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {HexColorPicker} from \"react-colorful\";\r\nimport './../../css/styles.css'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport styled from \"styled-components\";\r\n\r\n//===================== CUSTOM HOOK ===================\r\nconst useSelectColorPopover = (\r\n    onPickColor: (color: string) => void,\r\n    handleClose: () => void,\r\n    propsColor: string\r\n) => {\r\n    const [color, setColor] = useState(propsColor);\r\n    const onAcceptHandler = () => {\r\n        onPickColor(color);\r\n        handleClose();\r\n    };\r\n    const classes = useStyles();\r\n    return {\r\n        color, setColor,\r\n        onAcceptHandler, classes\r\n    }\r\n};\r\n\r\n//==================== STYLED =========================\r\nconst Div = styled.div`\r\n        width:  ${(props: {width: number}) => `${props.width}px`};\r\n        padding: 15px;\r\n`;\r\n\r\n//==================== COMPONENT ======================\r\nconst SelectColorPopover: React.FC<PropsType> = (props) => {\r\n    const {header, onPickColor, handleClose, propsColor, width = 230} = props;\r\n    const {\r\n        color, setColor,\r\n        onAcceptHandler, classes\r\n    } = useSelectColorPopover(onPickColor, handleClose, propsColor);\r\n    return (\r\n        <Div width={width}>\r\n            <Typography variant='subtitle2' className={classes.title}>\r\n                {header}\r\n            </Typography>\r\n\r\n            <HexColorPicker color={color} onChange={setColor}/>\r\n            <Button variant='contained'\r\n                    color='primary'\r\n                    fullWidth\r\n                    className={classes.button}\r\n                    onClick={onAcceptHandler}\r\n            >\r\n                Select\r\n            </Button>\r\n\r\n        </Div>\r\n    )\r\n};\r\nexport default SelectColorPopover;\r\n\r\n//=========================== TYPE =======================\r\ntype PropsType = {\r\n    header: string\r\n    onPickColor: (color: string) => void\r\n    handleClose: () => void\r\n    propsColor: string\r\n    width?: number\r\n}\r\n\r\n//================================ STYLES =======================================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginTop: 10,\r\n        textTransform: 'none'\r\n    },\r\n    title: {\r\n        marginBottom: 10\r\n    }\r\n});","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Tooltip} from \"@material-ui/core\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport SelectColorPopover from \"./SelectColorPopover\";\r\nimport {useSelector} from \"react-redux\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {getLang} from \"../../redux/selectors/app-selectors\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\nconst Div = styled.div`\r\n  background: ${(props: DivPropsType) => props.enable ? props.color : 'none'};;\r\n  width: ${(props: DivPropsType) => `${props.size}px`};\r\n  height: ${(props: DivPropsType) => `${props.size}px`};\r\n  border-radius: ${(props: DivPropsType) => `${props.borderRadius}px`};\r\n  border: 2px solid #fff;\r\n  cursor: ${(props: DivPropsType) => props.enable ? 'pointer' : 'auto'};\r\n  display: flex;\r\n  justify-content:center;\r\n  align-items: center;\r\n`;\r\n\r\n//==================== CUSTOM HOOK ==========================\r\nconst useSelectColorButtonCustom = (\r\n    enable: boolean, header: string, tipTitle: string | undefined\r\n) => {\r\n    const onClickHandler = (event: React.MouseEvent<HTMLElement>) => {\r\n        if (enable) {\r\n            setAnchorEl(event.currentTarget);\r\n        }\r\n    };\r\n    const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const lang = useSelector(getLang);\r\n    const headerLabel = translate(lang, header);\r\n    const tipTitleLabel = tipTitle ? translate(lang, tipTitle) : '';\r\n    const classes = useStyles();\r\n    return {\r\n        onClickHandler, open, anchorEl, classes,\r\n        handleClose, headerLabel, tipTitleLabel,\r\n    }\r\n};\r\n\r\n//===================== COMPONENT ===========================\r\nconst SelectColorButtonCustom: React.FC<PropsType> = (props) => {\r\n    const {\r\n        color, enable, onPickColorHandler, size = 50, tipTitle, header,\r\n        anchorOriginVertical = 'top', anchorOriginHorizontal = 'left',\r\n        transformOriginVertical = 'top', transformOriginHorizontal = 'left',\r\n        borderRadius = 2\r\n    } = props;\r\n\r\n    const {\r\n        onClickHandler, open, anchorEl, classes,\r\n        handleClose, headerLabel, tipTitleLabel,\r\n    } = useSelectColorButtonCustom(enable, header, tipTitle);\r\n\r\n    return (\r\n        <>\r\n            <>\r\n                {\r\n                    tipTitle\r\n                        ? <Tooltip title={tipTitleLabel} placement=\"right\" arrow\r\n                                   classes={{\r\n                                       tooltip: classes.tooltip,\r\n                                       arrow: classes.arrow\r\n                                   }}>\r\n                            <Div size={size}\r\n                                 enable={enable}\r\n                                 color={color}\r\n                                 borderRadius={borderRadius}\r\n                                 onClick={onClickHandler}\r\n                            />\r\n                        </Tooltip>\r\n                        : <Div size={size}\r\n                               enable={enable}\r\n                               color={color}\r\n                               borderRadius={borderRadius}\r\n                               onClick={onClickHandler}\r\n                        />\r\n                }\r\n            </>\r\n            <Popover\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: anchorOriginVertical,\r\n                    horizontal: anchorOriginHorizontal,\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: transformOriginVertical,\r\n                    horizontal: transformOriginHorizontal,\r\n                }}\r\n            >\r\n                <SelectColorPopover header={headerLabel}\r\n                                    onPickColor={onPickColorHandler}\r\n                                    handleClose={handleClose}\r\n                                    width={200}\r\n                                    propsColor={color}\r\n                />\r\n            </Popover>\r\n        </>\r\n    )\r\n};\r\nexport default SelectColorButtonCustom;\r\n\r\n//==================== TYPE ===================\r\ntype PropsType = {\r\n    tipTitle?: string | undefined\r\n    color: string\r\n    enable: boolean\r\n    onPickColorHandler: (color: string) => void\r\n    size?: number\r\n    borderRadius? : number\r\n    header: string\r\n    anchorOriginVertical?: 'top' | 'center' | 'bottom' | number\r\n    anchorOriginHorizontal?: 'left' | 'center' | 'right' | number\r\n    transformOriginVertical?: 'top' | 'center' | 'bottom' | number\r\n    transformOriginHorizontal?: 'left' | 'center' | 'right' | number\r\n};\r\ntype DivPropsType = {\r\n    size: number\r\n    color: string\r\n    enable: boolean\r\n    borderRadius : number\r\n}\r\n\r\n//================================ STYLES =======================================\r\nconst useStyles = makeStyles({\r\n    tooltip: {\r\n        backgroundColor: '#000'\r\n    },\r\n    arrow: {\r\n        color: '#000'\r\n    }\r\n});\r\n\r\n","import Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React, {ReactElement} from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {translate} from \"../../../const/lang\";\r\nimport SelectColorButtonCustom from \"../../common/SelectColorButtonCustom\";\r\n\r\n//===================== CUSTOM HOOK ===========================\r\nconst useSettingsRow = (probeBackgroundColor: string, defaultColor: string) => {\r\n    const classes = useStyles();\r\n    const lang = useSelector(getLang);\r\n    const useStylesSettings = makeStyles({\r\n        probe: {\r\n            backgroundColor: probeBackgroundColor,\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 5,\r\n            marginRight: 15\r\n        },\r\n        default: {\r\n            backgroundColor: defaultColor,\r\n            width: 40,\r\n            height: 40,\r\n            borderRadius: 5,\r\n            marginRight: 15\r\n        }\r\n    });\r\n    const classesSettings = useStylesSettings();\r\n    return {\r\n        classes, lang, classesSettings\r\n    }\r\n}\r\n\r\n//====================== COMPONENT ============================\r\nconst SettingsRow: React.FC<PropsType> = (props): ReactElement => {\r\n    const {\r\n        title, onChangeHandler, resetToDefaultHandle,\r\n        probeBackgroundColor, defaultColor\r\n    } = props;\r\n    const {\r\n        classes, lang, classesSettings\r\n    } = useSettingsRow(probeBackgroundColor, defaultColor);\r\n\r\n    return (\r\n        <div className={classes.row}>\r\n            <Typography variant='subtitle1' className={classes.text}>\r\n                {title}\r\n            </Typography>\r\n\r\n            <SelectColorButtonCustom\r\n                color={probeBackgroundColor}\r\n                enable={true}\r\n                onPickColorHandler={onChangeHandler}\r\n                size={40}\r\n                borderRadius={5}\r\n                tipTitle='Choose color'\r\n                header='Choose color'\r\n                anchorOriginVertical='top'\r\n                anchorOriginHorizontal='left'\r\n                transformOriginVertical='top'\r\n                transformOriginHorizontal='left'\r\n            />\r\n\r\n            <Button variant='contained'\r\n                    onClick={resetToDefaultHandle}\r\n                    className={classes.button}>\r\n                {translate(lang, 'Reset to default')}\r\n            </Button>\r\n\r\n            <div className={classesSettings.default}/>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default SettingsRow;\r\n\r\n//====================== TYPE ===================\r\ntype PropsType = {\r\n    title: string\r\n    onChangeHandler: (color: string) => void\r\n    resetToDefaultHandle: () => void\r\n    probeBackgroundColor: string\r\n    defaultColor: string\r\n}\r\n\r\n//================== STYLE =========================\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        marginBottom: 15\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 10\r\n    },\r\n    text: {\r\n        marginRight: 15,\r\n        flexBasis: 220\r\n    },\r\n    item: {\r\n        marginRight: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 15,\r\n        marginLeft: 30\r\n    },\r\n\r\n});\r\n","export const defaultTheme = {\r\n    menuBackgroundColor: '#3f50b5',\r\n    displayBackgroundColor: '#e8eaf6',\r\n}","import React, {ReactElement} from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {settingsAC} from \"../../../redux/reducers/settings-reducer\";\r\nimport {getTheme} from \"../../../redux/selectors/settings-selectors\";\r\nimport SettingsRow from \"./SettingsRow\";\r\nimport {defaultTheme} from \"../../../const/const\";\r\nimport {getLang} from \"../../../redux/selectors/app-selectors\";\r\nimport {translate} from \"../../../const/lang\";\r\nimport useAuthRedirect from \"../../../hooks/useAuthRedirect\";\r\nimport useCommonQueryParams from \"../../../hooks/useCommonQueryParams\";\r\n\r\n//===================== CUSTOM HOOK ===========================\r\nconst useSettings = () => {\r\n    useAuthRedirect();\r\n    useCommonQueryParams();\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const theme = useSelector(getTheme);\r\n    const lang = useSelector(getLang);\r\n\r\n    const onMenuBCChangeHandler = (color: string) => {\r\n        if (color) {\r\n            dispatch(settingsAC.setMenuBackgroundColor(color))\r\n        }\r\n    };\r\n    const onDisplayBCChangeHandler = (color: string) => {\r\n        if (color) {\r\n            dispatch(settingsAC.setDisplayBackgroundColor(color))\r\n        }\r\n    };\r\n    const resetMenuBCToDefaultHandle = () => {\r\n        dispatch(settingsAC.setMenuBackgroundColor(defaultTheme.menuBackgroundColor))\r\n    };\r\n    const resetDisplayBCToDefaultHandle = () => {\r\n        dispatch(settingsAC.setDisplayBackgroundColor(defaultTheme.displayBackgroundColor))\r\n    };\r\n    return {\r\n        classes, theme, lang, onMenuBCChangeHandler,\r\n        onDisplayBCChangeHandler, resetMenuBCToDefaultHandle,\r\n        resetDisplayBCToDefaultHandle\r\n    }\r\n};\r\n\r\n//====================== COMPONENT ============================\r\nconst Settings: React.FC = (): ReactElement => {\r\n    const {\r\n        classes, theme, lang, onMenuBCChangeHandler,\r\n        onDisplayBCChangeHandler, resetMenuBCToDefaultHandle,\r\n        resetDisplayBCToDefaultHandle\r\n    } = useSettings();\r\n\r\n    return (\r\n        <Card className={classes.card} elevation={6}>\r\n\r\n            <Typography variant='h6' color='primary' align='center' className={classes.title}>\r\n                {translate(lang, 'Settings')}\r\n            </Typography>\r\n\r\n            <SettingsRow title={translate(lang, 'Menu background color')}\r\n                         onChangeHandler={onMenuBCChangeHandler}\r\n                         probeBackgroundColor={theme.menuBackgroundColor}\r\n                         defaultColor={defaultTheme.menuBackgroundColor}\r\n                         resetToDefaultHandle={resetMenuBCToDefaultHandle}\r\n            />\r\n\r\n            <SettingsRow title={translate(lang, 'Display background color')}\r\n                         onChangeHandler={onDisplayBCChangeHandler}\r\n                         probeBackgroundColor={theme.displayBackgroundColor}\r\n                         defaultColor={defaultTheme.displayBackgroundColor}\r\n                         resetToDefaultHandle={resetDisplayBCToDefaultHandle}\r\n            />\r\n\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default Settings;\r\n\r\n//================== STYLE =========================\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        padding: 20,\r\n        paddingBottom: 400\r\n    },\r\n    title: {\r\n        marginBottom: 15\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginBottom: 10\r\n    },\r\n    text: {\r\n        marginRight: 15,\r\n        flexBasis: 200\r\n    },\r\n    item: {\r\n        marginRight: 15\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 15\r\n    },\r\n    default: {\r\n        backgroundColor: '#3f50b5',\r\n        width: 40,\r\n        height: 40,\r\n        borderRadius: 5,\r\n        marginRight: 15\r\n    }\r\n});","import React from \"react\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getLang} from \"../../redux/selectors/app-selectors\";\r\nimport {translate} from \"../../const/lang\";\r\n\r\n//================= CUSTOM HOOK =========================\r\nconst usePageNotFound = () => {\r\n    const lang = useSelector(getLang);\r\n    const pageNotFoundLabel = translate(lang, 'Page not found')\r\n    return {pageNotFoundLabel}\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst PageNotFound: React.FC = () => {\r\n    const {pageNotFoundLabel} = usePageNotFound();\r\n\r\n    return (\r\n        <Typography align='center'\r\n                    color='secondary'\r\n                    variant='h6'>\r\n            {pageNotFoundLabel}\r\n        </Typography>\r\n    )\r\n\r\n};\r\n\r\nexport default PageNotFound;\r\n\r\n\r\n","import React, {ReactElement, Suspense} from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport CircularPreloader from \"../common/CircularPreloader\";\nimport Login from \"../Login/Login\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useSelector} from \"react-redux\";\nimport {getIsInitializedSelector} from \"../../redux/selectors/app-selectors\";\nimport Users from \"./Users/Users\";\nimport Friends from \"./Friends/Friends\";\nimport Settings from \"./Settings/Settings\";\nimport PageNotFound from \"../common/PageNotFound\";\n\nconst Profile = React.lazy(() => import('./Profile/Profile'));\nconst Dialogs = React.lazy(() => import('./Dialogs/Dialogs'));\n\n//======================== CUSTOM HOOK =========================\nconst useMain = () => {\n    const classes = useStyles();\n    const isInitialized = useSelector(getIsInitializedSelector);\n    return {classes, isInitialized}\n}\n\n\n//======================= COMPONENT ===============================\nconst Main: React.FC = (): ReactElement => {\n    const {classes, isInitialized} = useMain();\n\n    if (!isInitialized) {\n        return <CircularPreloader/>\n    }\n\n    return (\n        <main className={classes.main}>\n            <Suspense fallback={<CircularPreloader/>}>\n                <Switch>\n                    <Route exact path='/' render={() => <Profile/>}/>\n                    <Route path='/dialogs/:userId?' render={() => <Dialogs/>}/>\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route exact path='/users' render={() => <Users/>}/>\n                    <Route path='/users/:userId' render={() => <Profile/>}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/settings' render={() => <Settings/>}/>\n                    <Route path='*' render={() => <PageNotFound/>}/>\n                </Switch>\n            </Suspense>\n        </main>\n    );\n};\n\nexport default Main;\n\n//========================== STYLES ================================================\nconst useStyles = makeStyles({\n    main: {\n        flexGrow: 1,\n        padding: 10\n    }\n});\n","import React, {useEffect} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getMessageIsSending, getRecipientName} from \"./redux/selectors/dialogs-selectors\";\nimport {Snackbar} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {withRouter} from \"react-router-dom\";\nimport {getIsInitialized} from \"./redux/reducers/app-reducer\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport {getTheme} from \"./redux/selectors/settings-selectors\";\n// SSH\n//======================== CUSTOM HOOK =========================\nconst useApp = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const messageIsSending = useSelector(getMessageIsSending);\n    const recipientName = useSelector(getRecipientName);\n    const theme = useSelector(getTheme);\n\n    const [showAlert, setShowAlert] = React.useState(false);\n\n    const catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(e);\n    };\n    useEffect(() => {\n        dispatch(getIsInitialized())\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors);\n        return () => {\n            window.removeEventListener('unhandledrejection', catchAllUnhandledErrors);\n        }\n    }, [dispatch]);\n    useEffect(() => {\n        if (!messageIsSending && recipientName) {\n            setShowAlert(true);\n        }\n    }, [messageIsSending, recipientName])\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setShowAlert(false);\n    };\n\n    const useStylesSettings = makeStyles({\n        root: {\n            backgroundColor: theme.displayBackgroundColor,\n            position: 'relative'\n        }\n    });\n    const classesSettings = useStylesSettings();\n    return {\n        classes, recipientName, showAlert,\n        handleClose, classesSettings\n    }\n};\n\n//======================= COMPONENT ===============================\nconst App: React.FC = () => {\n    const {\n        classes, recipientName, showAlert,\n        handleClose, classesSettings\n    } = useApp();\n\n    return (\n        <div className={classesSettings.root}>\n            <Header/>\n            <div className={classes.wrapper}>\n                <Sidebar/>\n                <Main/>\n            </div>\n\n            <Snackbar open={showAlert}\n                      anchorOrigin={{vertical: 'bottom', horizontal: 'left'}}\n                      autoHideDuration={6000}\n                      onClose={handleClose}>\n                <Alert onClose={handleClose}\n                       variant='filled'\n                       severity=\"success\">\n                    <Typography component='span'>Message to </Typography>\n                    <Typography component='span' color='primary'>{recipientName}</Typography>\n                    <Typography component='span'> is sent!</Typography>\n                </Alert>\n            </Snackbar>\n\n        </div>\n    );\n};\n\nexport default withRouter(App);\n\n//============================= STYLE ==========================\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: indigo[50],\n        position: 'relative'\n    },\n    wrapper: {\n        maxWidth: 1000,\n        width: '100%',\n        margin: '0 auto',\n        display: 'flex',\n        boxSizing: 'border-box',\n        paddingTop: 64,\n        minHeight: '100vh',\n    },\n});\n\n","import * as React from 'react';\r\nimport {ErrorInfo} from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component<PropsType, StateType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            errorInfo: null\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong</h2>\r\n                    <details style={{whiteSpace: 'pre-wrap'}}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                    </details>\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n//==================== TYPES ========================\r\ntype PropsType = {\r\n\r\n};\r\ntype StateType = {\r\n    error: null | Error\r\n    errorInfo: null | ErrorInfo\r\n}","import {Provider} from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport React, {ReactElement} from \"react\";\r\nimport App from \"./App\";\r\nimport ErrorBoundary from \"./Components/common/ErrorBoundary\";\r\nimport {QueryParamProvider} from \"use-query-params\";\r\n\r\nconst AppContainer: React.FC = (): ReactElement => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <QueryParamProvider ReactRouterRoute={Route}>\r\n                    <ErrorBoundary>\r\n                        <App/>\r\n                    </ErrorBoundary>\r\n                </QueryParamProvider>\r\n            </Provider>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default AppContainer;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from \"./AppContainer\";\n\nReactDOM.render(\n    <AppContainer/>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n\n","export const required: FieldValidatorType = (value) =>\r\n    value ? undefined : 'Field is required';\r\n\r\nexport const maxLength = (max: number) => (value: string) =>\r\n    value && value.length > max\r\n        ? `Number of letters is more than ${max}`\r\n        : undefined;\r\n\r\nexport const maxLength10 = (max: number): FieldValidatorType => (value: string) =>\r\n    value && value.length > max\r\n        ? `Number of letters is more than ${max}`\r\n        : undefined;\r\n\r\nexport const maxLength30 = maxLength(30);\r\n\r\nexport const empty: EmptyType = (str: string): boolean => /^\\s+$/.test(str);\r\n\r\nexport const shouldNotBeEmpty: FieldValidatorType = (value) =>\r\n    empty(value) && value !== ''\r\n        ? 'Field should not be empty'\r\n        : undefined;\r\n\r\n//=========================== TYPES =====================================\r\ntype EmptyType = (str: string) => boolean\r\nexport type FieldValidatorType = (value: string) => string | undefined","import {GetActionsType} from \"../redux-store\";\r\n\r\nlet initialState = {\r\n    currentSidebarItem: null as null | number // текущий элемент главного бокового меню\r\n}\r\n\r\ntype initialStateType = typeof initialState;\r\nexport type SidebarActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: SidebarActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM': {\r\n            return {...state, currentSidebarItem: action.currentSidebarItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const sidebarAC = {\r\n    setCurrentSidebarItem: (currentSidebarItem: null | number) => ({type: 'SIDEBAR/SET_CURRENT_SIDEBAR_ITEM', currentSidebarItem} as const)\r\n};\r\n\r\nexport default sidebarReducer;","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useCircularPreloader = ({styleType}: UseCircularPreloaderPropsType) => {\r\n    const classesAbsolute = useStylesAbsolute();\r\n    const classesStaticCenter = useStylesStaticCenter();\r\n    const classesStaticTop = useStylesStaticTop();\r\n    let classes = classesStaticCenter;\r\n    if (styleType === 'absolute') {\r\n        classes = classesAbsolute;\r\n    }\r\n    if (styleType === 'static-top') {\r\n        classes = classesStaticTop;\r\n    }\r\n    return {classes}\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst CircularPreloader: React.FC<PropsType> = (props) => {\r\n    const {size = 100, styleType = 'static-center'} = props;\r\n    const {classes} = useCircularPreloader({styleType});\r\n\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={size} color={'secondary'}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CircularPreloader;\r\n\r\n//============================ TYPES ==================================================\r\ntype PropsType = {\r\n    size?: number | undefined\r\n    styleType?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\ntype UseCircularPreloaderPropsType = {\r\n    styleType?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\n\r\n//============================ STYLES =======================================================\r\nconst useStylesAbsolute = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    }\r\n});\r\nconst useStylesStaticCenter = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n});\r\nconst useStylesStaticTop = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start'\r\n    }\r\n});\r\n","import {GetActionsType} from \"../redux-store\";\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type SettingsActionsType = GetActionsType<typeof settingsAC>;\r\n\r\nlet initialState = {\r\n    theme: {\r\n        menuBackgroundColor: '#3f50b5',\r\n        displayBackgroundColor: '#e8eaf6',\r\n    }\r\n};\r\n\r\nconst settingsReducer = (state = initialState, action: SettingsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'Settings/SET_MENU_BACKGROUND_COLOR':\r\n            return {...state, theme: {...state.theme, menuBackgroundColor: action.menuBackgroundColor}};\r\n        case 'Settings/SET_DISPLAY_BACKGROUND_COLOR':\r\n            return {...state, theme: {...state.theme, displayBackgroundColor: action.displayBackgroundColor}};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const settingsAC = {\r\n    setMenuBackgroundColor: (menuBackgroundColor: string) => ({\r\n        type: 'Settings/SET_MENU_BACKGROUND_COLOR',\r\n        menuBackgroundColor\r\n    } as const),\r\n    setDisplayBackgroundColor: (displayBackgroundColor: string) => ({\r\n        type: 'Settings/SET_DISPLAY_BACKGROUND_COLOR',\r\n        displayBackgroundColor\r\n    } as const),\r\n};\r\n\r\n\r\nexport default settingsReducer;","import {StateType} from \"../redux-store\";\r\n\r\nexport const getId = (state: StateType) => state.auth.id;\r\nexport const getEmail = (state: StateType) => state.auth.email;\r\nexport const getLogin = (state: StateType) => state.auth.login;\r\nexport const getIsAuth = (state: StateType) => state.auth.isAuth;\r\nexport const getCaptchaSelector = (state: StateType) => state.auth.captcha;\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {getLang} from \"../redux/selectors/app-selectors\";\r\nimport {getTheme} from \"../redux/selectors/settings-selectors\";\r\nimport {getCurrentSidebarItem} from \"../redux/selectors/sidebar-selectors\";\r\nimport {NumberParam, StringParam, useQueryParam} from \"use-query-params\";\r\nimport {useEffect} from \"react\";\r\nimport {appAC} from \"../redux/reducers/app-reducer\";\r\nimport {LangType} from \"../types/types\";\r\nimport {settingsAC} from \"../redux/reducers/settings-reducer\";\r\nimport {sidebarAC} from \"../redux/reducers/sidebar-reducer\";\r\n\r\nconst useCommonQueryParams = () => {\r\n    const dispatch = useDispatch();\r\n    const lang = useSelector(getLang);\r\n    const theme = useSelector(getTheme);\r\n    const currentSidebarItem = useSelector(getCurrentSidebarItem);\r\n\r\n    const [langQuery, setLangQuery] = useQueryParam('lang', StringParam);\r\n    const [menuColorQuery, setMenuColorQuery] = useQueryParam('menuColor', StringParam);\r\n    const [displayColorQuery, setDisplayColorQuery] = useQueryParam('displayColor', StringParam);\r\n    const [sidebarItemQuery, setSidebarItemQuery] = useQueryParam('sidebarItem', NumberParam);\r\n\r\n    // URL => STATE\r\n    useEffect(() => {\r\n        dispatch(appAC.setLang(langQuery ? langQuery as LangType : lang));\r\n        dispatch(settingsAC.setMenuBackgroundColor(menuColorQuery ? menuColorQuery : theme.menuBackgroundColor));\r\n        dispatch(settingsAC.setDisplayBackgroundColor(displayColorQuery ? displayColorQuery : theme.displayBackgroundColor));\r\n        dispatch(sidebarAC.setCurrentSidebarItem(sidebarItemQuery ? sidebarItemQuery : currentSidebarItem));\r\n    }, [dispatch]);\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setLangQuery(lang !== 'eng' ? lang : undefined);\r\n        setMenuColorQuery(theme.menuBackgroundColor !== '#3f50b5' ? theme.menuBackgroundColor : undefined);\r\n        setDisplayColorQuery(theme.displayBackgroundColor !== '#e8eaf6' ? theme.displayBackgroundColor : undefined);\r\n        setSidebarItemQuery(currentSidebarItem ? currentSidebarItem : undefined);\r\n    }, [\r\n        lang,\r\n        theme,\r\n        currentSidebarItem\r\n    ]);\r\n}\r\nexport default useCommonQueryParams;","import {StateType} from \"../redux-store\";\r\n\r\nexport const getTheme = (state: StateType) => state.settings.theme;\r\n","import {instance, ResponseTypeAPI, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype AuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype AuthResponseType = ResponseTypeAPI<AuthResponseDataType>\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\ntype LoginResponseType = ResponseTypeAPI<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>\r\n\r\nexport const authAPI = {\r\n    async auth() {\r\n        let response = await instance.get<AuthResponseType>(`auth/me`)\r\n        return response.data;\r\n    },\r\n    async login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        let response = await instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n        return response.data;\r\n    },\r\n    async logout() {\r\n        let response = await instance.delete(`auth/login`)\r\n        return response.data;\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype getCaptchaResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    async getCaptcha() {\r\n        let response = await instance.get<getCaptchaResponseType>(`security/get-captcha-url`);\r\n        return response.data;\r\n    }\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../../DAL/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {authAPI} from \"../../DAL/auth-api\";\r\nimport {securityAPI} from \"../../DAL/security-api\";\r\nimport {BaseThunkType, GetActionsType} from \"../redux-store\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {SidebarItemEnum} from \"../../types/types\";\r\nimport {sidebarAC, SidebarActionsType} from \"./sidebar-reducer\";\r\n\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as null | string\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype AuthActionsType = GetActionsType<typeof authAC>\r\ntype ThunkType = BaseThunkType<AuthActionsType | FormAction | AppActionsType | SidebarActionsType>\r\n\r\nconst authReducer = (state = initialState, action: AuthActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_AUTH_USER_DATA': {\r\n            return {...state, ...action.data,}\r\n        }\r\n        case 'AUTH/SET_CAPTCHA':\r\n            return {...state, captcha: action.captcha}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const authAC = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH/SET_AUTH_USER_DATA',\r\n        data: {id, email, login, isAuth}\r\n    } as const),\r\n    setCaptchaUrl: (captcha: string) => ({type: 'AUTH/SET_CAPTCHA', captcha} as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.auth();\r\n        //если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            let {id, login, email} = data.data;\r\n            dispatch(authAC.setAuthUserData(id, email, login, true));\r\n        }\r\n        dispatch(appAC.toggleLoading(false));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false))\r\n    }\r\n\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.login(email, password, rememberMe, captcha);\r\n        // если залогинены\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n            dispatch(sidebarAC.setCurrentSidebarItem(SidebarItemEnum.myProfile))\r\n        } else { // неправильный логин и(или) пароль\r\n            if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) { // необходима каптча\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message = data.messages.length > 0 ? data.messages[0] : 'some error';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        const data = await securityAPI.getCaptcha();\r\n        dispatch(authAC.setCaptchaUrl(data.url));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await authAPI.logout();\r\n        // если вылогинись\r\n        if (data.resultCode === 0) {\r\n            dispatch(authAC.setAuthUserData(null, null, null, false));\r\n        }\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import {StateType} from \"../redux-store\";\r\n\r\nexport const getDialogsSelector = (state: StateType) => state.dialogs.dialogs;\r\nexport const getMessagesSelector = (state: StateType) => state.dialogs.messages;\r\nexport const getSelectedMessages = (state: StateType) => state.dialogs.selectedMessages;\r\nexport const getSelectedDeletedMessages = (state: StateType) => state.dialogs.selectedDeletedMessages;\r\nexport const getDialogsIsLoading = (state: StateType) => state.dialogs.dialogsIsLoading;\r\nexport const getMessageIsSending = (state: StateType) => state.dialogs.messageIsSending;\r\nexport const getRecipientName = (state: StateType) => state.dialogs.recipientName;\r\nexport const getMessagesIsLoading = (state: StateType) => state.dialogs.messagesIsLoading;\r\nexport const getMessagesIsDeleting = (state: StateType) => state.dialogs.messagesIsDeleting;\r\nexport const getCurrentDialogsSidebarItem = (state: StateType) => state.dialogs.currentDialogsSidebarItem;\r\nexport const getLoading = (state: StateType) => state.dialogs.messageIsSending ||\r\n    state.dialogs.messagesIsLoading ||\r\n    state.dialogs.messagesIsDeleting;\r\nexport const getDeletedMessages = (state: StateType) => state.dialogs.deletedMessages;\r\nexport const getSpamMessages = (state: StateType) => state.dialogs.spamMessages;\r\n\r\n\r\n\r\n\r\n","import {OutlinedInputProps, TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst RenderTextField: React.FC<PropsType> = (props) => {\r\n    const {icon, label, input, meta: {touched, invalid, error}, classes, ...custom} = props;\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {icon &&\r\n            <div className={styles.iconLeft}>\r\n                {icon}\r\n            </div>}\r\n            <TextField\r\n                InputProps={classes ? {classes} as Partial<OutlinedInputProps> : null}\r\n                variant=\"outlined\"\r\n                label={label}\r\n                placeholder={label}\r\n                error={touched && invalid}\r\n                helperText={touched && error}\r\n                {...input}\r\n                {...custom}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderTextField;\r\n\r\n//======================= TYPES ======================================================\r\ntype PropsType = {\r\n    icon: React.ReactElement\r\n    label: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n    classes?: any\r\n}\r\n//========================= STYLES =============================================================\r\nconst useStyles = makeStyles({\r\n        root: {\r\n            position: 'relative',\r\n            width: '100%'\r\n        },\r\n        iconLeft: {\r\n            position: 'absolute',\r\n            left: -5,\r\n            top: '50%',\r\n            transform: 'translate(-100%, -50%)'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n"],"sourceRoot":""}